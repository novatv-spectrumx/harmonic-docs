[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/harmonic-font-face.js",
    "content": "/**\n * File: harmonic-font-face.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The Harmonic FontFace class is a utility for loading fonts that reside\n * near the Harmonic Template on the webserver.  This class is a thin wrapper\n * around the FontFace class defined in the CSS Font Loading API.\n *\n * Once a font is successfully loaded it is added to the document.fonts\n * FontFaceSet.  Fonts are loaded synchronously so that they are\n * guaranteed to be loaded before Load Complete is signaled.\n *\n * This class dispatches 2 events:\n * - HarmonicFontFace.FONT_LOADED_EVENT - this event is dispatched when the\n *   requested font file has been loaded.\n * - HarmonicFontFace.FONT_LOAD_FAILED_EVENT - this event is dispatched when\n *   the requested font file failed to load.\n *\n * If a font fails to load, then an error will be logged and the\n * FONT_LOAD_FAILED_EVENT will be dispatched.\n *\n * If the font is not being displayed correctly, verify that the font\n * name in the Adobe generated JavaScript matches the family parameter passed\n * to this class.\n *\n * For best performance, use woff2, then woff, then ttf, then otf.  Woff2 offers\n * a 30% average compression gain over woff.  Woff is basically ttf or otf\n * with metadata and compression for smaller font files.\n *\n * @example\n * // To use this class, add the following to your template's Global Script.\n * // Modify the font family and font files for your specific font.\n * let notable = new HarmonicFontFace(\"Notable\", \"Notable-Regular.woff2\");\n * // Use notable.addFile(<file 2>) if multiple files are necessary\n * // Set descriptors before calling load:\n * // Example notable.unicodeRange = \"U+0000-00FF\";\n * notable.load();\n *\n * @see https://drafts.csswg.org/css-font-loading/#FontFace-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API\n * @see https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization\n */\nclass HarmonicFontFace {\n\n    /**\n     * Constructor\n     *\n     * @param {String} family - must be the name used in the Adobe-generated JavaScript\n     * @param {String} file - the name of the font file.  Use addFile if you have more than one.\n     */\n    constructor(family, file) {\n        /**\n         * The font family.  This name must match the name used in the Adobe-generated JavaScript\n         * @type {String}\n         */\n        this._family = family;\n\n        /**\n         * The source string passed to the FontFace constructor.  Useful for debugging.\n         * @type {String}\n         */\n        this._source = \"\";\n\n        /**\n         * An array of files to include in the source string.  The first file is added\n         * in the constructor.  Additional files can be added using the 'addFile' method.\n         * @type {Array}\n         */\n        this._files = [ file ];\n\n        /**\n         * The descriptors that can be passed to the FontFace constructor.\n         * @type {Object}\n         */\n        this._descriptors = {\n            display: HarmonicFontFace.DISPLAY_BLOCK,\n            style: HarmonicFontFace.STYLE_NORMAL,\n            weight: HarmonicFontFace.WEIGHT_NORMAL,\n            stretch: HarmonicFontFace.STRETCH_NORMAL,\n            unicodeRange: HarmonicFontFace.UNICODE_RANGE_ALL,\n            variant: HarmonicFontFace.VARIANT_NORMAL,\n            featureSettings: HarmonicFontFace.FEATURE_SETTINGS_NORMAL\n        };\n\n        /**\n         * The FontFace object.  It will be created in the load function.\n         * @type {Object}\n         */\n        this._fontFace = undefined;\n    }\n\n    /**\n     * Loads the font.  This method:\n     * - creates the FontFace object\n     * - performs a synchronous load\n     * - dispatches the appropriate event\n     * - on success, adds the loaded FontFace to the document.fonts FontFaceSet.\n     */\n    load() {\n        this._source = this._getSource();\n\n        if (this._source) {\n\n            this._fontFace = new FontFace(this._family, this._source, this._descriptors);\n\n            try {\n\n                this._fontFace.load();\n\n                document.fonts.add(this._fontFace);\n\n                document.dispatchEvent(new CustomEvent(HarmonicFontFace.FONT_LOADED_EVENT, {\n                    detail: this\n                }));\n\n                hjs.info(\"Font loaded: \" + this._family);\n            }\n            catch(err) {\n                hjs.error(\"Font load failed: file: \" + this._files[0] + \" code: \" + err.code + \" name: \" + err.name + \" msg: \" + err.message);\n                document.dispatchEvent(new CustomEvent(HarmonicFontFace.FONT_LOAD_FAILED_EVENT, {\n                    detail: this\n                }));\n            }\n        }\n        else {\n            document.dispatchEvent(new CustomEvent(HarmonicFontFace.FONT_LOAD_FAILED_EVENT, {\n                detail: this\n            }));\n        }\n    }\n\n    /**\n     * Adds a file to the internal list of font files.  This method\n     * is useful if multiple font files are used.\n     * @param {String} file\n     */\n    addFile(file) {\n        this._files.push(file);\n    }\n\n    /**\n     * Returns the format of the specified file.  The format is based\n     * on the extension of the file.\n     * @param {String} file\n     * @return {String} format of the file.  Undefined if not supported by the switch statement.  This is not an error.\n     */\n    _getFormat(file) {\n        let extension = file.split('.').pop();\n        switch (extension) {\n            case \"woff2\":\n                return \"woff2\";\n            case \"woff\":\n                return \"woff\";\n            case \"ttf\":\n                return \"truetype\";\n            case \"otf\":\n                return \"opentype\";\n            case \"svg\":\n            case \"eot\":\n                // SVG and EOT are not supported by Chrome.\n            default:\n                hjs.error(\"Font load error: font file format is not supported: file: \" + file);\n                return undefined;\n        }\n    }\n\n    /**\n     * Returns the source string to include in the FontFace constructor.\n     * The Source is composed of the 'local' font as well as 'url's to\n     * the font files.\n     *\n     * @return {String} the source string or undefined if there is an error\n     */\n    _getSource() {\n        let src = \"\";\n\n        src = \"local('\" + this._family + \"')\";\n\n        let length = this._files.length;\n        for (let i = 0; i < length; i++) {\n            src += \", \";\n            src += \"url('\" + this._files[i] + \"')\";\n            let format = this._getFormat(this._files[i]);\n            if (format) {\n                src += \" format('\" + format + \"')\";\n            }\n            else {\n                return undefined;\n            }\n        }\n\n        return src;\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    // Descriptors\n    set display(value) { this._descriptors.display = value; }\n    set style(value) { this._descriptors.style = value; }\n    set weight(value) { this._descriptors.weight = value; }\n    set stretch(value) { this._descriptors.stretch = value; }\n    set unicodeRange(value) { this._descriptors.unicodeRange = value; }\n    set variant(value) { this._descriptors.variant = value; }\n    set featureSettings(value) { this._descriptors.featureSettings = value; }\n\n    get display() { return this._descriptors.display; }\n    get style() { return this._descriptors.style; }\n    get weight() { return this._descriptors.weight; }\n    get stretch() { return this._descriptors.stretch; }\n    get unicodeRange() { return this._descriptors.unicodeRange; }\n    get variant() { return this._descriptors.variant; }\n    get featureSettings() { return this._descriptors.featureSettings; }\n\n    // Useful for debugging\n    get family() { return this._family; }\n    get files() { return this._files; }\n    get source() { return this._source; }\n    get fontFace() { return this._fontFace; }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\nHarmonicFontFace.FONT_LOADED_EVENT = \"FontLoadedEvent\";\nHarmonicFontFace.FONT_LOAD_FAILED_EVENT = \"FontLoadFailedEvent\";\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\nHarmonicFontFace.DISPLAY_AUTO = \"auto\";\nHarmonicFontFace.DISPLAY_BLOCK = \"block\";\nHarmonicFontFace.DISPLAY_SWAP = \"swap\";\nHarmonicFontFace.DISPLAY_FALLBACK = \"fallback\";\nHarmonicFontFace.DISPLAY_OPTIONAL = \"optional\";\n\nHarmonicFontFace.STYLE_NORMAL = \"normal\";\n\nHarmonicFontFace.WEIGHT_NORMAL = \"normal\";\n\nHarmonicFontFace.STRETCH_NORMAL = \"normal\";\n\nHarmonicFontFace.UNICODE_RANGE_ALL = \"U+0-10FFFF\";\n\nHarmonicFontFace.VARIANT_NORMAL = \"normal\";\n\nHarmonicFontFace.FEATURE_SETTINGS_NORMAL = \"normal\";\n\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/harmonic-font-face.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "HarmonicFontFace",
    "memberof": "src/harmonic-font-face.js",
    "static": true,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace",
    "access": "public",
    "export": false,
    "importPath": "./src/harmonic-font-face.js",
    "importStyle": null,
    "description": "The Harmonic FontFace class is a utility for loading fonts that reside\nnear the Harmonic Template on the webserver.  This class is a thin wrapper\naround the FontFace class defined in the CSS Font Loading API.\n\nOnce a font is successfully loaded it is added to the document.fonts\nFontFaceSet.  Fonts are loaded synchronously so that they are\nguaranteed to be loaded before Load Complete is signaled.\n\nThis class dispatches 2 events:\n- HarmonicFontFace.FONT_LOADED_EVENT - this event is dispatched when the\n  requested font file has been loaded.\n- HarmonicFontFace.FONT_LOAD_FAILED_EVENT - this event is dispatched when\n  the requested font file failed to load.\n\nIf a font fails to load, then an error will be logged and the\nFONT_LOAD_FAILED_EVENT will be dispatched.\n\nIf the font is not being displayed correctly, verify that the font\nname in the Adobe generated JavaScript matches the family parameter passed\nto this class.\n\nFor best performance, use woff2, then woff, then ttf, then otf.  Woff2 offers\na 30% average compression gain over woff.  Woff is basically ttf or otf\nwith metadata and compression for smaller font files.",
    "examples": [
      "// To use this class, add the following to your template's Global Script.\n// Modify the font family and font files for your specific font.\nlet notable = new HarmonicFontFace(\"Notable\", \"Notable-Regular.woff2\");\n// Use notable.addFile(<file 2>) if multiple files are necessary\n// Set descriptors before calling load:\n// Example notable.unicodeRange = \"U+0000-00FF\";\nnotable.load();"
    ],
    "see": [
      "https://drafts.csswg.org/css-font-loading/#FontFace-interface",
      "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API",
      "https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization"
    ],
    "lineNumber": 46,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "family",
        "description": "must be the name used in the Adobe-generated JavaScript"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "the name of the font file.  Use addFile if you have more than one."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_family",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_family",
    "access": "private",
    "description": "The font family.  This name must match the name used in the Adobe-generated JavaScript",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_source",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_source",
    "access": "private",
    "description": "The source string passed to the FontFace constructor.  Useful for debugging.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_files",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_files",
    "access": "private",
    "description": "An array of files to include in the source string.  The first file is added\nin the constructor.  Additional files can be added using the 'addFile' method.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_descriptors",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_descriptors",
    "access": "private",
    "description": "The descriptors that can be passed to the FontFace constructor.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_fontFace",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_fontFace",
    "access": "private",
    "description": "The FontFace object.  It will be created in the load function.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "load",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#load",
    "access": "public",
    "description": "Loads the font.  This method:\n- creates the FontFace object\n- performs a synchronous load\n- dispatches the appropriate event\n- on success, adds the loaded FontFace to the document.fonts FontFaceSet.",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addFile",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#addFile",
    "access": "public",
    "description": "Adds a file to the internal list of font files.  This method\nis useful if multiple font files are used.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_getFormat",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_getFormat",
    "access": "private",
    "description": "Returns the format of the specified file.  The format is based\non the extension of the file.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "format of the file.  Undefined if not supported by the switch statement.  This is not an error."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "_getSource",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#_getSource",
    "access": "private",
    "description": "Returns the source string to include in the FontFace constructor.\nThe Source is composed of the 'local' font as well as 'url's to\nthe font files.",
    "lineNumber": 177,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the source string or undefined if there is an error"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "set",
    "name": "display",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#display",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true
  },
  {
    "__docId__": 63,
    "kind": "set",
    "name": "style",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#style",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "set",
    "name": "weight",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#weight",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true
  },
  {
    "__docId__": 65,
    "kind": "set",
    "name": "stretch",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#stretch",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "set",
    "name": "unicodeRange",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#unicodeRange",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true
  },
  {
    "__docId__": 67,
    "kind": "set",
    "name": "variant",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#variant",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true
  },
  {
    "__docId__": 68,
    "kind": "set",
    "name": "featureSettings",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#featureSettings",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "display",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#display",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "get",
    "name": "style",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#style",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "get",
    "name": "weight",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#weight",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "get",
    "name": "stretch",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#stretch",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "unicodeRange",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#unicodeRange",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "variant",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#variant",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "featureSettings",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#featureSettings",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "family",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#family",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "files",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#files",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "source",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#source",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "fontFace",
    "memberof": "src/harmonic-font-face.js~HarmonicFontFace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-font-face.js~HarmonicFontFace#fontFace",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/harmonic-socket.js",
    "content": "/**\n * File: harmonic-socket.js\n *\n * Copyright (c) 2020 Harmonic, Inc.\n */\n\n /**\n * The Harmonic Socket class is a utility for connecting to a\n * TCP or UDP socket using the HTML renderer as the proxy.  Since\n * browsers cannot open sockets directly due to security concerns,\n * the HTML renderer is used as a proxy for handling the socket connection.\n *\n * Before calling connect() on the socket, wait for the LOAD_COMPLETE event.\n * This is required because the websocket communication to the HTML renderer\n * must be established before the proxy can be used.\n *\n * This class dispatches 4 events:\n * - HarmonicSocket.CONNECTED_EVENT - this event is dispatched once the\n *   HTML renderer establishes a socket connection.\n * - HarmonicSocket.DISCONNECTED_EVENT - this event is dispatched once the\n *   HTML renderer disconnects from the socket.\n * - HarmonicSocket.DATA_EVENT - this event is dispatched when data is\n *   received on the socket from the server.\n * - HarmonicSocket.ERROR_EVENT = this event is dispatched when an error\n *   occurs during the socket functionality.\n *\n * Below is example code that connects to an Oxtel server and loads a graphic\n * template.\n *\n * @example\n * // To use this class, add the following to your template's Global Script.\n * var socket = new HarmonicSocket();\n * socket.ipAddress = \"10.10.55.149\";\n * socket.port = 9100;\n * socket.socketType = 0;\n * socket.timeoutInSec = 2;\n *\n * // Listen for socket events\n * document.addEventListener(HarmonicTemplate.LOAD_COMPLETE_EVENT, onLoadComplete.bind(this));\n * document.addEventListener(HarmonicSocket.CONNECTED_EVENT, onConnect.bind(this));\n * document.addEventListener(HarmonicSocket.DISCONNECTED_EVENT, onDisconnect.bind(this));\n * document.addEventListener(HarmonicSocket.DATA_EVENT, onData.bind(this));\n * document.addEventListener(HarmonicSocket.ERROR_EVENT, onError.bind(this));\n *\n * function onLoadComplete(obj) {\n *     hjs.info(\"LOAD_COMPLETE_EVENT received\");\n *\n *     // Since the Harmonic Socket uses the websocket interface to the HTML\n *     // renderer, we must wait for LOAD_COMPLETE before trying to connect.\n *     socket.connect();\n * }\n *\n * // Socket event handlers\n * function onConnect(event) {\n *     hjs.info(\"Socket Connected\");\n *\n *     // Load template\n *     socket.write(\"R001080p60-cc/1080p60-cc.html:\");\n * }\n *\n * function onDisconnect(event) {\n *     hjs.info(\"Socket disconnected\");\n * }\n *\n * function onData(event) {\n *     hjs.info(\"Socket Data received: \" + event.detail.data);\n * }\n *\n * function onError(event) {\n *     hjs.error(\"Socket error\");\n * }\n *\n */\nclass HarmonicSocket {\n\n    /**\n     * Constructor\n     */\n    constructor() {\n\n        /**\n         * The IP address.\n         * @type {String}\n         */\n        this._ipAddress = \"\";\n\n        /**\n         * The port number.\n         * @type {Number}\n         */\n        this._port = 0;\n\n        /**\n         * The socket type being connected to.\n         * @type {Number}\n         */\n        this._socketType = HJS.SOCKET_TYPE_INVALID;\n\n        /**\n         * The connect timeout in seconds.\n         * @type {Number}\n         */\n        this._timeoutInSec = 1;\n\n        /**\n         * Once the socket is connected, the socket ID is returned.\n         * This socket ID is used in further interaction with the class.\n         * @type {Number}\n         */\n        this._socketId = 0;\n\n        /**\n         * Callback function used to receive commands from the HTML renderer.\n         * This is necessary for use in the add/remove listener functions.\n         * @type {Object}\n         */\n        this._commandReceivedCallback = this._onCommandReceived.bind(this);\n    }\n\n    /**\n     * Connects to the socket.\n     *\n     * @param {String} ipAddress - the IP address to connect to\n     * @param {Number} port - the port number\n     * @param {Number} socketType - TCP vs UDP (reference HJS)\n     * @param {Number} timeoutInSec - connect timeout in seconds\n     *\n     * @return {Boolean} true = success, false = fail\n     */\n    connectWith(ipAddress, port, socketType, timeoutInSec) {\n        if (!this.isConnected()) {\n\n            if ((socketType < 0) || (socketType >= HJS.SOCKET_TYPE_MAX)) {\n                return false;\n            }\n\n            this._ipAddress = ipAddress;\n            this._port = port;\n            this._socketType = socketType;\n            this._timeoutInSec = timeoutInSec;\n\n            document.addEventListener(HJS.COMMAND_RECEIVED_EVENT, this._commandReceivedCallback);\n            hjs.connectSocket(this._ipAddress, this._port, this._socketType, this._timeoutInSec);\n\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Connects to the socket using the member variable values.\n     *\n     * @return {Boolean} true = success, false = fail\n     */\n    connect() {\n        return this.connectWith(this._ipAddress, this._port, this._socketType, this._timeoutInSec);\n    }\n\n    /**\n     * Disconnects from the socket.\n     *\n     * @return {Boolean} true = success, false = fail\n     */\n    disconnect() {\n        if (this.isConnected()) {\n            hjs.disconnectSocket(this._socketId);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Writes data to the socket.  This currently only supports ASCII data.\n     *\n     * @param {String} data - the data to write to the socket\n     *\n     * @return {Boolean} true = success, false = fail\n     */\n    write(data) {\n        if (this.isConnected()) {\n            hjs.writeSocket(this._socketId, data);\n            return true;\n        }\n    }\n\n    /**\n     * Returns true if connected to the socket, false otherwise.\n     *\n     * @return {Boolean} true = connected, false = disconnected\n     */\n    isConnected() {\n        return this._socketId != 0;\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns the IP address.\n     *\n     * @return {String}\n     */\n    get ipAddress() {\n        return this._ipAddress;\n    }\n\n    /**\n     * Sets the IP address.\n     *\n     * @param {String} val\n     */\n    set ipAddress(val) {\n        this._ipAddress = val;\n    }\n\n    /**\n     * Returns the port.\n     *\n     * @return {Number}\n     */\n    get port() {\n        return this._port;\n    }\n\n    /**\n     * Sets the port.\n     *\n     * @param {Number} val\n     */\n    set port(val) {\n        this._port = val;\n    }\n\n    /**\n     * Returns the socket type.\n     *\n     * @return {Number}\n     */\n    get socketType() {\n        return this._socketType;\n    }\n\n    /**\n     * Sets the socket type.\n     *\n     * @param {Number} val\n     */\n    set socketType(val) {\n        this._socketType = val;\n    }\n\n    /**\n     * Returns the socket ID.\n     *\n     * @return {Number}\n     */\n    get socketId() {\n        return this._socketId;\n    }\n\n    /**\n     * Sets the connect timeout in seconds.\n     *\n     * @param {Number} val\n     */\n    set timeoutInSec(val) {\n        this._timeoutInSec = val;\n    }\n\n    /**\n     * Returns the connect timeout in seconds.\n     *\n     * @return {Number}\n     */\n    get timeoutInSec() {\n        return this._timeoutInSec;\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Handles socket commands received from the HTML renderer.\n     *\n     * @param {Object} event\n     * @param {Object} event.detail - the detail for the event\n     */\n    _onCommandReceived(event) {\n        switch (event.detail.command) {\n            case HJS.SOCKET_CONNECT_COMMAND:\n                if ((event.detail.ipAddress == this._ipAddress) &&\n                    (event.detail.port == this._port) &&\n                    (event.detail.socketType == this._socketType)) {\n                    this._onConnected(event.detail);\n                }\n                break;\n            case HJS.SOCKET_DISCONNECTED_COMMAND:\n                if (event.detail.socketId == this._socketId) {\n                    this._onDisconnected(event.detail);\n                }\n                break;\n            case HJS.SOCKET_DATA_COMMAND:\n                if (event.detail.socketId == this._socketId) {\n                    this._onData(event.detail);\n                }\n                break;\n            case HJS.SOCKET_ERROR_COMMAND:\n                this._onError(event.detail);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Handles the CONNECTED event from HJS.\n     *\n     * @param {Object} obj\n     * @param {String} obj.ipAddress - the IP address\n     * @param {Number} obj.port - the port number\n     * @param {Number} obj.socketType - 0 = TCP, 1 = UDP\n     * @param {Number} obj.socketId - the socket identifier\n     */\n    _onConnected(obj) {\n        this._socketId = obj.socketId;\n\n        document.dispatchEvent(new CustomEvent(HarmonicSocket.CONNECTED_EVENT, {\n            detail: this\n        }));\n    }\n\n    /**\n     * Handles the DISCONNECTED event from HJS.\n     *\n     * @param {Object} obj\n     * @param {String} obj.ipAddress - the IP address\n     * @param {Number} obj.port - the port number\n     * @param {Number} obj.socketType - 0 = TCP, 1 = UDP\n     * @param {Number} obj.socketId - the socket identifier\n     */\n    _onDisconnected(obj) {\n        this._socketId = 0;\n\n        document.removeEventListener(HJS.COMMAND_RECEIVED_EVENT, this._commandReceivedCallback);\n\n        document.dispatchEvent(new CustomEvent(HarmonicSocket.DISCONNECTED_EVENT, {\n            detail: this\n        }));\n    }\n\n    /**\n     * Handles the DATA event from HJS.\n     *\n     * @param {Object} obj\n     * @param {String} obj.ipAddress - the IP address\n     * @param {Number} obj.port - the port number\n     * @param {Number} obj.socketType - 0 = TCP, 1 = UDP\n     * @param {Number} obj.socketId - the socket identifier\n     */\n    _onData(obj) {\n        document.dispatchEvent(new CustomEvent(HarmonicSocket.DATA_EVENT, {\n            detail: {\n                this: this,\n                data: obj.data\n            }\n        }));\n    }\n\n    /**\n     * Handles the ERROR event from HJS.\n     *\n     * @param {Object} obj\n     * @param {String} obj.ipAddress - the IP address\n     * @param {Number} obj.port - the port number\n     * @param {Number} obj.socketType - 0 = TCP, 1 = UDP\n     * @param {Number} obj.socketId - the socket identifier\n     */\n    _onError(obj) {\n        document.dispatchEvent(new CustomEvent(HarmonicSocket.ERROR_EVENT, {\n            detail: {\n                this: this,\n                errorCode: obj.errorCode\n            }\n        }));\n    }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\nHarmonicSocket.CONNECTED_EVENT = \"ConnectedEvent\";\nHarmonicSocket.DISCONNECTED_EVENT = \"DisconnectedEvent\";\nHarmonicSocket.DATA_EVENT = \"DataEvent\";\nHarmonicSocket.ERROR_EVENT = \"ErrorEvent\";\n\n//------------------------------------------------------------------------------\n// Error Codes\n//------------------------------------------------------------------------------\nHarmonicSocket.CONNECT_ERROR = 1;\nHarmonicSocket.READ_ERROR = 2;\nHarmonicSocket.WRITE_ERROR = 3;\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/harmonic-socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "HarmonicSocket",
    "memberof": "src/harmonic-socket.js",
    "static": true,
    "longname": "src/harmonic-socket.js~HarmonicSocket",
    "access": "public",
    "export": false,
    "importPath": "./src/harmonic-socket.js",
    "importStyle": null,
    "description": "The Harmonic Socket class is a utility for connecting to a\nTCP or UDP socket using the HTML renderer as the proxy.  Since\nbrowsers cannot open sockets directly due to security concerns,\nthe HTML renderer is used as a proxy for handling the socket connection.\n\nBefore calling connect() on the socket, wait for the LOAD_COMPLETE event.\nThis is required because the websocket communication to the HTML renderer\nmust be established before the proxy can be used.\n\nThis class dispatches 4 events:\n- HarmonicSocket.CONNECTED_EVENT - this event is dispatched once the\n  HTML renderer establishes a socket connection.\n- HarmonicSocket.DISCONNECTED_EVENT - this event is dispatched once the\n  HTML renderer disconnects from the socket.\n- HarmonicSocket.DATA_EVENT - this event is dispatched when data is\n  received on the socket from the server.\n- HarmonicSocket.ERROR_EVENT = this event is dispatched when an error\n  occurs during the socket functionality.\n\nBelow is example code that connects to an Oxtel server and loads a graphic\ntemplate.",
    "examples": [
      "// To use this class, add the following to your template's Global Script.\nvar socket = new HarmonicSocket();\nsocket.ipAddress = \"10.10.55.149\";\nsocket.port = 9100;\nsocket.socketType = 0;\nsocket.timeoutInSec = 2;\n\n// Listen for socket events\ndocument.addEventListener(HarmonicTemplate.LOAD_COMPLETE_EVENT, onLoadComplete.bind(this));\ndocument.addEventListener(HarmonicSocket.CONNECTED_EVENT, onConnect.bind(this));\ndocument.addEventListener(HarmonicSocket.DISCONNECTED_EVENT, onDisconnect.bind(this));\ndocument.addEventListener(HarmonicSocket.DATA_EVENT, onData.bind(this));\ndocument.addEventListener(HarmonicSocket.ERROR_EVENT, onError.bind(this));\n\nfunction onLoadComplete(obj) {\n    hjs.info(\"LOAD_COMPLETE_EVENT received\");\n\n    // Since the Harmonic Socket uses the websocket interface to the HTML\n    // renderer, we must wait for LOAD_COMPLETE before trying to connect.\n    socket.connect();\n}\n\n// Socket event handlers\nfunction onConnect(event) {\n    hjs.info(\"Socket Connected\");\n\n    // Load template\n    socket.write(\"R001080p60-cc/1080p60-cc.html:\");\n}\n\nfunction onDisconnect(event) {\n    hjs.info(\"Socket disconnected\");\n}\n\nfunction onData(event) {\n    hjs.info(\"Socket Data received: \" + event.detail.data);\n}\n\nfunction onError(event) {\n    hjs.error(\"Socket error\");\n}"
    ],
    "lineNumber": 74,
    "interface": false
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 79
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_ipAddress",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_ipAddress",
    "access": "private",
    "description": "The IP address.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_port",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_port",
    "access": "private",
    "description": "The port number.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_socketType",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_socketType",
    "access": "private",
    "description": "The socket type being connected to.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "_timeoutInSec",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_timeoutInSec",
    "access": "private",
    "description": "The connect timeout in seconds.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "_socketId",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_socketId",
    "access": "private",
    "description": "Once the socket is connected, the socket ID is returned.\nThis socket ID is used in further interaction with the class.",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_commandReceivedCallback",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_commandReceivedCallback",
    "access": "private",
    "description": "Callback function used to receive commands from the HTML renderer.\nThis is necessary for use in the add/remove listener functions.",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "connectWith",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#connectWith",
    "access": "public",
    "description": "Connects to the socket.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ipAddress",
        "description": "the IP address to connect to"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": "the port number"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketType",
        "description": "TCP vs UDP (reference HJS)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutInSec",
        "description": "connect timeout in seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = success, false = fail"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "connect",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#connect",
    "access": "public",
    "description": "Connects to the socket using the member variable values.",
    "lineNumber": 157,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = success, false = fail"
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#disconnect",
    "access": "public",
    "description": "Disconnects from the socket.",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = success, false = fail"
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "write",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#write",
    "access": "public",
    "description": "Writes data to the socket.  This currently only supports ASCII data.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data to write to the socket"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = success, false = fail"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "isConnected",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#isConnected",
    "access": "public",
    "description": "Returns true if connected to the socket, false otherwise.",
    "lineNumber": 195,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = connected, false = disconnected"
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "ipAddress",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#ipAddress",
    "access": "public",
    "description": "Returns the IP address.",
    "lineNumber": 208,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "set",
    "name": "ipAddress",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#ipAddress",
    "access": "public",
    "description": "Sets the IP address.",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "get",
    "name": "port",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#port",
    "access": "public",
    "description": "Returns the port.",
    "lineNumber": 226,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "set",
    "name": "port",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#port",
    "access": "public",
    "description": "Sets the port.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "socketType",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#socketType",
    "access": "public",
    "description": "Returns the socket type.",
    "lineNumber": 244,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "set",
    "name": "socketType",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#socketType",
    "access": "public",
    "description": "Sets the socket type.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "socketId",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#socketId",
    "access": "public",
    "description": "Returns the socket ID.",
    "lineNumber": 262,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "set",
    "name": "timeoutInSec",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#timeoutInSec",
    "access": "public",
    "description": "Sets the connect timeout in seconds.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "get",
    "name": "timeoutInSec",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#timeoutInSec",
    "access": "public",
    "description": "Returns the connect timeout in seconds.",
    "lineNumber": 280,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "_onCommandReceived",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_onCommandReceived",
    "access": "private",
    "description": "Handles socket commands received from the HTML renderer.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event.detail",
        "description": "the detail for the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_onConnected",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_onConnected",
    "access": "private",
    "description": "Handles the CONNECTED event from HJS.",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.ipAddress",
        "description": "the IP address"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.port",
        "description": "the port number"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketType",
        "description": "0 = TCP, 1 = UDP"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketId",
        "description": "the socket identifier"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "_onDisconnected",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_onDisconnected",
    "access": "private",
    "description": "Handles the DISCONNECTED event from HJS.",
    "lineNumber": 347,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.ipAddress",
        "description": "the IP address"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.port",
        "description": "the port number"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketType",
        "description": "0 = TCP, 1 = UDP"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketId",
        "description": "the socket identifier"
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_onData",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_onData",
    "access": "private",
    "description": "Handles the DATA event from HJS.",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.ipAddress",
        "description": "the IP address"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.port",
        "description": "the port number"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketType",
        "description": "0 = TCP, 1 = UDP"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketId",
        "description": "the socket identifier"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/harmonic-socket.js~HarmonicSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-socket.js~HarmonicSocket#_onError",
    "access": "private",
    "description": "Handles the ERROR event from HJS.",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.ipAddress",
        "description": "the IP address"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.port",
        "description": "the port number"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketType",
        "description": "0 = TCP, 1 = UDP"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.socketId",
        "description": "the socket identifier"
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/harmonic-template.js",
    "content": "/**\n * File: harmonic-template.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The Harmonic Template is the main controller of an HTML graphical template.\n * It is responsible for controlling the timeline of the template, handling\n * all incoming and outgoing Oxtel commands, and managing any create widgets.\n *\n * Before calling init() on the class, exportRoot, stage, and stage.canvas\n * must all be valid objects.  These entities provide access to the global\n * timeline (exportRoot) and information about the template (stage and stage.canvas).\n *\n * This class also provides access to all created widgets.  Use the\n * getWidgetByFieldNum() method to get references to widgets.\n *\n * This class dispatches 3 important events:\n * - LOAD_COMPLETE_EVENT - this event is dispatched immediately before sending\n *   Load/Preload Complete signal.  At this point, all widgets have been created\n *   and can be accessed using the getWidgetByFieldNum interface.\n * - VISIBLE_EVENT - this event is dispatched when the template first becomes\n *   visible.  After being loaded, this is the event that starts the template\n *   playing.\n * - FULLY_VISIBLE_EVENT - this event is dispatched when the alpha for the\n *   layer become fully visible.  Although there is nothing significant about this\n *   event internally, it can be useful for certain customers.\n *\n * Some of the public methods in this class can be overridden the template\n * creator if they need to change or extend the functionality.  The methods\n * that can be overridden are:\n *\n * - setVisible\n * - fullyVisible\n * - startTemplateAnimation\n * - stopTemplateAnimation\n * - restartTemplateAnimation\n * - gotoFrame\n * - updateTextField\n * - appendTextField\n * - updateImagePath\n * - renderField\n * - renderAllFields\n * - restartFieldAnimation\n * - stopFieldAnimation\n *\n * An example of this can be found in the news ticker sample template.\n * A snippet is provided below.\n *\n * @example\n * function updateTextFieldOverride(obj) {\n *     hjs.info(\"updateTextFieldOverride:\");\n *     hjs.info(\"obj.tickid:   \" + obj.tickid);\n *     hjs.info(\"obj.fieldNum: \" + obj.fieldNum);\n *     hjs.info(\"obj.text:     \" + obj.text);\n *     hjs.info(\"obj.render:   \" + obj.render);\n *     switch (obj.fieldNum) {\n *         case 1:\n *             break;\n *     }\n *\n *     // This is optional, but recommended.\n *     harmonicTemplate.updateTextField(obj);\n * }\n *\n * // Create the override object and register it with the harmonicTemplate\n * let override = {\n *     updateTextField: updateTextFieldOverride\n * }\n *\n * harmonicTemplate.registerOverride(override);\n */\nclass HarmonicTemplate {\n\n    /**\n     * Constructor\n     */\n    constructor() {\n        hjs.debug(\"HarmonicTemplate.constructor\");\n\n        /**\n         * Current state of the template (preloaded vs. loaded)\n         * @type {Number}\n         */\n        this._state = HarmonicTemplate.STATE_UNKNOWN;\n\n        /**\n         * Flag used to know if the first 'tickend' event was received.  This event\n         * as well as the INIT command must be received before initialization can continue.\n         * @type {Boolean}\n         */\n        this._firstTickEndReceived = false;\n\n        /**\n         * Flag used to know if INIT command was received.  This event as well as the\n         * first 'tickend' must be received before initialization can continue.\n         * @type {Boolean}\n         */\n        this._initCommandReceived = false;\n\n        // On the desktop, we don't need to wait for the INIT command.\n        if (hjs.isOnDesktop()) {\n            this._initCommandReceived = true;\n        }\n\n        /**\n         * The configuration from the HTML renderer.  On the desktop we use\n         * these values to emulate the INIT command being received.\n         * @type {Object}\n         */\n        this._config = {\n            isPreload: false,\n            alpha: HarmonicTemplate.MAX_ALPHA,  // alpha at load time\n            activeDimsW: 1920,\n            activeDimsH: 1080,\n            frameTime:  16.683,\n            isSecChannel: false,\n            priChannelW: 1920,\n            priChannelH: 1080,\n            channel: 0,\n            layer: 0,\n            scaleMode: HarmonicTemplate.SCALE_MODE_NONE,\n            anchor: HarmonicTemplate.ANCHOR_NONE,\n            oxtelTcpPort: 0,\n            oxtelSerialOverTcpPort: 0\n        }\n\n        /**\n         * The width of the loaded template.\n         * @type {Number}\n         */\n        this._templateWidth = 0;\n\n        /**\n         * The height of the loaded template.\n         * @type {Number}\n         */\n        this._templateHeight = 0;\n\n        /**\n         * The template description.  This is XML that contains a description\n         * of the text fields in the template.  The FXTool uses this information\n         * in its dynamic text dialog.\n         * @type {String}\n         */\n        this._templateDescription = \"\";\n\n        /**\n         * A map of all registered widgets.  The key is the fieldNum and the\n         * value is the Widget itself.\n         * @type {Object}\n         */\n        this._widgets = new Map();\n\n        /**\n         * Flag that indicates if setVisible has been called.\n         * @type {Boolean}\n         */\n        this._setVisibleCalled = false;\n\n        /**\n         * Flag that indicates if fullyVisible has been called.\n         * @type {Boolean}\n         */\n        this._fullyVisibleCalled = false;\n\n        /**\n         * Object used to manage the main movie clip's timeline.\n         * @type {Object}\n         */\n        this._timeline = {\n            isPlaying: false,\n            action: HarmonicTemplate.TIMELINE_ACTION_NONE,\n            frame: 0,\n            continueToOutro: false,\n            isThreePointAnimation: false,\n            loopStartFrame: -1,\n            loopEndFrame: -1\n        };\n\n        /**\n         * Object used to communicate the location and size of the content.\n         * @type {Object}\n         */\n        this._contentRect = new createjs.Rectangle(0, 0, 0, 0);\n\n        /**\n         * An anchor widget will set the override and it will get applied\n         * once the template is loaded.\n         */\n        this._anchorOverride = HarmonicTemplate.ANCHOR_INVALID;\n\n        /**\n         * Object that is registered to override functions from this class.\n         * @type {Object}\n         */\n        this._override = undefined;\n\n        /**\n         * Flag that indicates that all widgets have loaded.\n         * @type {Boolean}\n         */\n        this._allWidgetsLoaded = false;\n\n        /**\n         * Count used to keep track of the number of ticks for widgets to load.\n         * @type {Number}\n         */\n        this._waitForAllWidgetsToLoadCount = 0;\n\n        /**\n         * Callback function used to poll the widget load status.  This is\n         * necessary for use in the add/remove listener functions.\n         * @type {Object}\n         */\n        this._waitForAllWidgetsToLoadCallback = this._waitForAllWidgetsToLoad.bind(this);\n\n        this._initializeDocumentEventHandlers();\n    }\n\n    /**\n     * Called from the Adobe-generated JavaScript after export root and the\n     * stage have been created.\n     */\n    init() {\n        hjs.debug(\"HarmonicTemplate.init\");\n\n        if (!exportRoot) {      // exportRoot must exist before proceeding\n            hjs.error(\"HarmonicTemplate.init:  exportRoot is undefined\");\n            return false;\n        }\n\n        if (!stage) {           // stage must exist before proceeding\n            hjs.error(\"HarmonicTemplate.init:  stage is undefined\");\n            return false;\n        }\n\n        if (!stage.canvas) {    // stage.canvas must exist before proceeding\n            hjs.error(\"HarmonicTemplate.init:  stage.canvas is undefined\");\n            return false;\n        }\n\n        // On the desktop, setup the config based on the stage size.\n        if (hjs.isOnDesktop()) {\n            this._config.activeDimsW = stage.canvas.width;\n            this._config.activeDimsH = stage.canvas.height;\n            this._config.priChannelW = stage.canvas.width;\n            this._config.priChannelH = stage.canvas.height;\n        }\n\n        // Save the template width and height\n        this._templateWidth = stage.canvas.width;\n        this._templateHeight = stage.canvas.height;\n\n        this._initializeStageEventHandlers();\n\n        return true;\n    }\n\n    /**\n     * This method allows a client to override many of the public methods\n     * in this class.  The most common use of this is overriding the\n     * updateTextField functionality.\n     *\n     * @param {Object} overrideObj - the override object\n     */\n    registerOverride(overrideObj) {\n        this._override = overrideObj;\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters and Setters\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns the XML description of all text fields.\n     *\n     * @return {String}\n     */\n    get description() {\n        return this._templateDescription;\n    }\n\n    /**\n     * Returns the channel this template is running on.\n     *\n     * @return {Number}\n     */\n    get channel() {\n        return this._config.channel;\n    }\n\n    /**\n     * Returns the layer this template is running on.\n     *\n     * @return {Number}\n     */\n    get layer() {\n        return this._config.layer;\n    }\n\n    /**\n     * Returns the width of the primary video resolution.  For example, if\n     * the player is configured for 720p, then this function will return 1280.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get primaryVideoWidth() {\n        if (this._config.isSecChannel) {\n            return this._config.priChannelW;\n        }\n        else {\n            return this._config.activeDimsW;\n        }\n    }\n\n    /**\n     * Returns the height of the primary video resolution.  For example, if\n     * the player is configured for 720p, then this function will return 720.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get primaryVideoHeight() {\n        if (this._config.isSecChannel) {\n            return this._config.priChannelH;\n        }\n        else {\n            return this._config.activeDimsH;\n        }\n    }\n\n    /**\n     * Returns true when independent branding is enabled and the template is\n     * running in the secondary channel.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get isSecondaryChannel() {\n        return this._config.isSecChannel;\n    }\n\n    /**\n     * Returns the width of the secondary video resolution.  This value will\n     * be valid when isSecondaryChannel() return true.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get secondaryVideoWidth() {\n        if (this._config.isSecChannel) {\n            return this._config.activeDimsW;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the height of the secondary video resolution.  This value will\n     * be valid when isSecondaryChannel() return true.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get secondaryVideoHeight() {\n        if (this._config.isSecChannel) {\n            return this._config.activeDimsH;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the Oxtel TCP port for the channel.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get oxtelTcpPort() {\n        if (this._config.oxtelTcpPort) {\n            return this._config.oxtelTcpPort;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the Oxtel Serial over TCP port for the channel.\n     *\n     * This value is only valid after the INIT message has been received.  Clients\n     * should wait until LOAD_COMPLETE to sample this data.\n     *\n     * @return {Number}\n     */\n    get oxtelSerialOverTcpPort() {\n        if (this._config.oxtelSerialOverTcpPort) {\n            return this._config.oxtelSerialOverTcpPort;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public Methods\n    //--------------------------------------------------------------------------\n\n    //\n    // Template Animation Methods\n    //\n\n    /**\n     * Starts template animation.\n     *\n     * @param {Object} obj\n     * @return {Boolean}\n     */\n    startTemplateAnimation(obj) {\n        hjs.debug(\"HarmonicTemplate.startTemplateAnimation\");\n\n        if (this._timeline.isPlaying) {\n            return true;\n        }\n\n        this._timeline.isPlaying = true;\n        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_PLAY;\n        this._timeline.continueToOutro = false;\n\n        hjs.signalTemplatePlaying(true);\n\n        return true;\n    }\n\n    /**\n     * Stops template animation.\n     *\n     * @param {Object} obj\n     * @param {Boolean} obj.immediate - true = stop immediately, false = stop at the end of the animation.\n     * @return {Boolean}\n     */\n    stopTemplateAnimation(obj) {\n        hjs.debug(\"HarmonicTemplate.stopTemplateAnimation\");\n\n        if (!this._timeline.isPlaying) {\n            return true;\n        }\n\n        // If immediate or the timeline only contains a single frame,\n        // then stop now and signal not playing.\n        if (obj.immediate || (exportRoot.timeline.duration == 1)) {\n\n            this._timeline.isPlaying = false;\n            this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_STOP;\n            hjs.signalTemplatePlaying(false);\n        }\n        else {\n            this._timeline.continueToOutro = true;\n        }\n\n        return true;\n    }\n\n    /**\n     * Restarts template animation.\n     *\n     * @param {Object} obj\n     * @return {Boolean}\n     */\n    restartTemplateAnimation(obj) {\n        hjs.debug(\"HarmonicTemplate.restartTemplateAnimation\");\n\n        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_PLAY;\n        this._timeline.frame = 0;\n        this._timeline.continueToOutro = false;\n\n        if (!this._timeline.isPlaying) {\n            this._timeline.isPlaying = true;\n            hjs.signalTemplatePlaying(true);\n        }\n\n        return true;\n    }\n\n    /**\n     * Goto frame number and play.\n     *\n     * @param {Object} obj\n     * @param {Number} obj.frame - the frame number to goto\n     * @return {Boolean}\n     */\n    gotoFrame(obj) {\n        hjs.debug(\"HarmonicTemplate.gotoFrame\");\n\n        if (this._timeline.isPlaying) {\n            this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_PLAY;\n            this._timeline.frame = obj.frame;\n        }\n        else {\n            this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_STOP;\n            this._timeline.frame = obj.frame;\n        }\n\n        return true;\n    }\n\n    /**\n     * This method is called internally.  It will be used to check for an\n     * override before calling the setVisible() function.\n     *\n     * This function should only perform processing if the template\n     * state is LOADED.\n     */\n    _setVisible() {\n        if (this._state == HarmonicTemplate.STATE_LOADED) {\n\n            let obj = {\n                functionName: HarmonicTemplate.SET_VISIBLE\n            }\n\n            this._checkForOverride(obj);\n        }\n    }\n\n    /**\n     * This function is required for the override mechanism to work.  The\n     * _setVisible call will perform the override check.  If no override\n     * is registered, then this function will be called.\n     *\n     * @param {Object} obj\n     */\n    setVisible(obj) {\n        hjs.debug(\"HarmonicTemplate.setVisible\");\n\n        if (this._timeline.isPlaying) {\n            return true;\n        }\n\n        // Dispatch the VISIBLE_EVENT.\n        document.dispatchEvent(new Event(HarmonicTemplate.VISIBLE_EVENT));\n\n        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_PLAY_FROM_BEGINNING;\n        this._timeline.isPlaying = true;\n        hjs.signalTemplatePlaying(true);\n\n        // If just starting out, start all the field animations.\n        this.renderAllFields();\n\n        return true;\n    }\n\n    /**\n     * This method is called internally.  It will be used to check for an\n     * override before calling the fullyVisible() function.\n     *\n     * This function should only perform processing if the template\n     * state is LOADED.\n     */\n    _fullyVisible() {\n        if (this._state == HarmonicTemplate.STATE_LOADED) {\n            let obj = {\n                functionName: HarmonicTemplate.FULLY_VISIBLE\n            }\n\n            this._checkForOverride(obj);\n        }\n    }\n\n    /**\n     * This function is required for the override mechanism to work.  The\n     * _fullyVisible call will perform the override check.  If no override\n     * is registered, then this function will be called.\n     *\n     * @param {Object} obj\n     */\n    fullyVisible(obj) {\n        hjs.debug(\"HarmonicTemplate.fullyVisible\");\n\n        if (this._timeline.isPlaying) {\n            return true;\n        }\n\n        document.dispatchEvent(new Event(HarmonicTemplate.FULLY_VISIBLE_EVENT));\n\n        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_PLAY;\n        this._timeline.isPlaying = true;\n        hjs.signalTemplatePlaying(true);\n\n        // If just starting out, start all the field animations.\n        this.renderAllFields();\n\n        return true;\n    }\n\n    //--------------------------------------------------------------------------\n    // Widget Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns true if a widget has been registered with the Harmonic Template\n     * via the WIDGET_CREATED_EVENT.\n     *\n     * @param {Number} fieldNum\n     * @return {Boolean} true if widget is registered, false otherwise\n     */\n    isWidgetdRegistered(fieldNum) {\n        let widget = this._widgets.get(fieldNum);\n        return (widget !== undefined);\n    }\n\n    /**\n     * Returns the Harmonic Widget associated with the field number.\n     *\n     * @param {Number} fieldNum\n     * @return {Objet} Harmonic Widget or undefined if not registered\n     */\n    getWidgetByFieldNum(fieldNum) {\n        return this._widgets.get(fieldNum);\n    }\n\n    /**\n     * Oxtel command: Z0 - Update Text Field\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - updateTextField\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @param {String} obj.text - the text to render\n     * @param {Boolean} obj.render - flag indicating whether or not to render the text\n     * @return {Boolean}\n     */\n    updateTextField(obj) {\n        hjs.debug(\"HarmonicTemplate.updateTextField\");\n        return this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Oxtel command: Z0 - Append Text Field\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - appendTextField\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @param {String} obj.text - the text to render\n     * @param {Boolean} obj.render - flag indicating whether or not to render the text\n     * @return {Boolean}\n     */\n    appendTextField(obj) {\n        hjs.debug(\"HarmonicTemplate.appendTextField\");\n        return this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Updates the image path on a field.\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - updateImageField\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @param {String} obj.imagePath - the image path\n     * @return {Boolean}\n     */\n    updateImageField(obj) {\n        hjs.debug(\"HarmonicTemplate.updateImageField\");\n        return this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Oxtel command: Z3 - Render Box\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - renderField\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @return {Boolean}\n     */\n    renderField(obj) {\n        hjs.debug(\"HarmonicTemplate.renderField\");\n        return this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Renders all fields.\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - renderAllFields\n     * @return {Boolean} - always true\n     */\n    renderAllFields(obj) {\n        hjs.debug(\"HarmonicTemplate.renderAllFields\");\n        for (let widget of this._widgets.values()) {\n\n            const fieldNum = widget.fieldNum;\n\n            const obj = {\n                functionName: HarmonicTemplate.RENDER_FIELD,\n                fieldNum: fieldNum\n            }\n\n            this._dispatchWidgetEvent(obj);\n        }\n\n        return true;\n    }\n\n    //\n    // Field Animation commands\n    //\n\n    /**\n     * Stops animation on the specified field.\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - stopFieldAnimation\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @param {Boolean} obj.immediate - flag indicating whether to stop immediately or at the end of the animation.\n     * @return {Boolean}\n     */\n    stopFieldAnimation(obj) {\n        hjs.debug(\"HarmonicTemplate.stopFieldAnimation\");\n        this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Restarts animation on the specified field.\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - restartFieldAnimation\n     * @param {Number} obj.fieldNum - the field number identifier\n     * @param {Boolean} obj.fromBeginning - flag indicating whether to start from the beginning or at the current frame.\n     * @return {Boolean}\n     */\n    restartFieldAnimation(obj) {\n        hjs.debug(\"HarmonicTemplate.restartFieldAnimation\");\n        this._dispatchWidgetEvent(obj);\n    }\n\n    /**\n     * Dispatches the WIDGET_EVENT event on the document.\n     *\n     * @emits {HarmonicTemplate.WIDGET_EVENT_<fieldNum>} to send the command to the widget\n     * @param {Object} obj - details of the event\n     */\n    _dispatchWidgetEvent(obj) {\n        let widget = this._widgets.get(obj.fieldNum);\n        if (widget) {\n            let event = new CustomEvent(HarmonicTemplate.WIDGET_EVENT + \"_\" + obj.fieldNum,\n                {\n                    detail : obj\n                }\n            );\n\n            document.dispatchEvent(event);\n\n            return true;\n        }\n        else {\n            hjs.error(\"HarmonicTemplate.\" + obj.functionName + \" failed: fieldNum \" + obj.fieldNum + \" has not been registered\");\n            return false;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n    /**\n     * This function will check to see if an override object has been registered.\n     * If it has, then it will call the override function.  It is the\n     * responsibility of the override to call the real function in the\n     * HarmonicTemplate instance.  Failure to do so will result in standard\n     * behavior not working.\n     *\n     * @param {Object} obj\n     * @param {String} obj.functionName - the name of the function\n     */\n    _checkForOverride(obj) {\n        // Delete the 'command' property that is part of the received\n        // websocket message.\n        delete obj.command;\n        if (this._override) {\n            if (this._override.hasOwnProperty(obj.functionName)) {\n                return this._override[obj.functionName](obj);\n            }\n            else if (this._override.__proto__.hasOwnProperty(obj.functionName)) {\n                return this._override.__proto__[obj.functionName](obj);\n            }\n        }\n\n        return this[obj.functionName](obj);\n    }\n\n    /**\n     * Creates the XML template description and sends to HTML Renderer.\n     */\n    _initTemplateDescription() {\n        hjs.debug(\"HarmonicTemplate._initTemplateDescription: create template description\");\n\n        this._templateDescription = \"<harmonicTemplate><version>1.0.0</version><components>\";\n        for (let widget of this._widgets.values()) {\n            if (widget.includeInTemplateDescription) {\n                this._templateDescription += '<component fieldType=\\\"text\" id=\\\"' + widget.fieldNum.toString() + '\\\" label=\\\"' + widget.name + '\\\"';\n\n                if ((widget.createjsObj) &&\n                    (widget.createjsObj.harmonicField)) {\n                    this._templateDescription += ' value=\\\"' + widget.createjsObj.harmonicField.text + '\\\"';\n                }\n\n                this._templateDescription += '/>';\n            }\n        }\n        this._templateDescription += \"</components></harmonicTemplate>\";\n\n        hjs.debug(\"Template description: \" + this._templateDescription);\n\n        hjs.setTemplateDescription(this._templateDescription);\n    }\n\n    /**\n     * Detects if the template contains a 3-point animation.\n     * The code loops for a frame label called 'loop_start' and\n     * 'loop_end'.\n     *\n     * NOTE:  All reporting of errors will contain a +1 on the\n     *        label position to match the position in Adobe\n     *        Animate.\n     */\n    _detectThreePointAnimation() {\n        let isLoopStartValid = false;\n        let isLoopEndValid = false;\n        let labels = exportRoot.timeline.getLabels();\n        let length = labels.length;\n        for (let i = 0; i < length; i++) {\n            let label = labels[i];\n            if (label.label == \"loop_start\") {\n                if (this._timeline.loopStartFrame == -1) {\n                    this._timeline.loopStartFrame = label.position;\n                    isLoopStartValid = true;\n                }\n                else {\n                    hjs.error(\"Found duplicate 'loop_start' label on frame: \" + (label.position + 1).toString());\n                    isLoopStartValid = false;\n                }\n            }\n            else if (label.label == \"loop_end\") {\n                if (this._timeline.loopEndFrame == -1) {\n                    this._timeline.loopEndFrame = label.position;\n\t\t\t\t\tisLoopEndValid = true;\n                }\n                else {\n\t\t\t\t\t// Report +1 to match the view in Animate\n                    hjs.error(\"Found duplicate 'loop_end' label on frame: \" + (label.position + 1).toString());\n                    isLoopEndValid = false;\n                }\n            }\n        }\n\n        if (isLoopStartValid && isLoopEndValid) {\n\t\t\tif (this._timeline.loopEndFrame < this._timeline.loopStartFrame) {\n\t\t\t\thjs.error(\"'loop_end' must be after 'loop_start':  loop_start: \" + (this._timeline.loopStartFrame + 1).toString() + \" loop_end: \" + (this._timeline.loopEndFrame + 1).toString());\n\t\t\t\tisLoopEndValid = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\thjs.info(\"3pt animation detected:  loop_start: \" + (this._timeline.loopStartFrame + 1).toString() + \" loop_end: \" + (this._timeline.loopEndFrame + 1).toString());\n\n\t\t\t\t// Don't include the loop_end frame in the loop to allow for a 1 frame loop\n\t\t\t\tthis._timeline.loopEndFrame--;\n\t\t\t\tthis._timeline.isThreePointAnimation = true;\n\t\t\t}\n        }\n    }\n\n    /**\n     * This method checks to see if the loading process is complete.\n     * The loading process is complete when:\n     * - the INIT command is received from the HTML renderer\n     * - the first 'tickend' message is received\n     * - all widgets have reported a loaded status\n     */\n    _checkIfLoadComplete() {\n\n        if ((this._initCommandReceived) &&\n            (this._firstTickEndReceived) &&\n            (this._allWidgetsLoaded)) {\n\n            // Dispatch the LOAD_COMPLETE_EVENT -- this is directed\n            // at the document so that JavaScript clients can know this\n            // point in time.  All widgets should have been registered\n            // by this point.\n            document.dispatchEvent(new Event(HarmonicTemplate.LOAD_COMPLETE_EVENT));\n\n            // If on the desktop, just set the initial alpha to max.  This\n            // will trigger the play.\n            if (hjs.isOnDesktop()) {\n                this._config.alpha = HarmonicTemplate.MAX_ALPHA;\n            }\n\n            // Handle differences between preload and load\n            if (this._config.isPreload) {\n                this._handlePreloadComplete();\n            }\n            else {\n                this._handleLoadComplete(this._config.alpha);\n            }\n        }\n    }\n\n    /**\n     * Preload is now complete.  Update the state and signal\n     * Preload Complete back to the HTML renderer.  Once\n     * this is done, the template waits for Activate before\n     * continuing.  Activate is the transition from PRELOADED\n     * to LOADED.\n     */\n    _handlePreloadComplete() {\n        this._state = HarmonicTemplate.STATE_PRELOADED;\n\n        hjs.debug(\"HarmonicTemplate.signalPreloadComplete\");\n        hjs.signalPreloadComplete(true);\n    }\n\n    /**\n     * Load is now complete.  Perform the following:\n     * - update the state to LOADED\n     * - set IsLive to true on the shared surface\n     * - signal Load Complete to the HTML renderer\n     * - handle the alpha based on the alpha parameter.\n     *\n     * @param {Number} alpha - the alpha at the time of the event\n     */\n    _handleLoadComplete(alpha) {\n        this._state = HarmonicTemplate.STATE_LOADED;\n\n        // If a widget has overridden the anchor, then apply it here.\n        if (this._anchorOverride != HarmonicTemplate.ANCHOR_INVALID) {\n            hjs.info(\"Anchor override detected in \" + hjs.templateName + \" - anchoring to \" + this._getAnchorStr(this._anchorOverride));\n            this._config.anchor = this._anchorOverride;\n        }\n\n        // Set the transform on the stage based on the scale mode and anchor\n        this._setTransform(this._config.scaleMode, this._config.anchor);\n\n        // Output warning if the canvas resolution doesn't match\n        // the configured active resolution.\n        let width = this._config.activeDimsW;\n        let height = this._config.activeDimsH;\n        if (((width != this._templateWidth) || (height != this._templateHeight)) &&\n            (this._config.scaleMode == HarmonicTemplate.SCALE_MODE_NONE) &&\n            (this._config.anchor == HarmonicTemplate.ANCHOR_NONE))\n        {\n            let cmd = \"Loaded\";\n            if (this._config.isPreload) {\n                cmd = \"Preloaded\";\n            }\n\n            hjs.warning(\"HarmonicTemplate: \" + cmd + \" template: \" + hjs.templateName + \" dimensions [\" + this._templateWidth + \"x\" + this._templateHeight + \"] do not match expected dimensions [\" + width + \"x\" + height + \"]\");\n        }\n\n        hjs.debug(\"HarmonicTemplate.setIsLive(true)\");\n        hjs.setIsLive(true);\n\n        hjs.debug(\"HarmonicTemplate.signalLoadComplete\");\n        hjs.signalLoadComplete(true);\n\n        this._handleAlpha(alpha);\n    }\n\n    _printConfig() {\n        hjs.debug(\"config:\");\n        hjs.debug(\"- isPreload:              \" + this._config.isPreload.toString());\n        hjs.debug(\"- alpha:                  \" + this._config.alpha.toString());\n        hjs.debug(\"- activeDimsW:            \" + this._config.activeDimsW.toString());\n        hjs.debug(\"- activeDimsH:            \" + this._config.activeDimsH.toString());\n        hjs.debug(\"- frameTime:              \" + this._config.frameTime.toString());\n        hjs.debug(\"- isSecChannel:           \" + this._config.isSecChannel.toString());\n        hjs.debug(\"- priChannelW:            \" + this._config.priChannelW.toString());\n        hjs.debug(\"- priChannelH:            \" + this._config.priChannelH.toString());\n        hjs.debug(\"- channel:                \" + this._config.channel.toString());\n        hjs.debug(\"- layer:                  \" + this._config.layer.toString());\n        hjs.debug(\"- scaleMode:              \" + this._config.scaleMode.toString() + \" = \" + this._getScaleModeStr(this._config.scaleMode));\n        hjs.debug(\"- anchor:                 \" + this._config.anchor.toString() + \" = \" + this._getAnchorStr(this._config.anchor));\n        if (this._config.oxtelTcpPort) {\n            hjs.debug(\"- oxtelTcpPort:           \" + this._config.oxtelTcpPort.toString());\n        }\n        if (this._config.oxtelSerialOverTcpPort) {\n            hjs.debug(\"- oxtelSerialOverTcpPort: \" + this._config.oxtelSerialOverTcpPort.toString());\n        }\n    }\n\n    /**\n     * This function analyzes the alpha parameter and\n     * calls the _setVisible and _fullyVisible functions\n     * if necessary.\n     *\n     * @param {Number} alpha\n     */\n    _handleAlpha(alpha) {\n        if (alpha > 0) {\n            this._setVisible();\n        }\n\n        if (alpha == HarmonicTemplate.MAX_ALPHA) {\n            this._fullyVisible();\n        }\n    }\n\n    /**\n     * This function is invoked every tick until all widgets have returned\n     * a loaded status.  If the widgets don't load in time, continue to allow\n     * load complete to occur and output a warning.\n     * @param {Object} event\n     */\n    _waitForAllWidgetsToLoad(event) {\n\n        this._waitForAllWidgetsToLoadCount++;\n\n        if (this._waitForAllWidgetsToLoadCount < HarmonicTemplate.MAX_WAIT_FOR_ALL_WIDGETS_TO_LOAD) {\n            for (let widget of this._widgets.values()) {\n                if (!widget.isLoaded()) {\n                    return;\n                }\n            }\n        }\n        else {\n            hjs.warning(\"Widgets did not load in \" + HarmonicTemplate.MAX_WAIT_FOR_ALL_WIDGETS_TO_LOAD.toString() + \" ticks - continuing to loaded state\");\n            for (let widget of this._widgets.values()) {\n                hjs.warning(\"widget: fieldNum: \" + widget.fieldNum + \" name: \" + widget.name + \" loaded: \" + widget.isLoaded());\n            }\n        }\n\n        stage.removeEventListener(\"tick\", this._waitForAllWidgetsToLoadCallback);\n        this._allWidgetsLoaded = true;\n        this._checkIfLoadComplete();\n    }\n\n\n    /**\n     * The stage is not available until the init() call is made.  At that time,\n     * add event handlers for the stage events.\n     *\n     * @listens {'tickend'} - listen for the first tickend to trigger load complete processing\n     * @listens {'tick'} - listen for every tick\n     */\n    _initializeStageEventHandlers() {\n\n        //----------------------------------------------------------------------\n        // stage.tickend handler - handles load complete processing\n        //----------------------------------------------------------------------\n        stage.on(\"tickend\", (event) => {\n\n            // Only perform processing on frame 0\n            if (this._firstTickEndReceived == false) {\n                this._firstTickEndReceived = true;\n\n                // Initialize the template description\n                this._initTemplateDescription();\n\n                // Detect 3-pt animation\n                this._detectThreePointAnimation();\n\n                // Stop all movie clips\n                this._timeline.isPlaying = false;\n                this._stopAll();\n\n                hjs.debug(\"HarmonicTemplate: stage.tickend: currentFrame: \" + exportRoot.currentFrame);\n                this._checkIfLoadComplete();\n            }\n        },\n        this,\n        true);\n\n        //----------------------------------------------------------------------\n        // tick handler - waits for widgets to load\n        //----------------------------------------------------------------------\n        stage.addEventListener(\"tick\", this._waitForAllWidgetsToLoadCallback);\n\n        //----------------------------------------------------------------------\n        // tick handler - handles timeline and 3 point animation\n        //----------------------------------------------------------------------\n        stage.addEventListener(\"tick\", (event) => {\n            this._processTimelineActions();\n\n            if (!this._timeline.isPlaying) {\n                return;\n            }\n\n            // If this template contains a 3 point animation.\n            if (this._timeline.isThreePointAnimation) {\n                const currentFrame = exportRoot.currentFrame;\n                const totalFrames = exportRoot.totalFrames;\n\n                // If we reached the end frame and we need to loop then goto\n                // the start frame.\n                if (currentFrame == this._timeline.loopEndFrame) {\n                    if (!this._timeline.continueToOutro) {\n                        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_PLAY;\n                        this._timeline.frame = this._timeline.loopStartFrame;\n                    }\n                }\n\n                // If we reached the last frame and we got here from continueToOutro,\n                // then stop playing.\n                if (currentFrame == (totalFrames - 1) && this._timeline.continueToOutro) {\n                    this._timeline.isPlaying = false;\n                    this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_STOP;\n                    hjs.signalTemplatePlaying(false);\n                }\n            }\n        });\n    }\n\n    /**\n     * Initializes event handlers associated with the document.\n     *\n     * @listens {HJS.COMMAND_RECEIVED_EVENT} - sent when a websocket command is received in HJS\n     * @listens {HarmonicTemplate.WIDGET_CREATED_EVENT} - sent when a widget is created\n     */\n    _initializeDocumentEventHandlers() {\n\n        //----------------------------------------------------------------------\n        // Commands from the HTML renderer\n        //----------------------------------------------------------------------\n        document.addEventListener(HJS.COMMAND_RECEIVED_EVENT, (event) => {\n            switch (event.detail.command) {\n                case HJS.INIT_COMMAND:\n                    this._config = event.detail;\n                    this._initCommandReceived = true;\n                    this._printConfig();\n                    this._checkIfLoadComplete();\n                    break;\n                case HJS.START_TEMPLATE_ANIMATION_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.START_TEMPLATE_ANIMATION;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.STOP_TEMPLATE_ANIMATION_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.STOP_TEMPLATE_ANIMATION;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.RESTART_TEMPLATE_ANIMATION_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.RESTART_TEMPLATE_ANIMATION;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.GOTO_FRAME_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.GOTO_FRAME;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.UPDATE_TEXT_FIELD_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.UPDATE_TEXT_FIELD;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.APPEND_TEXT_FIELD_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.APPEND_TEXT_FIELD;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.UPDATE_IMAGE_FIELD_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.UPDATE_IMAGE_FIELD;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.RENDER_FIELD_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.RENDER_FIELD;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.RENDER_ALL_FIELDS_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.RENDER_ALL_FIELDS;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.STOP_FIELD_ANIMATION_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.STOP_FIELD_ANIMATION;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.RESTART_FIELD_ANIMATION_COMMAND:\n                    event.detail.functionName = HarmonicTemplate.RESTART_FIELD_ANIMATION;\n                    this._checkForOverride(event.detail);\n                    break;\n                case HJS.ALPHA_NOT_ZERO_COMMAND:\n                    this._alphaNotZero();\n                    break;\n                case HJS.ALPHA_AT_MAX_COMMAND:\n                    this._alphaAtMax();\n                    break;\n                case HJS.ACTIVATE_COMMAND:\n                    this._activate(event.detail);\n                    break;\n                case HJS.SOCKET_CONNECTED_COMMAND:\n                case HJS.SOCKET_DISCONNECTED_COMMAND:\n                case HJS.SOCKET_DATA_COMMAND:\n                case HJS.SOCKET_ERROR_COMMAND:\n                    // Handled by the Harmonic Socket class\n                    break;\n                case HJS.PING_COMMAND:\n                    // Just send pong - used for determining websocket performance\n                    hjs.pong();\n                    break;\n                default:\n                    hjs.error(\"HarmonicTemplate: invalid command received: \" + event.detail.command);\n                    break;\n            }\n        });\n\n        //----------------------------------------------------------------------\n        // Handler for the WIDGET_CREATED_EVENT\n        //----------------------------------------------------------------------\n        document.addEventListener(HarmonicTemplate.WIDGET_CREATED_EVENT, (event) => {\n            if (!this._widgets.has(event.detail.fieldNum)) {\n                hjs.debug(\"HarmonicTemplate: event: \" + HarmonicTemplate.WIDGET_CREATED_EVENT + \" fieldNum: \" + event.detail.fieldNum + \" name: \" + event.detail.name);\n                this._widgets.set(event.detail.fieldNum, event.detail);\n            }\n            else {\n                hjs.error(\"HarmonicTemplate: TextField \" + event.detail.fieldNum + \" already exists - duplicate detected\");\n            }\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    // Timeline Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Processes timeline actions on the tick.\n     */\n    _processTimelineActions() {\n        switch (this._timeline.action) {\n            case HarmonicTemplate.TIMELINE_ACTION_NONE:\n                return;\n            case HarmonicTemplate.TIMELINE_ACTION_PLAY:\n                this._playAll(false);\n                break;\n            case HarmonicTemplate.TIMELINE_ACTION_PLAY_FROM_BEGINNING:\n                this._playAll(true);\n                break;\n            case HarmonicTemplate.TIMELINE_ACTION_STOP:\n                this._stopAll();\n                break;\n            case HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_PLAY:\n                this._gotoAndPlayAll(this._timeline.frame);\n                break;\n            case HarmonicTemplate.TIMELINE_ACTION_GOTO_AND_STOP:\n                this._gotoAndStopAll(this._timeline.frame);\n                break;\n        }\n\n        this._timeline.action = HarmonicTemplate.TIMELINE_ACTION_NONE;\n    }\n\n    /**\n     * Calls play() on all movie clips on the display list.\n     *\n     * @param {Boolean} fromBeginning - play from beginning or from the current frame\n     */\n    _playAll(fromBeginning) {\n        let movieClips = this._findAllMovieClips();\n        let length = movieClips.length;\n\n        for (let i = 0; i < length; i++) {\n            movieClips[i].play();\n        }\n\n        exportRoot.play();\n\n        // Restart all field animations\n        this._restartAllFieldAnimations(fromBeginning);\n    }\n\n    /**\n     * Dispatches the WIDGET_EVENT to all registered widgets.  The\n     * function is RESTART_FIELD_ANIMATION.\n     *\n     * @param {Boolean} fromBeginning - true = start animation from beginning, false = play from current frame\n     */\n    _restartAllFieldAnimations(fromBeginning) {\n        hjs.debug(\"HarmonicTemplate._restartAllFieldAnimations\");\n\n        for (let widget of this._widgets.values()) {\n\n            const fieldNum = widget.fieldNum;\n\n            const obj = {\n                functionName: HarmonicTemplate.RESTART_FIELD_ANIMATION,\n                fieldNum: fieldNum,\n                fromBeginning: fromBeginning\n            };\n\n            this._dispatchWidgetEvent(obj);\n        }\n\n        return true;\n    }\n\n    /**\n     * Dispatches the WIDGET_EVENT to all registered widgets.  The\n     * function is STOP_FIELD_ANIMATION.\n     *\n     * @param {Boolean} immediate - true = stop immediately, false = stop at the end of the animation.\n     */\n    _stopAllFieldAnimations(immediate) {\n        hjs.debug(\"HarmonicTemplate._stopAllFieldAnimations\");\n\n        for (let widget of this._widgets.values()) {\n\n            const fieldNum = widget.fieldNum;\n\n            const obj = {\n                functionName: HarmonicTemplate.STOP_FIELD_ANIMATION,\n                fieldNum: fieldNum,\n                immediate: immediate\n            };\n\n            this._dispatchWidgetEvent(obj);\n        }\n\n        return true;\n    }\n\n    /**\n     * Calls stop() on all movie clips on the display list.\n     */\n    _stopAll() {\n        let movieClips = this._findAllMovieClips();\n        let length = movieClips.length;\n\n        for (let i = 0; i < length; i++) {\n            movieClips[i].stop();\n        }\n\n        exportRoot.stop();\n\n        // Stop all field animations\n        this._stopAllFieldAnimations(true);\n    }\n\n    /**\n     * Calls gotoAndPlay() on all movie clips on the display list.\n     *\n     * @param {Number} frame - the frame to go to.\n     */\n    _gotoAndPlayAll(frame) {\n        let movieClips = this._findAllMovieClips();\n        let length = movieClips.length;\n\n        for (let i = 0; i < length; i++) {\n            movieClips[i].gotoAndPlay(frame);\n        }\n\n        exportRoot.gotoAndPlay(frame);\n    }\n\n    /**\n     * Calls gotoAndStop() on all movie clips on the display list.true\n     *\n     * @param {Number} frame - the frame to go to.\n     */\n    _gotoAndStopAll(frame) {\n        let movieClips = this._findAllMovieClips();\n        let length = movieClips.length;\n\n        for (let i = 0; i < length; i++) {\n            movieClips[i].gotoAndStop(frame);\n        }\n\n        exportRoot.gotoAndStop(frame);\n    }\n\n    /**\n     * Finds all movie clips on the display list.\n     *\n     * @return {createjs.MovieClip[]} array of movie clips\n     */\n    _findAllMovieClips() {\n        let movieClips = new Array();\n        this._locateMovieClips(exportRoot, movieClips);\n        return movieClips;\n    }\n\n    /**\n     * Recursive function used to locate all movie clips on the display list.\n     *\n     * @param {Object} root\n     * @param {createjs.MovieClip[]} movieClips\n     */\n    _locateMovieClips(root, movieClips) {\n        let i;\n        let length = root.length;\n        for (i = 0; i < root.numChildren; i++) {\n            let child = root.children[i];\n            if (child instanceof createjs.MovieClip) {\n                movieClips.push(child);\n                this._locateMovieClips(child, movieClips);\n            }\n            else if (child instanceof createjs.Container) {\n                this._locateMovieClips(child, movieClips);\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Alpha Management\n    //--------------------------------------------------------------------------\n    /**\n     * Handles the case when alpha is no longer zero.\n     */\n    _alphaNotZero() {\n        hjs.debug(\"HarmonicTemplate._alphaNotZero\");\n        if (!this._setVisibleCalled) {\n            this._setVisibleCalled = true;\n            this._setVisible();     // call the internal method\n        }\n    }\n\n    /**\n     * Handles the case when alpha reaches its maximum.\n     */\n    _alphaAtMax() {\n        hjs.debug(\"HarmonicTemplate._alphaAtMax\");\n        if (!this._fullyVisibleCalled) {\n            this._fullyVisibleCalled = true;\n            this._fullyVisible();   // call the internal method\n        }\n    }\n\n    /**\n     * Handles activation from Preload to Load.\n     *\n     * @param {Object} obj\n     * @param {Number} obj.alpha - alpha at time of activate\n     */\n    _activate(obj) {\n\n        // From the Fade Manager in the Bootswf:\n        //\n        // addEventListener (ENTER FRAME) --- start animation a few frames later\n\n        this._handleLoadComplete(obj.alpha);\n    }\n\n    /**\n     * This function will downscale the primary graphic template when in\n     * independent branding mode and the secondary template is not present.\n     * @param {Number} scaleMode - the scale mode to apply\n     * @param {Number} anchor - the anchor to apply\n     */\n    _setTransform(scaleMode, anchor) {\n\n        let ssActiveWidth = this._config.activeDimsW;\n        let ssActiveHeight = this._config.activeDimsH;\n\n        this._contentRect.x = 0;\n        this._contentRect.y = 0;\n        this._contentRect.width = this._templateWidth;\n        this._contentRect.height = this._templateHeight;\n\n        // If the template dimensions match the stage dimension then there is nothing to do\n        // other than set the content rect.\n        if ((ssActiveWidth == this._templateWidth) && (ssActiveHeight == this._templateHeight))\n        {\n            // Set the content rect and return\n            hjs.setContentRect(this._contentRect.x,  this._contentRect.y,  this._contentRect.width,  this._contentRect.height);\n            return;\n        }\n\n        //\n        // Useful constants\n        //\n        // NOTE:  The calculation for stage height as extra logic to round to\n        //        the nearest even number.\n        //\n        const ssActiveWidth16x9  = ssActiveHeight * 16 / 9;\n        const ssActiveHeight16x9 = ((ssActiveWidth  * 9 / 16) + 1) & ~0x1;\n\n        const ssActiveWidth14x9  = ((ssActiveWidth * 16 / 14) + 1) & ~0x1;\n        const ssActiveHeight14x9 = ((ssActiveWidth  * 9 / 14) + 1) & ~0x1;\n\n        //\n        // Determine if the stage is 4x3\n        //\n        let isStage4x3 = false;\n        if ((ssActiveWidth * 3 / 4) == ssActiveHeight)\n        {\n            isStage4x3 = true;\n        }\n\n        //\n        // If the scale mode is not NONE and the stage and template are\n        // both 16x9, then force anamorphic to scale correctly.  Position\n        // at 0,0.\n        //\n        if (scaleMode != HarmonicTemplate.SCALE_MODE_NONE)\n        {\n            if ((ssActiveWidth * 9 / 16) == ssActiveHeight)\n            {\n                hjs.info(\"Both stage and template are 16:9 - using anamorphic scale mode\");\n                scaleMode = HarmonicTemplate.SCALE_MODE_ANAMORPHIC;\n            }\n        }\n\n        //\n        // Get the primary channel resolution from the shared surface\n        //\n        let primaryWidth  = this._config.priChannelW;\n        let primaryHeight = this._config.priChannelH;\n\n        //\n        // Common variables\n        //\n        let scaled_active_rect_x = 0;\n        let scaled_active_rect_y = 0;\n        let scaled_active_rect_width = 0;\n        let scaled_active_rect_height = 0;\n\n        let scaled_template_width  = this._templateWidth;\n        let scaled_template_height = this._templateHeight;\n\n        let x = 0;\n        let y = 0;\n\n        let scaleX = 0;\n        let scaleY = 0;\n\n        switch (scaleMode)\n        {\n            case HarmonicTemplate.SCALE_MODE_NONE:\n                scaled_active_rect_x      = 0;\n                scaled_active_rect_y      = 0;\n                scaled_active_rect_width  = ssActiveWidth;\n                scaled_active_rect_height = ssActiveHeight;\n\n                scaled_template_width  = this._templateWidth;\n                scaled_template_height = this._templateHeight;\n                break;\n\n            case HarmonicTemplate.SCALE_MODE_ANAMORPHIC:\n                scaled_active_rect_x      = 0;\n                scaled_active_rect_y      = 0;\n                scaled_active_rect_width  = ssActiveWidth;\n                scaled_active_rect_height = ssActiveHeight;\n\n                scaled_template_width  = (this._templateWidth  * scaled_active_rect_width)  / primaryWidth;\n                scaled_template_height = (this._templateHeight * scaled_active_rect_height) / primaryHeight;\n                break;\n\n            case HarmonicTemplate.SCALE_MODE_CROP:\n                scaled_active_rect_x      = (ssActiveWidth  - ssActiveWidth14x9)  / 2;\n                scaled_active_rect_y      = (ssActiveHeight - ssActiveHeight14x9) / 2;\n                scaled_active_rect_width  = ssActiveWidth14x9;\n                scaled_active_rect_height = ssActiveHeight14x9;\n\n                scaled_template_width  = (this._templateWidth  * scaled_active_rect_width)  / primaryWidth;\n                scaled_template_height = (this._templateHeight * scaled_active_rect_height) / primaryHeight;\n\n                // ALERT - PAL Adjustment\n                if ((ssActiveWidth == 768) && (ssActiveHeight == 576))\n                {\n                    scaled_active_rect_y -= 1;\n                }\n                break;\n\n            case HarmonicTemplate.SCALE_MODE_FULL:\n                scaled_active_rect_x      = (ssActiveWidth - ssActiveWidth16x9) / 2;\n                scaled_active_rect_y      = 0;\n                scaled_active_rect_width  = ssActiveWidth16x9;\n                scaled_active_rect_height = ssActiveHeight;\n\n                scaled_template_width  = (this._templateWidth  * scaled_active_rect_width)  / primaryWidth;\n                scaled_template_height = (this._templateHeight * scaled_active_rect_height) / primaryHeight;\n                break;\n\n            case HarmonicTemplate.SCALE_MODE_LETTERBOX:\n                scaled_active_rect_x      = 0;\n                scaled_active_rect_y      = (ssActiveHeight - ssActiveHeight16x9) / 2;\n                scaled_active_rect_width  = ssActiveWidth;\n                scaled_active_rect_height = ssActiveHeight16x9;\n\n                scaled_template_width  = (this._templateWidth  * scaled_active_rect_width)  / primaryWidth;\n                scaled_template_height = (this._templateHeight * scaled_active_rect_height) / primaryHeight;\n\n                // ALERT - PAL Adjustment\n                if ((ssActiveWidth == 768) && (ssActiveHeight == 576))\n                {\n                    scaled_active_rect_y -= 2;\n                }\n                break;\n\n            default:\n                hjs.error(\"Error: invalid scale mode: \" + scaleMode);\n                break;\n        }\n\n        if (scaleMode == HarmonicTemplate.SCALE_MODE_NONE)\n        {\n            scaleX = 1;\n            scaleY = 1;\n        }\n        else\n        {\n            if (anchor == HarmonicTemplate.ANCHOR_NONE)\n            {\n                scaled_template_width = scaled_active_rect_width;\n                scaled_template_height = scaled_active_rect_height;\n\n                scaleX = scaled_active_rect_width / this._templateWidth;\n                scaleY = scaled_active_rect_height / this._templateHeight;\n            }\n            else\n            {\n                scaleX = scaled_template_width  / this._templateWidth;\n                scaleY = scaled_template_height / this._templateHeight;\n            }\n        }\n\n        switch (anchor)\n        {\n            case HarmonicTemplate.ANCHOR_NONE:\n            case HarmonicTemplate.ANCHOR_TOP_LEFT:\n            case HarmonicTemplate.ANCHOR_MIDDLE_LEFT:\n            case HarmonicTemplate.ANCHOR_BOTTOM_LEFT:\n                x = scaled_active_rect_x;\n                break;\n            case HarmonicTemplate.ANCHOR_MIDDLE:\n            case HarmonicTemplate.ANCHOR_TOP_MIDDLE:\n            case HarmonicTemplate.ANCHOR_BOTTOM_MIDDLE:\n                x = ((scaled_active_rect_width - scaled_template_width) / 2) + scaled_active_rect_x;\n                break;\n            case HarmonicTemplate.ANCHOR_TOP_RIGHT:\n            case HarmonicTemplate.ANCHOR_MIDDLE_RIGHT:\n            case HarmonicTemplate.ANCHOR_BOTTOM_RIGHT:\n                x = (scaled_active_rect_width - scaled_template_width) + scaled_active_rect_x;\n                break;\n            default:\n                x = scaled_active_rect_x;\n                hjs.error(\"Error: invalid anchor: \" + anchor);\n                break;\n        }\n\n        switch (anchor)\n        {\n            case HarmonicTemplate.ANCHOR_NONE:\n            case HarmonicTemplate.ANCHOR_TOP_LEFT:\n            case HarmonicTemplate.ANCHOR_TOP_MIDDLE:\n            case HarmonicTemplate.ANCHOR_TOP_RIGHT:\n                y = scaled_active_rect_y;\n                break;\n            case HarmonicTemplate.ANCHOR_MIDDLE_LEFT:\n            case HarmonicTemplate.ANCHOR_MIDDLE:\n            case HarmonicTemplate.ANCHOR_MIDDLE_RIGHT:\n                y = ((scaled_active_rect_height - scaled_template_height) / 2) + scaled_active_rect_y;\n                break;\n            case HarmonicTemplate.ANCHOR_BOTTOM_LEFT:\n            case HarmonicTemplate.ANCHOR_BOTTOM_MIDDLE:\n            case HarmonicTemplate.ANCHOR_BOTTOM_RIGHT:\n                y = (scaled_active_rect_height - scaled_template_height) + scaled_active_rect_y;\n                break;\n            default:\n                y = scaled_active_rect_y;\n                hjs.error(\"Error: invalid anchor: \" + anchor);\n                break;\n        }\n\n        x = Math.floor(x);\n        y = Math.floor(y);\n\n        // Set the content rect using the information found above.\n        this._contentRect.x = x;\n        this._contentRect.y = y;\n        this._contentRect.width = Math.ceil(scaled_template_width);\n        this._contentRect.height = Math.ceil(scaled_template_height);\n\n        // Create a rectangle that represents the shared surface active area.\n        let ssRect = new createjs.Rectangle(0, 0, this._config.activeDimsW, this._config.activeDimsH);\n\n        // Useful for debugging scaling/anchoring\n        hjs.debug(\"scaleMode: \" + this._getScaleModeStr(scaleMode) + \" (\" + scaleMode + \")\" + \" anchor: \" + this._getAnchorStr(anchor) + \" (\" + anchor + \")\" +\n                 \" ssActive: \" + ssActiveWidth + \"x\" + ssActiveHeight +\n                 \" template: \" + this._templateWidth + \"x\" + this._templateHeight +\n                 \" x: \" + x + \" y: \" + y + \" scaleX: \" + scaleX.toFixed(3) + \" scaleY: \" + scaleY.toFixed(3) +\n                 \" contentRect: \" + this._contentRect.width + \"x\" + this._contentRect.height + \" @ \" + this._contentRect.x + \",\" + this._contentRect.y +\n                 \" scaled_template_width: \" + scaled_template_width + \" scaled_template_height: \" + scaled_template_height +\n                 \" scaled_active_rect: \" + scaled_active_rect_width + \"x\" + scaled_active_rect_height + \" @ \" + scaled_active_rect_x + \",\" + scaled_active_rect_y);\n\n        // Configure the stage based on where the\n        stage.canvas.style.position = \"fixed\";\n        stage.canvas.style.width = scaled_template_width.toString() + \"px\";\n        stage.canvas.width = scaled_template_width;\n        stage.canvas.style.height = scaled_template_height.toString() + \"px\";\n        stage.canvas.height = scaled_template_height;\n        stage.canvas.style.left = x.toString() + \"px\";\n        stage.canvas.style.top = y.toString() + \"px\";\n        stage.scaleX = scaleX;\n        stage.scaleY = scaleY;\n\n        hjs.debug(\"stage:  scaleX: \" + scaleX.toFixed(3) + \" scaleY: \" + scaleY.toFixed(3) +\n                 \" stage.canvas: \" + stage.canvas.width + \"x\" + stage.canvas.height + \" css: \" + stage.canvas.style.cssText);\n\n        // Configure the animation container based on the content rect\n        let animation_container = document.getElementById(\"animation_container\");\n        if (animation_container) {\n            animation_container.style.position = \"fixed\";\n            animation_container.style.width = this._contentRect.width.toString() + \"px\";\n            animation_container.style.height = this._contentRect.height.toString() + \"px\";\n            animation_container.style.left = this._contentRect.x.toString() + \"px\";\n            animation_container.style.top = this._contentRect.y.toString() + \"px\";\n\n            hjs.debug(\"animation_container: css: \" + animation_container.style.cssText);\n        }\n        else {\n            hjs.error(\"unable to get the animation_container\");\n        }\n\n        // Create a rectangle representing the shared surface active area\n        let ssActiveRect = new createjs.Rectangle();\n        ssActiveRect.x = 0;\n        ssActiveRect.y = 0;\n        ssActiveRect.width = ssActiveWidth;\n        ssActiveRect.height = ssActiveHeight;\n\n        // Create the mask relative to the stage\n        let mask = new createjs.Rectangle();\n        mask.x = x;\n        mask.y = y;\n        mask.width = stage.canvas.width;\n        mask.height = stage.canvas.height;\n        mask = mask.intersection(ssActiveRect);\n\n        if (mask) {\n            // Position the mask relative to the stage.\n            (x < 0) ? mask.x = Math.abs(x) : mask.x = 0;\n            (y < 0) ? mask.y = Math.abs(y) : mask.y = 0;\n\n            hjs.debug(\"mask: \" + mask.width + \"x\" + mask.height + \" @ \" + mask.x + \",\" + mask.y);\n\n            var graphics = new createjs.Graphics().beginFill(\"#000000\").drawRect(mask.x, mask.y, mask.width, mask.height);\n            stage.mask = new createjs.Shape(graphics);\n        }\n\n        // Adjust the content rect so that it lies in the shared surface active rect.\n        let ssContentRect = this._contentRect.intersection(ssActiveRect);\n        if (!ssContentRect) {\n            ssContentRect = new createjs.Rectangle();\n        }\n\n        this._contentRect = ssContentRect;\n\n        hjs.debug(\"ssContentRect: \" + this._contentRect.width + \"x\" + this._contentRect.height + \" @ \" + this._contentRect.x + \",\" + this._contentRect.y);\n        hjs.setContentRect(this._contentRect.x,  this._contentRect.y,  this._contentRect.width,  this._contentRect.height);\n    }\n\n    /**\n     * Gets the anchor.\n     * @return {Number}\n     */\n    get anchor() {\n        return this._config.anchor;\n    }\n\n    /**\n     * Sets the anchor.\n     * @param {Number} anchor\n     */\n    set anchor(val) {\n        if ((val >= 0) && (val < HarmonicTemplate.ANCHOR_MAX)) {\n            this._config.anchor = val;\n            this._setTransform(this._config.scaleMode, this._config.anchor);\n        }\n        else {\n            hjs.error(\"Anchor out of range: \" + val.toString() + \" valid range: 0 - \" + (HarmonicTemplate.ANCHOR_MAX - 1).toString());\n        }\n    }\n\n    /**\n     * Sets the anchor override.  The achor override will be applied just\n     * before the LOAD_COMPLETE_EVENT is dispatched.\n     * @param {Number} anchor override.\n     */\n    set anchorOverride(val) {\n        if ((val >= 0) && (val < HarmonicTemplate.ANCHOR_MAX)) {\n            this._anchorOverride = val;\n        }\n        else {\n            hjs.error(\"Anchor override out of range: \" + val.toString() + \" valid range: 0 - \" + (HarmonicTemplate.ANCHOR_MAX - 1).toString());\n        }\n    }\n\n    /**\n     * Gets the anchor override.\n     * @param {Number} anchor override\n     */\n    get anchorOverride() {\n        return this._anchorOverride;\n    }\n\n    /**\n     * Gets the scale mode.\n     * @return {Number} scale mode\n     */\n    get scaleMode() {\n        return this._config.scaleMode;\n    }\n\n    /**\n     * Sets the scale mode.\n     * @param {Number} scale mode\n     */\n    set scaleMode(val) {\n        if ((val >=0) && (val < HarmonicTemplate.SCALE_MODE_MAX)) {\n            this._config.scaleMode = val;\n            this._setTransform(this._config.scaleMode, this._config.anchor);\n        }\n        else {\n            hjs.error(\"Scale mode out of range: \" + val.toString() + \" valid range: 0 - \" + (HarmonicTemplate.SCALE_MODE_MAX - 1).toString());\n        }\n    }\n\n    /**\n     * Returns the text representation of the anchor value.\n     * @param {Number} anchor - the anchor value to lookup\n     * @return {String} - the text representation of the anchor value\n     */\n    _getAnchorStr(anchor)\n    {\n        switch (anchor)\n        {\n            case HarmonicTemplate.ANCHOR_NONE:          return \"None\";\n            case HarmonicTemplate.ANCHOR_TOP_LEFT:      return \"TopLeft\";\n            case HarmonicTemplate.ANCHOR_TOP_MIDDLE:    return \"TopMiddle\";\n            case HarmonicTemplate.ANCHOR_TOP_RIGHT:     return \"TopRight\";\n            case HarmonicTemplate.ANCHOR_MIDDLE_LEFT:   return \"MiddleLeft\";\n            case HarmonicTemplate.ANCHOR_MIDDLE:        return \"Middle\";\n            case HarmonicTemplate.ANCHOR_MIDDLE_RIGHT:  return \"MiddleRight\";\n            case HarmonicTemplate.ANCHOR_BOTTOM_LEFT:   return \"BottomLeft\";\n            case HarmonicTemplate.ANCHOR_BOTTOM_MIDDLE: return \"BottomMiddle\";\n            case HarmonicTemplate.ANCHOR_BOTTOM_RIGHT:  return \"BottomRight\";\n            default:                                    return \"Unknown\";\n        }\n    }\n\n    /**\n     * Returns the text representation of the scale mode value.\n     * @param {Number} scaleMode - the scale mode value to lookup\n     * @return {String} - the text representation of the scale mode value\n     */\n    _getScaleModeStr(scaleMode)\n    {\n        switch (scaleMode)\n        {\n            case HarmonicTemplate.SCALE_MODE_NONE:        return \"None\";\n            case HarmonicTemplate.SCALE_MODE_ANAMORPHIC:  return \"Anamorphic\";\n            case HarmonicTemplate.SCALE_MODE_CROP:        return \"Crop\";\n            case HarmonicTemplate.SCALE_MODE_FULL:        return \"Full\";\n            case HarmonicTemplate.SCALE_MODE_LETTERBOX:   return \"Letter\";\n            default:                                      return \"Unknown\";\n        }\n    }\n\n    /**\n     * Enables primary to secondary downscale mode for testing on the\n     * desktop.\n     * @param {Number} priChannelW - primary channel width\n     * @param {Number} priChannelH - primary channel height\n     * @param {Number} secChannelW - secondary channel width\n     * @param {Number} secChannelH - secondary channel height\n     */\n    enableP2S(priChannelW, priChannelH, secChannelW, secChannelH) {\n        if (hjs.isOnDesktop()) {\n            this._config.isSecChannel = true;\n            this._config.priChannelW = priChannelW;\n            this._config.priChannelH = priChannelH;\n            this._config.activeDimsW = secChannelW;\n            this._config.activeDimsH = secChannelH;\n\n            this._setTransform(this._config.scaleMode, this._config.anchor);\n        }\n        else {\n            hjs.error(\"enableP2S is only available in the desktop environment\");\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\nHarmonicTemplate.LOAD_COMPLETE_EVENT = \"LoadCompleteEvent\";   // all widgets should be registered at this time\nHarmonicTemplate.VISIBLE_EVENT = \"VisibleEvent\";\nHarmonicTemplate.FULLY_VISIBLE_EVENT = \"FullyVisible\";\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n// State\nHarmonicTemplate.STATE_UNKNOWN = 0;\nHarmonicTemplate.STATE_PRELOADED = 1;\nHarmonicTemplate.STATE_LOADED = 2;\n\nHarmonicTemplate.MAX_WAIT_FOR_ALL_WIDGETS_TO_LOAD = 600;\nHarmonicTemplate.MAX_ALPHA = 65536;\n\n// Scale Mode\nHarmonicTemplate.SCALE_MODE_NONE       = 0;\nHarmonicTemplate.SCALE_MODE_ANAMORPHIC = 1;\nHarmonicTemplate.SCALE_MODE_CROP       = 2;\nHarmonicTemplate.SCALE_MODE_FULL       = 3;\nHarmonicTemplate.SCALE_MODE_LETTERBOX  = 4;\nHarmonicTemplate.SCALE_MODE_MAX        = 5;\n\nHarmonicTemplate.ANCHOR_INVALID       = -1;\nHarmonicTemplate.ANCHOR_NONE          = 0;\nHarmonicTemplate.ANCHOR_TOP_LEFT      = 1;\nHarmonicTemplate.ANCHOR_TOP_MIDDLE    = 2;\nHarmonicTemplate.ANCHOR_TOP_RIGHT     = 3;\nHarmonicTemplate.ANCHOR_MIDDLE_LEFT   = 4;\nHarmonicTemplate.ANCHOR_MIDDLE        = 5;\nHarmonicTemplate.ANCHOR_MIDDLE_RIGHT  = 6;\nHarmonicTemplate.ANCHOR_BOTTOM_LEFT   = 7;\nHarmonicTemplate.ANCHOR_BOTTOM_MIDDLE = 8;\nHarmonicTemplate.ANCHOR_BOTTOM_RIGHT  = 9;\nHarmonicTemplate.ANCHOR_MAX           = 10;\n\n//------------------------------------------------------------------------------\n// Timeline Constants\n//------------------------------------------------------------------------------\nHarmonicTemplate.TIMELINE_ACTION_NONE = 0;\nHarmonicTemplate.TIMELINE_ACTION_PLAY = 1;\nHarmonicTemplate.TIMELINE_ACTION_PLAY_FROM_BEGINNING = 2;\nHarmonicTemplate.TIMELINE_ACTION_STOP = 3;\nHarmonicTemplate.TIMELINE_ACTION_GOTO_AND_PLAY = 4;\nHarmonicTemplate.TIMELINE_ACTION_GOTO_AND_STOP = 5;\n\n//------------------------------------------------------------------------------\n// Widget Constants\n//------------------------------------------------------------------------------\n// Events\nHarmonicTemplate.WIDGET_CREATED_EVENT = \"WidgetCreatedEvent\";\nHarmonicTemplate.WIDGET_EVENT = \"WidgetEvent\";\n\n// Types\nHarmonicTemplate.WIDGET_TYPE_TEXT = \"text\";\nHarmonicTemplate.WIDGET_TYPE_MOVIE_CLIP = \"movie clip\";\nHarmonicTemplate.WIDGET_TYPE_COUNTDOWN = \"countdown\";\nHarmonicTemplate.WIDGET_TYPE_VIDEO = \"video\";\n\n//------------------------------------------------------------------------------\n// Functions that can be overridden.  Also, these constants are used in the\n// WIDGET_EVENT to inform the widget of the specific function to take.\n//------------------------------------------------------------------------------\nHarmonicTemplate.START_TEMPLATE_ANIMATION = \"startTemplateAnimation\";\nHarmonicTemplate.STOP_TEMPLATE_ANIMATION = \"stopTemplateAnimation\";\nHarmonicTemplate.RESTART_TEMPLATE_ANIMATION = \"restartTemplateAnimation\";\nHarmonicTemplate.GOTO_FRAME = \"gotoFrame\";\nHarmonicTemplate.RENDER_ALL_FIELDS = \"renderAllFields\";\nHarmonicTemplate.SET_VISIBLE = \"setVisible\";\nHarmonicTemplate.FULLY_VISIBLE = \"fullyVisible\";\n\n// Functions that are sent directly to the widgets\nHarmonicTemplate.UPDATE_TEXT_FIELD = \"updateTextField\";\nHarmonicTemplate.APPEND_TEXT_FIELD = \"appendTextField\";\nHarmonicTemplate.UPDATE_IMAGE_FIELD = \"updateImageField\";\nHarmonicTemplate.RENDER_FIELD = \"renderField\";\nHarmonicTemplate.STOP_FIELD_ANIMATION = \"stopFieldAnimation\";\nHarmonicTemplate.RESTART_FIELD_ANIMATION = \"restartFieldAnimation\";\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/harmonic-template.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "HarmonicTemplate",
    "memberof": "src/harmonic-template.js",
    "static": true,
    "longname": "src/harmonic-template.js~HarmonicTemplate",
    "access": "public",
    "export": false,
    "importPath": "./src/harmonic-template.js",
    "importStyle": null,
    "description": "The Harmonic Template is the main controller of an HTML graphical template.\nIt is responsible for controlling the timeline of the template, handling\nall incoming and outgoing Oxtel commands, and managing any create widgets.\n\nBefore calling init() on the class, exportRoot, stage, and stage.canvas\nmust all be valid objects.  These entities provide access to the global\ntimeline (exportRoot) and information about the template (stage and stage.canvas).\n\nThis class also provides access to all created widgets.  Use the\ngetWidgetByFieldNum() method to get references to widgets.\n\nThis class dispatches 3 important events:\n- LOAD_COMPLETE_EVENT - this event is dispatched immediately before sending\n  Load/Preload Complete signal.  At this point, all widgets have been created\n  and can be accessed using the getWidgetByFieldNum interface.\n- VISIBLE_EVENT - this event is dispatched when the template first becomes\n  visible.  After being loaded, this is the event that starts the template\n  playing.\n- FULLY_VISIBLE_EVENT - this event is dispatched when the alpha for the\n  layer become fully visible.  Although there is nothing significant about this\n  event internally, it can be useful for certain customers.\n\nSome of the public methods in this class can be overridden the template\ncreator if they need to change or extend the functionality.  The methods\nthat can be overridden are:\n\n- setVisible\n- fullyVisible\n- startTemplateAnimation\n- stopTemplateAnimation\n- restartTemplateAnimation\n- gotoFrame\n- updateTextField\n- appendTextField\n- updateImagePath\n- renderField\n- renderAllFields\n- restartFieldAnimation\n- stopFieldAnimation\n\nAn example of this can be found in the news ticker sample template.\nA snippet is provided below.",
    "examples": [
      "function updateTextFieldOverride(obj) {\n    hjs.info(\"updateTextFieldOverride:\");\n    hjs.info(\"obj.tickid:   \" + obj.tickid);\n    hjs.info(\"obj.fieldNum: \" + obj.fieldNum);\n    hjs.info(\"obj.text:     \" + obj.text);\n    hjs.info(\"obj.render:   \" + obj.render);\n    switch (obj.fieldNum) {\n        case 1:\n            break;\n    }\n\n    // This is optional, but recommended.\n    harmonicTemplate.updateTextField(obj);\n}\n\n// Create the override object and register it with the harmonicTemplate\nlet override = {\n    updateTextField: updateTextFieldOverride\n}\n\nharmonicTemplate.registerOverride(override);"
    ],
    "lineNumber": 74,
    "interface": false
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 79
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "_state",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_state",
    "access": "private",
    "description": "Current state of the template (preloaded vs. loaded)",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_firstTickEndReceived",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_firstTickEndReceived",
    "access": "private",
    "description": "Flag used to know if the first 'tickend' event was received.  This event\nas well as the INIT command must be received before initialization can continue.",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_initCommandReceived",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_initCommandReceived",
    "access": "private",
    "description": "Flag used to know if INIT command was received.  This event as well as the\nfirst 'tickend' must be received before initialization can continue.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_config",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_config",
    "access": "private",
    "description": "The configuration from the HTML renderer.  On the desktop we use\nthese values to emulate the INIT command being received.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_templateWidth",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_templateWidth",
    "access": "private",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_templateHeight",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_templateHeight",
    "access": "private",
    "description": "The height of the loaded template.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "_templateDescription",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_templateDescription",
    "access": "private",
    "description": "The template description.  This is XML that contains a description\nof the text fields in the template.  The FXTool uses this information\nin its dynamic text dialog.",
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "_widgets",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_widgets",
    "access": "private",
    "description": "A map of all registered widgets.  The key is the fieldNum and the\nvalue is the Widget itself.",
    "lineNumber": 154,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_setVisibleCalled",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_setVisibleCalled",
    "access": "private",
    "description": "Flag that indicates if setVisible has been called.",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "_fullyVisibleCalled",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_fullyVisibleCalled",
    "access": "private",
    "description": "Flag that indicates if fullyVisible has been called.",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_timeline",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_timeline",
    "access": "private",
    "description": "Object used to manage the main movie clip's timeline.",
    "lineNumber": 172,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_contentRect",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_contentRect",
    "access": "private",
    "description": "Object used to communicate the location and size of the content.",
    "lineNumber": 186,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_anchorOverride",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_anchorOverride",
    "access": "private",
    "description": "An anchor widget will set the override and it will get applied\nonce the template is loaded.",
    "lineNumber": 192,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_override",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_override",
    "access": "private",
    "description": "Object that is registered to override functions from this class.",
    "lineNumber": 198,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "_allWidgetsLoaded",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_allWidgetsLoaded",
    "access": "private",
    "description": "Flag that indicates that all widgets have loaded.",
    "lineNumber": 204,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "_waitForAllWidgetsToLoadCount",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_waitForAllWidgetsToLoadCount",
    "access": "private",
    "description": "Count used to keep track of the number of ticks for widgets to load.",
    "lineNumber": 210,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "_waitForAllWidgetsToLoadCallback",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_waitForAllWidgetsToLoadCallback",
    "access": "private",
    "description": "Callback function used to poll the widget load status.  This is\nnecessary for use in the add/remove listener functions.",
    "lineNumber": 217,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "init",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#init",
    "access": "public",
    "description": "Called from the Adobe-generated JavaScript after export root and the\nstage have been created.",
    "lineNumber": 226,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "registerOverride",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#registerOverride",
    "access": "public",
    "description": "This method allows a client to override many of the public methods\nin this class.  The most common use of this is overriding the\nupdateTextField functionality.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "overrideObj",
        "description": "the override object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "description",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#description",
    "access": "public",
    "description": "Returns the XML description of all text fields.",
    "lineNumber": 281,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "get",
    "name": "channel",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#channel",
    "access": "public",
    "description": "Returns the channel this template is running on.",
    "lineNumber": 290,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "get",
    "name": "layer",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#layer",
    "access": "public",
    "description": "Returns the layer this template is running on.",
    "lineNumber": 299,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "get",
    "name": "primaryVideoWidth",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#primaryVideoWidth",
    "access": "public",
    "description": "Returns the width of the primary video resolution.  For example, if\nthe player is configured for 720p, then this function will return 1280.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 312,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "primaryVideoHeight",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#primaryVideoHeight",
    "access": "public",
    "description": "Returns the height of the primary video resolution.  For example, if\nthe player is configured for 720p, then this function will return 720.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 330,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "get",
    "name": "isSecondaryChannel",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#isSecondaryChannel",
    "access": "public",
    "description": "Returns true when independent branding is enabled and the template is\nrunning in the secondary channel.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 348,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "secondaryVideoWidth",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#secondaryVideoWidth",
    "access": "public",
    "description": "Returns the width of the secondary video resolution.  This value will\nbe valid when isSecondaryChannel() return true.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 361,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "get",
    "name": "secondaryVideoHeight",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#secondaryVideoHeight",
    "access": "public",
    "description": "Returns the height of the secondary video resolution.  This value will\nbe valid when isSecondaryChannel() return true.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 379,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "get",
    "name": "oxtelTcpPort",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#oxtelTcpPort",
    "access": "public",
    "description": "Returns the Oxtel TCP port for the channel.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 396,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "name": "oxtelSerialOverTcpPort",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#oxtelSerialOverTcpPort",
    "access": "public",
    "description": "Returns the Oxtel Serial over TCP port for the channel.\n\nThis value is only valid after the INIT message has been received.  Clients\nshould wait until LOAD_COMPLETE to sample this data.",
    "lineNumber": 413,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "startTemplateAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#startTemplateAnimation",
    "access": "public",
    "description": "Starts template animation.",
    "lineNumber": 436,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "stopTemplateAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#stopTemplateAnimation",
    "access": "public",
    "description": "Stops template animation.",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.immediate",
        "description": "true = stop immediately, false = stop at the end of the animation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "restartTemplateAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#restartTemplateAnimation",
    "access": "public",
    "description": "Restarts template animation.",
    "lineNumber": 487,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "gotoFrame",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#gotoFrame",
    "access": "public",
    "description": "Goto frame number and play.",
    "lineNumber": 509,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.frame",
        "description": "the frame number to goto"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_setVisible",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_setVisible",
    "access": "private",
    "description": "This method is called internally.  It will be used to check for an\noverride before calling the setVisible() function.\n\nThis function should only perform processing if the template\nstate is LOADED.",
    "lineNumber": 531,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "setVisible",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#setVisible",
    "access": "public",
    "description": "This function is required for the override mechanism to work.  The\n_setVisible call will perform the override check.  If no override\nis registered, then this function will be called.",
    "lineNumber": 549,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_fullyVisible",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_fullyVisible",
    "access": "private",
    "description": "This method is called internally.  It will be used to check for an\noverride before calling the fullyVisible() function.\n\nThis function should only perform processing if the template\nstate is LOADED.",
    "lineNumber": 576,
    "params": [],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "fullyVisible",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#fullyVisible",
    "access": "public",
    "description": "This function is required for the override mechanism to work.  The\n_fullyVisible call will perform the override check.  If no override\nis registered, then this function will be called.",
    "lineNumber": 593,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "isWidgetdRegistered",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#isWidgetdRegistered",
    "access": "public",
    "description": "Returns true if a widget has been registered with the Harmonic Template\nvia the WIDGET_CREATED_EVENT.",
    "lineNumber": 623,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if widget is registered, false otherwise"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getWidgetByFieldNum",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#getWidgetByFieldNum",
    "access": "public",
    "description": "Returns the Harmonic Widget associated with the field number.",
    "lineNumber": 634,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Objet"
      ],
      "spread": false,
      "description": "Harmonic Widget or undefined if not registered"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#updateTextField",
    "access": "public",
    "description": "Oxtel command: Z0 - Update Text Field",
    "lineNumber": 648,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "updateTextField"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.text",
        "description": "the text to render"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.render",
        "description": "flag indicating whether or not to render the text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#appendTextField",
    "access": "public",
    "description": "Oxtel command: Z0 - Append Text Field",
    "lineNumber": 663,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "appendTextField"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.text",
        "description": "the text to render"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.render",
        "description": "flag indicating whether or not to render the text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "updateImageField",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#updateImageField",
    "access": "public",
    "description": "Updates the image path on a field.",
    "lineNumber": 677,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "updateImageField"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.imagePath",
        "description": "the image path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "renderField",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#renderField",
    "access": "public",
    "description": "Oxtel command: Z3 - Render Box",
    "lineNumber": 690,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "renderField"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "renderAllFields",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#renderAllFields",
    "access": "public",
    "description": "Renders all fields.",
    "lineNumber": 702,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "renderAllFields"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "always true"
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#stopFieldAnimation",
    "access": "public",
    "description": "Stops animation on the specified field.",
    "lineNumber": 732,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "stopFieldAnimation"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.immediate",
        "description": "flag indicating whether to stop immediately or at the end of the animation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#restartFieldAnimation",
    "access": "public",
    "description": "Restarts animation on the specified field.",
    "lineNumber": 746,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "restartFieldAnimation"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fieldNum",
        "description": "the field number identifier"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.fromBeginning",
        "description": "flag indicating whether to start from the beginning or at the current frame."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "_dispatchWidgetEvent",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_dispatchWidgetEvent",
    "access": "private",
    "description": "Dispatches the WIDGET_EVENT event on the document.",
    "lineNumber": 757,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "details of the event"
      }
    ],
    "emits": [
      {
        "types": [
          "HarmonicTemplate.WIDGET_EVENT_<fieldNum>"
        ],
        "description": "to send the command to the widget"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "_checkForOverride",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_checkForOverride",
    "access": "private",
    "description": "This function will check to see if an override object has been registered.\nIf it has, then it will call the override function.  It is the\nresponsibility of the override to call the real function in the\nHarmonicTemplate instance.  Failure to do so will result in standard\nbehavior not working.",
    "lineNumber": 789,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.functionName",
        "description": "the name of the function"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "_initTemplateDescription",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_initTemplateDescription",
    "access": "private",
    "description": "Creates the XML template description and sends to HTML Renderer.",
    "lineNumber": 808,
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "_detectThreePointAnimation",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_detectThreePointAnimation",
    "access": "private",
    "description": "Detects if the template contains a 3-point animation.\nThe code loops for a frame label called 'loop_start' and\n'loop_end'.\n\nNOTE:  All reporting of errors will contain a +1 on the\n       label position to match the position in Adobe\n       Animate.",
    "lineNumber": 840,
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_checkIfLoadComplete",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_checkIfLoadComplete",
    "access": "private",
    "description": "This method checks to see if the loading process is complete.\nThe loading process is complete when:\n- the INIT command is received from the HTML renderer\n- the first 'tickend' message is received\n- all widgets have reported a loaded status",
    "lineNumber": 892,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_handlePreloadComplete",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_handlePreloadComplete",
    "access": "private",
    "description": "Preload is now complete.  Update the state and signal\nPreload Complete back to the HTML renderer.  Once\nthis is done, the template waits for Activate before\ncontinuing.  Activate is the transition from PRELOADED\nto LOADED.",
    "lineNumber": 927,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_handleLoadComplete",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_handleLoadComplete",
    "access": "private",
    "description": "Load is now complete.  Perform the following:\n- update the state to LOADED\n- set IsLive to true on the shared surface\n- signal Load Complete to the HTML renderer\n- handle the alpha based on the alpha parameter.",
    "lineNumber": 943,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "the alpha at the time of the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "_printConfig",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_printConfig",
    "access": "private",
    "description": null,
    "lineNumber": 980,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_handleAlpha",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_handleAlpha",
    "access": "private",
    "description": "This function analyzes the alpha parameter and\ncalls the _setVisible and _fullyVisible functions\nif necessary.",
    "lineNumber": 1009,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "_waitForAllWidgetsToLoad",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_waitForAllWidgetsToLoad",
    "access": "private",
    "description": "This function is invoked every tick until all widgets have returned\na loaded status.  If the widgets don't load in time, continue to allow\nload complete to occur and output a warning.",
    "lineNumber": 1025,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "_initializeStageEventHandlers",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_initializeStageEventHandlers",
    "access": "private",
    "description": "The stage is not available until the init() call is made.  At that time,\nadd event handlers for the stage events.",
    "lineNumber": 1056,
    "listens": [
      {
        "types": [
          "'tickend'"
        ],
        "description": "listen for the first tickend to trigger load complete processing"
      },
      {
        "types": [
          "'tick'"
        ],
        "description": "listen for every tick"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "_initializeDocumentEventHandlers",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_initializeDocumentEventHandlers",
    "access": "private",
    "description": "Initializes event handlers associated with the document.",
    "lineNumber": 1130,
    "listens": [
      {
        "types": [
          "HJS.COMMAND_RECEIVED_EVENT"
        ],
        "description": "sent when a websocket command is received in HJS"
      },
      {
        "types": [
          "HarmonicTemplate.WIDGET_CREATED_EVENT"
        ],
        "description": "sent when a widget is created"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "_processTimelineActions",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_processTimelineActions",
    "access": "private",
    "description": "Processes timeline actions on the tick.",
    "lineNumber": 1233,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "_playAll",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_playAll",
    "access": "private",
    "description": "Calls play() on all movie clips on the display list.",
    "lineNumber": 1262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "play from beginning or from the current frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "_restartAllFieldAnimations",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_restartAllFieldAnimations",
    "access": "private",
    "description": "Dispatches the WIDGET_EVENT to all registered widgets.  The\nfunction is RESTART_FIELD_ANIMATION.",
    "lineNumber": 1282,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "true = start animation from beginning, false = play from current frame"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "_stopAllFieldAnimations",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_stopAllFieldAnimations",
    "access": "private",
    "description": "Dispatches the WIDGET_EVENT to all registered widgets.  The\nfunction is STOP_FIELD_ANIMATION.",
    "lineNumber": 1307,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "true = stop immediately, false = stop at the end of the animation."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "_stopAll",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_stopAll",
    "access": "private",
    "description": "Calls stop() on all movie clips on the display list.",
    "lineNumber": 1329,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_gotoAndPlayAll",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_gotoAndPlayAll",
    "access": "private",
    "description": "Calls gotoAndPlay() on all movie clips on the display list.",
    "lineNumber": 1348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frame",
        "description": "the frame to go to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "_gotoAndStopAll",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_gotoAndStopAll",
    "access": "private",
    "description": "Calls gotoAndStop() on all movie clips on the display list.true",
    "lineNumber": 1364,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frame",
        "description": "the frame to go to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "_findAllMovieClips",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_findAllMovieClips",
    "access": "private",
    "description": "Finds all movie clips on the display list.",
    "lineNumber": 1380,
    "return": {
      "nullable": null,
      "types": [
        "createjs.MovieClip[]"
      ],
      "spread": false,
      "description": "array of movie clips"
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "_locateMovieClips",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_locateMovieClips",
    "access": "private",
    "description": "Recursive function used to locate all movie clips on the display list.",
    "lineNumber": 1392,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "createjs.MovieClip[]"
        ],
        "spread": false,
        "optional": false,
        "name": "movieClips",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_alphaNotZero",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_alphaNotZero",
    "access": "private",
    "description": "Handles the case when alpha is no longer zero.",
    "lineNumber": 1413,
    "params": [],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_alphaAtMax",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_alphaAtMax",
    "access": "private",
    "description": "Handles the case when alpha reaches its maximum.",
    "lineNumber": 1424,
    "params": [],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "_activate",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_activate",
    "access": "private",
    "description": "Handles activation from Preload to Load.",
    "lineNumber": 1438,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.alpha",
        "description": "alpha at time of activate"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_setTransform",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_setTransform",
    "access": "private",
    "description": "This function will downscale the primary graphic template when in\nindependent branding mode and the secondary template is not present.",
    "lineNumber": 1453,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "scaleMode",
        "description": "the scale mode to apply"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "anchor",
        "description": "the anchor to apply"
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "get",
    "name": "anchor",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#anchor",
    "access": "public",
    "description": "Gets the anchor.",
    "lineNumber": 1761,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "set",
    "name": "anchor",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#anchor",
    "access": "public",
    "description": "Sets the anchor.",
    "lineNumber": 1769,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "anchor",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "set",
    "name": "anchorOverride",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#anchorOverride",
    "access": "public",
    "description": "Sets the anchor override.  The achor override will be applied just\nbefore the LOAD_COMPLETE_EVENT is dispatched.",
    "lineNumber": 1784,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "anchor",
        "description": "override."
      }
    ]
  },
  {
    "__docId__": 214,
    "kind": "get",
    "name": "anchorOverride",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#anchorOverride",
    "access": "public",
    "description": "Gets the anchor override.",
    "lineNumber": 1797,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "anchor",
        "description": "override"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "get",
    "name": "scaleMode",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#scaleMode",
    "access": "public",
    "description": "Gets the scale mode.",
    "lineNumber": 1805,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "scale mode"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "set",
    "name": "scaleMode",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#scaleMode",
    "access": "public",
    "description": "Sets the scale mode.",
    "lineNumber": 1813,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": "mode"
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "_getAnchorStr",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_getAnchorStr",
    "access": "private",
    "description": "Returns the text representation of the anchor value.",
    "lineNumber": 1828,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "anchor",
        "description": "the anchor value to lookup"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the text representation of the anchor value"
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "_getScaleModeStr",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#_getScaleModeStr",
    "access": "private",
    "description": "Returns the text representation of the scale mode value.",
    "lineNumber": 1851,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "scaleMode",
        "description": "the scale mode value to lookup"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the text representation of the scale mode value"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "enableP2S",
    "memberof": "src/harmonic-template.js~HarmonicTemplate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/harmonic-template.js~HarmonicTemplate#enableP2S",
    "access": "public",
    "description": "Enables primary to secondary downscale mode for testing on the\ndesktop.",
    "lineNumber": 1872,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priChannelW",
        "description": "primary channel width"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priChannelH",
        "description": "primary channel height"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "secChannelW",
        "description": "secondary channel width"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "secChannelH",
        "description": "secondary channel height"
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "src/hjs/hjs-init.js",
    "content": "/**\n * File: hjs-init.js\n * \n * Copyright (c) 2018 Harmonic, Inc.\n * \n * Handles construction and initialization of HJS, Harmonic Template,\n * and Harmonic Widgets.\n * \n */\n\n//------------------------------------------------------------------------------\n// HJS Configuration\n//------------------------------------------------------------------------------\n\n/**\n * Global object that represents the HJS configuration.  \n * @type {Object}\n */\nlet hjsConfig = {\n    severity: HJS.INFO,                    // Initial log severity\n    remoteWebSocket : {                    // Connect to a remote websocket\n        enable: false,                     // enable for connection\n        ipAddress: \"\",                     // websocket server ip address\n        port: 9500                         // websocket server port\n    }\n};\n\n//------------------------------------------------------------------------------\n// Harmonic JavaScript (aka HJS)\n//------------------------------------------------------------------------------\n\n/**\n * Global object that represents the HJS.  The HJS provides the interface to\n * and from the HTML renderer.\n * @type {HJS} \n */\nlet hjs = new HJS(hjsConfig);\n\n//------------------------------------------------------------------------------\n// Harmonic Template and Widgets\n//------------------------------------------------------------------------------\n\n/**\n * Global object that provides the Harmonic Template functionality.  \n * @type {HarmonicTemplate}\n */\nlet harmonicTemplate = new HarmonicTemplate();\n\n/**\n * Global object that contains the 2 Harmonic DVE objects.\n * @type {HarmonicDVE[]}\n */\nlet harmonicDVE = [ new HarmonicDVE(0), new HarmonicDVE(1) ];\n\n/**\n * Global object that represents DVE 0 (standard/UHD channel).\n * @type {HarmonicDVE}\n */\nlet dve = harmonicDVE[0]; \n\n/**\n * Global object that represents DVE 0 (enhanced channel).\n * @type {HarmonicDVE}\n */\nlet dve0 = dve;\n\n/**\n * Global object that represents DVE 1 (enhanced channel).\n * @type {HarmonicDVE}\n */\nlet dve1 = harmonicDVE[1];\n\n/**\n * Global object that contains the 2 Harmonic Live AVO objects.\n * @type {HarmonicLiveAVO[]}\n */\nlet harmonicLiveAVO = [ new HarmonicLiveAVO(0), new HarmonicLiveAVO(1) ];\n\n/**\n * Global object that represents Live AVO unit 0 (standard/UHD channel).\n * @type {HarmonicDVE}\n */\nlet liveAVO = harmonicLiveAVO[0]; \n\n/**\n * Global object that represents Live AVO unit 0 (enhanced channel).\n * @type {HarmonicDVE}\n */\nlet liveAVO0 = liveAVO;\n\n/**\n * Global object that represents Live AVO unit 1 (enhanced channel).\n * @type {HarmonicDVE}\n */\nlet liveAVO1 = harmonicLiveAVO[1];\n\n// Initialize HJS after creating the Harmonic Template and Widgets\nhjs.init();\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/hjs/hjs-init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "hjsConfig",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~hjsConfig",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents the HJS configuration.  ",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "hjs",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~hjs",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents the HJS.  The HJS provides the interface to\nand from the HTML renderer.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "HJS"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "harmonicTemplate",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~harmonicTemplate",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that provides the Harmonic Template functionality.  ",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicTemplate"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "harmonicDVE",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~harmonicDVE",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that contains the 2 Harmonic DVE objects.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "dve",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~dve",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents DVE 0 (standard/UHD channel).",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "dve0",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~dve0",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents DVE 0 (enhanced channel).",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "dve1",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~dve1",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents DVE 1 (enhanced channel).",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "harmonicLiveAVO",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~harmonicLiveAVO",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that contains the 2 Harmonic Live AVO objects.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicLiveAVO[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "liveAVO",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~liveAVO",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents Live AVO unit 0 (standard/UHD channel).",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "liveAVO0",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~liveAVO0",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents Live AVO unit 0 (enhanced channel).",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "liveAVO1",
    "memberof": "src/hjs/hjs-init.js",
    "static": true,
    "longname": "src/hjs/hjs-init.js~liveAVO1",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-init.js",
    "importStyle": null,
    "description": "Global object that represents Live AVO unit 1 (enhanced channel).",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "HarmonicDVE"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/hjs/hjs-test.js",
    "content": "/**\n * File: hjs-test.js\n * \n * Copyright (c) 2018 Harmonic, Inc.\n */   \n\n /**\n  * Creates a global test object called 'hjstest'.  This object can be used\n  * to inject websocket commands into the Harmonic JavaScript code.  This\n  * functionality allows clients to test and debug issues.\n  */\nclass HarmonicTemplateTest {\n\n    constructor() {\n        hjs.debug(\"HarmonicTemplateTest.constructor\");\n    }\n\n    /**\n     * Emulates the Oxtel Start Animation (S0) command.\n     */\n    startTemplateAnimation() {\n        const obj = { \n            command: HJS.START_TEMPLATE_ANIMATION_COMMAND,\n            tickid: 0 \n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Stop Animation (S1) command.\n     * @param {Boolean} immediate - false = complete cycle then stop, true = stop immediately\n     */\n    stopTemplateAnimation(immediate) {\n        const obj = { \n            command: HJS.STOP_TEMPLATE_ANIMATION_COMMAND,\n            tickid: 0,\n            immediate: immediate \n        };                    \n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Select Animation Frame (S2) command.\n     * @param {Number} frame \n     */\n    gotoFrame(frame) {\n        const obj = { \n            command: HJS.GOTO_FRAME_COMMAND,\n            tickid: 0,\n            frame: frame \n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Restart Animation (S4) command.\n     */\n    restartTemplateAnimation() {\n        const obj = { \n            command: HJS.RESTART_TEMPLATE_ANIMATION_COMMAND,\n            tickid: 0 \n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Update Text Field (Z0) command \n     * with the Append flag not set.\n     * @param {Number} fieldNum \n     * @param {String} text \n     * @param {Boolean} render - true = render now\n     */\n    updateTextField(fieldNum, text, render) {\n        const obj = {\n            command: HJS.UPDATE_TEXT_FIELD_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum,\n            text: text,\n            render: render\n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Update Text Field (Z0) command \n     * with the Append flag set.\n     * @param {Number} fieldNum \n     * @param {String} text \n     * @param {Boolean} render - true = render now\n     */    \n    appendTextField(fieldNum, text, render) {\n        const obj = {\n            command: HJS.APPEND_TEXT_FIELD_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum,\n            text: text,\n            render: render\n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Render Box (Z3) command.\n     * @param {Number} fieldNum \n     */\n    renderField(fieldNum) {\n        const obj = {\n            command: HJS.RENDER_FIELD_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum\n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }     \n    \n    /**\n     * Emulates the Oxtel Render Box (Z3) command and\n     * renders all text fields.\n     */\n    renderAllFields() {\n        const obj = {\n            command: HJS.RENDER_ALL_FIELDS_COMMAND,\n            tickid: 0\n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }         \n\n    /**\n     * Emulates the Oxtel Change Image (Z4) command.\n     * @param {Number} fieldNum \n     * @param {String} imagePath \n     */\n    updateImageField(fieldNum, imagePath) {\n        const obj = {\n            command: HJS.UPDATE_IMAGE_FIELD_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum,\n            imagePath: imagePath\n        };\n\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }   \n\n    /**\n     * Emulates the Oxtel Stop Animation (Zf) command.\n     * @param {Number} fieldNum \n     * @param {Boolean} immediate - false = complete cycle then stop, true = stop immediately\n     */\n    stopFieldAnimation(fieldNum, immediate) {\n        const obj = {\n            command: HJS.STOP_FIELD_ANIMATION_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum,\n            immediate: immediate\n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the Oxtel Pause/Restart Strap (Zg) command\n     * @param {Number} fieldNum \n     * @param {Boolean} fromBeginning - true = start from beginning, false = start animation\n     */\n    restartFieldAnimation(fieldNum, fromBeginning) {\n        const obj = {\n            command: HJS.RESTART_FIELD_ANIMATION_COMMAND,\n            tickid: 0,\n            fieldNum: fieldNum,\n            fromBeginning: fromBeginning\n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the VISIBLE event.\n     * @param {Number} alpha \n     */\n    alphaNotZero(alpha=1) {\n        const obj = {\n            command: HJS.ALPHA_NOT_ZERO_COMMAND,\n            tickid: 0,\n            alpha: alpha\n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the FULLY_VISIBLE event.\n     * @param {Number} alpha \n     */\n    alphaAtMax(alpha=1) {\n        const obj = {\n            command: HJS.ALPHA_AT_MAX_COMMAND,\n            tickid: 0,\n            alpha: alpha\n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the transition from Preload to Load.\n     * @param {Number} alpha \n     */\n    activate(alpha) {\n        const obj = {\n            command: HJS.ACTIVATE_COMMAND,\n            tickid: 0,\n            alpha: alpha            \n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n\n    /**\n     * Emulates the socket connected message.\n     * @param {String} ipAddress \n     * @param {Number} port \n     * @param {Number} socketType \n     * @param {Number} socketId \n     */\n    socketConnected(ipAddress, port, socketType, socketId) {\n        const obj = {\n            command: HJS.SOCKET_CONNECTED_COMMAND,\n            ipAddress: ipAddress,\n            port: port,\n            socketType: socketType,\n            socketId: socketId\n        };\n        hjs._onWebSocketMessage(JSON.stringify(obj));        \n    }\n\n    /**\n     * Emulates the socket disconnected message.\n     * @param {Number} socketId \n     */\n    socketDisconnected(socketId) {\n        const obj = {\n            command: HJS.SOCKET_DISCONNECTED_COMMAND,\n            socketId: socketId\n        };\n        hjs._onWebSocketMessage(JSON.stringify(obj));        \n    }    \n    \n    /**\n     * Emulates the socket data message.\n     * @param {Number} socketId \n     * @param {String} data \n     */\n    socketData(socketId, data) {\n        const obj = {\n            command: HJS.SOCKET_DATA_COMMAND,\n            socketId: socketId,\n            data: data\n        };\n        hjs._onWebSocketMessage(JSON.stringify(obj));        \n    }    \n\n    /**\n     * Emulates the socket error message.\n     * @param {String} ipAddress \n     * @param {Number} port\n     * @param {Number} socketType \n     * @param {Number} socketId \n     * @param {Number} errorCode \n     */\n    socketError(ipAddress, port, socketType, socketId, errorCode) {\n        const obj = {\n            command: HJS.SOCKET_ERROR_COMMAND,\n            ipAddress: ipAddress,\n            port: port,\n            socketType: socketType,\n            socketId: socketId,\n            errorCode: errorCode\n        };\n        hjs._onWebSocketMessage(JSON.stringify(obj));        \n    }\n\n    ping() {\n        const obj = {\n            command: HJS.PING_COMMAND\n        }\n        hjs._onWebSocketMessage(JSON.stringify(obj));\n    }\n}\n\nlet hjstest = new HarmonicTemplateTest();\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/hjs/hjs-test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "HarmonicTemplateTest",
    "memberof": "src/hjs/hjs-test.js",
    "static": true,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-test.js",
    "importStyle": null,
    "description": "Creates a global test object called 'hjstest'.  This object can be used\nto inject websocket commands into the Harmonic JavaScript code.  This\nfunctionality allows clients to test and debug issues.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "startTemplateAnimation",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#startTemplateAnimation",
    "access": "public",
    "description": "Emulates the Oxtel Start Animation (S0) command.",
    "lineNumber": 21,
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "stopTemplateAnimation",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#stopTemplateAnimation",
    "access": "public",
    "description": "Emulates the Oxtel Stop Animation (S1) command.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "false = complete cycle then stop, true = stop immediately"
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "gotoFrame",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#gotoFrame",
    "access": "public",
    "description": "Emulates the Oxtel Select Animation Frame (S2) command.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frame",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "restartTemplateAnimation",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#restartTemplateAnimation",
    "access": "public",
    "description": "Emulates the Oxtel Restart Animation (S4) command.",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#updateTextField",
    "access": "public",
    "description": "Emulates the Oxtel Update Text Field (Z0) command \nwith the Append flag not set.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "true = render now"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#appendTextField",
    "access": "public",
    "description": "Emulates the Oxtel Update Text Field (Z0) command \nwith the Append flag set.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "true = render now"
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "renderField",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#renderField",
    "access": "public",
    "description": "Emulates the Oxtel Render Box (Z3) command.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "renderAllFields",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#renderAllFields",
    "access": "public",
    "description": "Emulates the Oxtel Render Box (Z3) command and\nrenders all text fields.",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "updateImageField",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#updateImageField",
    "access": "public",
    "description": "Emulates the Oxtel Change Image (Z4) command.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePath",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#stopFieldAnimation",
    "access": "public",
    "description": "Emulates the Oxtel Stop Animation (Zf) command.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "false = complete cycle then stop, true = stop immediately"
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#restartFieldAnimation",
    "access": "public",
    "description": "Emulates the Oxtel Pause/Restart Strap (Zg) command",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "true = start from beginning, false = start animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "alphaNotZero",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#alphaNotZero",
    "access": "public",
    "description": "Emulates the VISIBLE event.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "alphaAtMax",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#alphaAtMax",
    "access": "public",
    "description": "Emulates the FULLY_VISIBLE event.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "activate",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#activate",
    "access": "public",
    "description": "Emulates the transition from Preload to Load.",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "socketConnected",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#socketConnected",
    "access": "public",
    "description": "Emulates the socket connected message.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ipAddress",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "socketDisconnected",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#socketDisconnected",
    "access": "public",
    "description": "Emulates the socket disconnected message.",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "socketData",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#socketData",
    "access": "public",
    "description": "Emulates the socket data message.",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "socketError",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#socketError",
    "access": "public",
    "description": "Emulates the socket error message.",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ipAddress",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "errorCode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "ping",
    "memberof": "src/hjs/hjs-test.js~HarmonicTemplateTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs-test.js~HarmonicTemplateTest#ping",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "hjstest",
    "memberof": "src/hjs/hjs-test.js",
    "static": true,
    "longname": "src/hjs/hjs-test.js~hjstest",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs-test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "src/hjs/hjs-test.js~HarmonicTemplateTest"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/hjs/hjs.js",
    "content": "/**\n * File: hjs.js\n * \n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * This class provides the interface to/from the HTML renderer.  It uses a \n * websocket connection to send and receive data from the HTML renderer.\n * \n * This class provides the following capabilities:\n * - on platform vs. desktop detection\n * - log message functionality (to console and system log)\n * - individual interfaces for sending information to the HTML renderer\n * - dispatches COMMAND_RECEIVED_EVENT when valid data is received from \n *   the HTML renderer\n */\nclass HJS {\n\n    /**\n     * Constructor \n     * - initializes all member variables.\n     * \n     * @param {Object} config\n     * @param {Number} config.severity;\n     */\n    constructor(config) {\n        console.log(\"HJS.constructor\");\n\n        /**\n         * The configuration used to construct HJS.  Reference {@link hjsConfig}\n         * @type {Object} \n         */\n        this._config = config;\n\n        /**\n         * The severity of the Log output.\n         * @type {Number}\n         */\n        this._severity = config.severity;\n\n        /**\n         * A queue to log messages to before the websocket is ready.  Once\n         * the websocket is opened, the severity will be sent followed by\n         * the contents of the queue.\n         * @type {Object[]}\n         */\n        this._queuedLogMsgs = [];\n\n        /**\n         * Flag indicating if the code is running on the platform or desktop.\n         * @type {Boolean}\n         */\n        this._isOnPlatform = false;     \n\n        /**\n         * Flag indicating if the browser is running on the desktop and the\n         * HTML renderer is running on the platform.  Used for debug purposes.\n         * @type {Boolean}\n         */\n        this._isEmulatingPlatform = false;\n\n        /**\n         * IP address of the websocket server.\n         * @type {String}\n         */\n        this._ipAddress = undefined;\n\n        /**\n         * Port of the websocket server.\n         * @type {Number}\n         */\n        this._port = undefined;\n\n        /**\n         * The name of the loaded template.\n         * @type {String}\n         */\n        this._templateName = undefined;\n\n        /**\n         * Flag indicating if the DVE SrcPreview should be visible.\n         * @type {Boolean}\n         */\n        this._showDveSrcPreview = false;\n\n        // init using the URL\n        this._initFromURL();\n\n        /**\n         * The websocket to the HTML renderer.\n         * @type {Object}\n         */\n        this._websocket = undefined;\n    }\n\n    /**\n     * Initializes the websocket.  This must be called after the Harmonic\n     * Template is constructed or it may miss the INIT_COMMAND from \n     * the HTML renderer.\n     */\n    init() {\n        this.debug(\"HJS.init\");\n        this._initWebSocket();\n    }\n\n    /**\n     * When running on the platform, the URL contains the ip address\n     * and the port of the websocket to connect to.  Use this information\n     * to determine if we are running on the platform vs. desktop and\n     * to make the websocket connection.\n     */\n    _initFromURL() {\n\n        let validParams = false;\n        let urlParams = window.location.search.substring(1).split('?');\n        let searchParams = new URLSearchParams(window.location.search);\n\n        if (urlParams.length == 3) {\n            // OLD HTML Renderer code support - should be removed over time.\n            this._ipAddress = urlParams[0];\n            this._port = urlParams[1];\n            this._templateName = urlParams[2];   \n            validParams = true;\n        }\n        else {\n            // New HTML Renderer code support \n            // - key/value pairs for parameters\n            this._ipAddress = searchParams.get(\"ip\");\n            this._port = searchParams.get(\"port\");\n            this._templateName = searchParams.get(\"template\");\n            \n            if (searchParams.has(\"showDveSrcPreview\")) {\n                this._showDveSrcPreview = searchParams.get(\"showDveSrcPreview\") === \"1\";\n            }\n                        \n            if ((this._ipAddress !== null) &&\n                (this._port !== null) &&\n                (this._templateName !== null))\n            {\n                validParams = true;\n            }\n        }\n\n        if (validParams !== true) {\n            this._ipAddress = undefined;\n            this._port = undefined;\n            this._templateName = window.location.pathname.substring(1);\n        }\n\n        // If the ip address and port are not specified in the URL, then\n        // assume that we're running on the desktop.\n        if ((this._ipAddress == undefined) || (this._port == undefined)) {        \n            this._isOnPlatform = false;\n            this.info(\"Running in a desktop browser\");\n\n            // Always show the DVE SrcPreview on the desktop.\n            this._showDveSrcPreview = true;\n\n            if (this._config.remoteWebSocket.enable) {\n                this._ipAddress = this._config.remoteWebSocket.ipAddress;\n                this._port = this._config.remoteWebSocket.port;\n                this.info(\"Remote WebSocket configured: ipAddress: \" + this._ipAddress + \" port: \" + this._port);\n\n                this._isOnPlatform = true; \n                this._isEmulatingPlatform = true;\n                this.info(\"Emulating platform behavior - isOnPlatform: \" + this._isOnPlatform);\n            }    \n        }\n        else {\n            this._isOnPlatform = true;\n            this.debug(\"Running on the platform\");\n        }        \n    }\n\n    /**\n     * Initialize the websocket and add all event handlers local to this method.\n     * \n     * @listens {'open'} - when the websocket connection is opened\n     * @listens {'error'} - error on the websocket\n     * @listens {'close'} - when the websocket connection closes\n     * @listens {'message'} - when a message is received from the websocket\n     */\n    _initWebSocket() {        \n        if (this.isOnPlatform()) {\n            const url = \"ws://\" + this._ipAddress + \":\" + this._port;\n            this.debug(\"creating websocket: \" + url);\n\n            this._websocket = new WebSocket(url);\n\n            //\n            // Web socket Event Handlers\n            //\n\n            // Open\n            this._websocket.addEventListener('open', (event) => {                \n                this.debug(\"websocket: open\");    \n\n                // Set the severity on open so that JavaScript logged messages\n                // can be seen in the log.\n                this.setLogSeverity(this._severity);\n\n                // Flush the log message queue.\n                this._flushLogMsgQueue();\n            });\n\n            // Error\n            this._websocket.addEventListener('error', (event) => {\n                this.error(\"websocket error: \" + event.target.url);\n            });\n\n            // Close\n            this._websocket.addEventListener('close', (event) => {\n                this.error(\"websocket: close\");\n            });\n\n            // Message\n            this._websocket.addEventListener('message', (event) => {\n                this._onWebSocketMessage(event.data);\n            });\n        }\n    }\n\n    /**\n     * Handles converting the websocket message to an object and dispatching\n     * the event to the document.\n     * \n     * @param {Object} data \n     */\n    _onWebSocketMessage(data) {\n\n        this.debug(\"websocket message: \" + data);\n\n        // Handle JSON\n        try {\n            const obj = JSON.parse(data);\n\n            if (this._isObjectValid(obj)) {\n                this._dispatchEvent(obj);\n            }        \n            else {\n                this.error(\"websocket: invalid object from JSON: \" + data);\n            }\n        } \n        catch(e) {\n            this.error(\"websocket: failed to parse JSON: \" + data);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Platform/Desktop Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns true if running on the platform.\n     * \n     * @return {Boolean}\n     */\n    isOnPlatform() { return this._isOnPlatform; }\n\n    /**\n     * Returns true if running on the desktop.\n     * \n     * @return {Boolean}\n     */\n    isOnDesktop() { return !this._isOnPlatform; }\n\n    //--------------------------------------------------------------------------\n    // Log Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Logs a debug message.\n     * @param {String} message \n     */\n    debug(message) { this._logMsg(HJS.DEBUG, message); }\n\n    /**\n     * Logs an info message.\n     * @param {String} message \n     */\n    info(message) { this._logMsg(HJS.INFO, message); }\n\n    /**\n     * Logs a notice message.\n     * @param {String} message \n     */\n    notice(message) { this._logMsg(HJS.NOTICE, message); }    \n\n    /**\n     * Logs a warning message.\n     * @param {String} message \n     */\n    warning(message) { this._logMsg(HJS.WARNING, message); }\n\n    /**\n     * Logs an error message.\n     * @param {String} message \n     */\n    error(message) { this._logMsg(HJS.ERROR, message); }\n\n    /**\n     * Returns true if the severity is set to debug.\n     * \n     * @return {Boolean}\n     */\n    isDebug() { return this._severity == HJS.DEBUG; }\n\n    /**\n     * Sets the log severity locally and on the HTML renderer.\n     * \n     * @param {Number} severity - the level to set the severity\n     */\n    setLogSeverity(severity) {\n        this._severity = severity;\n\n        const obj = {\n            command: HJS.SET_LOG_SEVERITY,\n            severity: severity\n        };\n\n        this._sendObjToWebSocket(obj);\n    }    \n\n    /**\n     * Returns the log severity.\n     * \n     * @return {Number} the severity\n     */\n    getLogSeverity() {\n        return this._severity;\n    }    \n\n    //--------------------------------------------------------------------------\n    // Template Control Methods\n    //--------------------------------------------------------------------------    \n\n    /**\n     * Sets the IsLive flag on the shared surface.\n     * \n     * @param {Boolean} value - is live\n     */\n    setIsLive(value) {\n        const obj = {\n            command: HJS.SET_IS_LIVE_COMMAND,\n            value: (value) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj)\n    }\n\n    /**\n     * Sets the enable tick threshold messages flag on the shared surface.\n     * \n     * @param {Boolean} value - enable tick threshold messages\n     */\n    enableTickThresholdMsgs(value) {\n        const obj = {\n            command: HJS.ENABLE_TICK_THRESHOLD_MSGS_COMMAND,\n            value: (value) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sets the enable purge ticks flags on the share surface.\n     * \n     * @param {Boolean} value - enable purge ticks\n     */\n    enablePurgeTicks(value) {\n        const obj = {\n            command: HJS.ENABLE_PURGE_TICKS_COMMAND,\n            value: (value) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sets the content rect on the shared surface.\n     * \n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     */\n    setContentRect(x, y, width, height) {\n        const obj = {\n            command: HJS.SET_CONTENT_RECT_COMMAND,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        };\n        this._sendObjToWebSocket(obj);        \n    }\n\n    //--------------------------------------------------------------------------\n    // Signals\n    //--------------------------------------------------------------------------\n\n    /**\n     * Sends the Load Complete signal to the HTML renderer so that it can send\n     * the signal out template control d-bus.\n     * \n     * @param {Boolean} success \n     */\n    signalLoadComplete(success) {\n        const obj = {\n            command: HJS.SIGNAL_LOAD_COMPLETE_COMMAND,\n            success: (success) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sends the Preload Complete signal to the HTML renderer so that it can send\n     * the signal out template control d-bus.\n     * \n     * @param {Boolean} success \n     */\n    signalPreloadComplete(success) {\n        const obj = {\n            command: HJS.SIGNAL_PRELOAD_COMPLETE_COMMAND,\n            success: (success) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sends the Signal Template Playing signal to the HTML renderer so that it can send\n     * the signal out template control d-bus.\n     * \n     * @param {Boolean} playing \n     */\n    signalTemplatePlaying(playing) {\n        const obj = {\n            command: HJS.SIGNAL_TEMPLATE_STATE_COMMAND,\n            playing: (playing) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    //--------------------------------------------------------------------------\n    // Utilities\n    //--------------------------------------------------------------------------\n    /**\n     * Converts an URL to an URL that uses the graphics proxy located at\n     * GFXPROXY in the web server.  This function is useful to convert URLs\n     * to use the proxy server before performning a XMLHttpRequest.\n     * @return {String} - url converted to a proxy url (if necessary)\n     * \n     * @param {String} url - the url to convert\n     */\n    urlToProxyUrl(url) {\n        if (this.isOnPlatform()) {\n            if (url.startsWith('http://')) {    \n                let url_minus_the_protocol = url.substring(7);\n                let new_url = this.webServerOrigin + \"/\" + this.proxyLocation + \"/\" + url_minus_the_protocol;\n                return new_url;\n            }\n            else if (url.startsWith('https://')) {    \n                let url_minus_the_protocol = url.substring(8);\n                let new_url = this.webServerOrigin + \"/\" + this.proxyLocation + \"/\" + url_minus_the_protocol;\n                return new_url;\n            }\n            else {\n                return url;\n            }\n        }\n        else {\n            return url;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n    /**\n     * Returns the IP address of the web server using the window.location object.\n     * @return {String} the IP address\n     */\n    get webServerIpAddress() {\n        return window.location.hostname;\n    }\n\n    /**\n     * Returns the port of the web server using the window.location object.  If \n     * the port is empty, then 80 is returned.\n     * @return {Number} the port\n     */\n    get webServerPort() {\n        if (window.location.port) {\n            return window.location.port;\n        }\n\n        return 80;\n    }\n\n    /**\n     * Returns the origin of the web server using the window.location object. \n     * @return {String} the origin\n     */    \n    get webServerOrigin() {\n        return window.location.origin;\n    }\n\n    /**\n     * Returns the location of the graphic's proxy location.\n     * @return {String} the proxy location\n     */    \n    get proxyLocation() {\n        return \"GFXPROXY\";\n    }\n\n    /**\n     * Returns the IP address of the web socket interface.\n     * @return {String} the IP address\n     */\n    get ipAddress() {\n        return this._ipAddress;\n    }\n\n    /**\n     * Returns the port of the web socket interface.\n     * @return {Number} the port\n     */\n    get port() {\n        return this._port;\n    }\n\n    /**\n     * Returns the template name.\n     * @return {String} the name of the loaded template\n     */\n    get templateName() {\n        return this._templateName;\n    }\n\n    /**\n     * Sets the Template Path property on template control d-bus.\n     * \n     * @param {String} path \n     */\n    setTemplatePath(path) {\n        const obj = {\n            command: HJS.SET_TEMPLATE_PATH_COMMAND,\n            path: path\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sets the Template Description property on template control d-bus.\n     * \n     * @param {String} description \n     */\n    setTemplateDescription(description) {\n        const obj = {\n            command: HJS.SET_TEMPLATE_DESCRIPTION_COMMAND,\n            description: description\n        };\n        this._sendObjToWebSocket(obj);        \n    }\n\n    //--------------------------------------------------------------------------\n    // DVE\n    //--------------------------------------------------------------------------\n    /**\n     * Returns the value of the showDveSrcPreview.\n     * @return {Boolean} the value of the showDveSrcPreview URL parameter\n     */\n    get showDveSrcPreview() {\n        return this._showDveSrcPreview;\n    }\n\n    /**\n     * Sets the DVE parameters on the shared surface.\n     * \n     * @param {Object} params \n     */\n    setDVEParams(params) {\n\t \t// The command key and value will be provided by the client\n        this._sendObjToWebSocket(params);\n    }\n\n    //--------------------------------------------------------------------------\n    // Live Audio Voice-over (AVO)\n    //--------------------------------------------------------------------------\n    /**\n     * Sets the Live AVO IsLive flag on the shared surface.\n     * \n     * @param {Number} unit - Live AVO unit number\n     * @param {Boolean} isLive - true = is live, false = not live\n     */    \n    setLiveAVOIsLive(unit, isLive) {\n        const obj = {\n            command: HJS.SET_LIVE_AVO_IS_LIVE_COMMAND,\n            unit: unit,\n            isLive: (isLive) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);        \n    }\n\n    /**\n     * Sets the Live AVO enable flag on the shared surface.\n     * The enable is in the shared surface flags, but it \n     * is currently the only flag so having a dedicated\n     * function here makes sense.\n     * \n     * @param {Number} unit - Live AVO unit number\n     * @param {Boolean} enable - true = enable Live AVO, false = disable Live AVO\n     */    \n    enableLiveAVO(unit, enable) {\n        const obj = {\n            command: HJS.SET_LIVE_AVO_FLAGS_COMMAND,\n            unit: unit,\n            flags: (enable) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sets the IsGraphicsLive value on the shared surface.\n     * When this flag is set to false, the graphics generated\n     * by the running template will not be composited.  This\n     * is useful for templates that contain functionality but\n     * contains no graphics (DVE-only template, Live-AVO-only\n     * template, etc).\n     * @param {Boolean} enable \n     */\n    setIsGraphicsLive(enable) {\n        const obj = {\n            command: HJS.SET_IS_GRAPHICS_LIVE_COMMAND,\n            value: (enable) ? 1 : 0\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sent when ping is received from the HTML renderer.  This interface\n     * is used for debug and performance purposes only.\n     */\n    pong() {\n        const obj = {\n            command: HJS.PONG_COMMAND\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    //--------------------------------------------------------------------------\n    // Socket\n    //--------------------------------------------------------------------------\n    /**\n     * Sends the SOCKET_CONNECT command to the HTML renderer.\n     * @param {String} ipAddress \n     * @param {Number} port \n     * @param {Number} socketType \n     * @param {Number} timeoutInSec\n     */\n    connectSocket(ipAddress, port, socketType, timeoutInSec) {\n        const obj = {\n            command: HJS.SOCKET_CONNECT_COMMAND,\n            ipAddress: ipAddress,\n            port: port,\n            socketType: socketType,\n            timeoutInSec: timeoutInSec\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sends the SOCKET_DISCONNECT command to the HTML renderer.\n     * @param {Number} socketId \n     */\n    disconnectSocket(socketId) {\n        const obj = {\n            command: HJS.SOCKET_DISCONNECT_COMMAND,\n            socketId: socketId\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    /**\n     * Sends the SOCKET_WRITE command to the HTML renderer.\n     * @param {Number} socketId \n     * @param {String} data\n     */\n    writeSocket(socketId, data) {\n        const obj = {\n            command: HJS.SOCKET_WRITE_COMMAND,\n            socketId: socketId,\n            data: data\n        };\n        this._sendObjToWebSocket(obj);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n    /**\n     * Writes the message to the output if the severity is less than or equal\n     * to the current severity.\n     * \n     * @param {Number} severity \n     * @param {String} message \n     */\n    _logMsg(severity, message) {\n        if (severity <= this._severity) {            \n            if (this.isOnDesktop()) {\n                console.log(this._severityStr(severity) + \"HJS: \" + message);\n            }\n            else {\n                if ((this._websocket) && (this._websocket.readyState === 1)) {\n                    const obj = {\n                        command: HJS.LOG_MESSAGE_COMMAND,\n                        severity: severity,\n                        message: \"HJS: \" + message\n                    };\n                    this._sendObjToWebSocket(obj);\n\n                    if (this._isEmulatingPlatform) {\n                        console.log(this._severityStr(severity) + \"HJS: \" + message);\n                    }\n                }\n                else {\n                    let q = {\n                        severity: severity,\n                        message: message\n                    };\n\n                    // Adds to the beginning of the array\n                    this._queuedLogMsgs.unshift(q);\n                }\n            }\n        }\n    }\n\n    /**\n     * Flushes the log message queue.\n     */\n    _flushLogMsgQueue() \n    {\n        while (this._queuedLogMsgs.length > 0) {\n            let obj = this._queuedLogMsgs.pop();\n            this._logMsg(obj.severity, obj.message);\n        }\n    }\n\n    /**\n     * Returns the prefix of the message to output.\n     * \n     * @param {Number} severity \n     * @return {String}\n     */\n    _severityStr(severity) {\n        switch(severity) {\n            case HJS.EMERGENCY:\n            case HJS.ALERT:\n            case HJS.CRITICAL:\n            case HJS.ERROR:\n                return \"E: \";\n            case HJS.WARNING:\n                return \"W: \";\n            case HJS.NOTICE:\n                return \"N: \";\n            case HJS.INFO:\n                return \"I: \";\n            case HJS.DEBUG:\n                return \"D: \";\n            default:\n                return \"x: \";\n        }\n    }\n\n    /**\n     * Stringifies an object and sends it to the websocket.\n     * \n     * @param {Object} obj \n     */\n    _sendObjToWebSocket(obj) {\n        if (this.isOnPlatform()) {\n            // If the websocket is created and OPEN (1)\n            if ((this._websocket) && (this._websocket.readyState == 1)) {\n                this._websocket.send(JSON.stringify(obj));\n            }\n        }\n    }     \n\n    /**\n     * Dispatches the COMMAND_RECEIVED_EVENT on the document.\n     * \n     * @emits {HJS.COMMAND_RECEIVED_EVENT} when a valid message is received from the HTML renderer.\n     * \n     * @param {Object} detail \n     */\n    _dispatchEvent(detail) {\n        let event = new CustomEvent(HJS.COMMAND_RECEIVED_EVENT,\n            {\n                detail : detail\n            }\n        );\n\n        document.dispatchEvent(event);        \n    }  \n\n    /**\n     * Returns true if the object is valid and ready for dispatch.\n     * \n     * @param {Object} obj \n     */\n    _isObjectValid(obj) {\n        if (obj === undefined) {\n            return false;\n        }\n\n        if (obj.command === undefined) {\n            return false;\n        }\n\n        // All commands have 'tickid' except the INIT, PING, and SOCKET commands.\n        if ((obj.command != HJS.INIT_COMMAND) &&\n            (obj.command != HJS.PING_COMMAND) &&\n            (obj.command != HJS.SOCKET_CONNECT_COMMAND) &&\n            (obj.command != HJS.SOCKET_DISCONNECT_COMMAND) &&\n            (obj.command != HJS.SOCKET_DATA_COMMAND) &&\n            (obj.command != HJS.SOCKET_ERROR_COMMAND)) {\n            if (obj.tickid === undefined) {\n                return false;\n            }\n        }\n\n        switch (obj.command) {\n            case HJS.INIT_COMMAND:\n                if ((obj.alpha === undefined) ||\n                    (obj.isPreload === undefined) ||\n                    (obj.activeDimsW === undefined) ||\n                    (obj.activeDimsH === undefined) ||\n                    (obj.frameTime === undefined) ||\n                    (obj.isSecChannel === undefined) ||\n                    (obj.priChannelW === undefined) ||\n                    (obj.priChannelH === undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            case HJS.STOP_TEMPLATE_ANIMATION_COMMAND:\n                if (obj.immediate === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            case HJS.START_TEMPLATE_ANIMATION_COMMAND:\n            case HJS.RESTART_TEMPLATE_ANIMATION_COMMAND:\n            case HJS.RENDER_ALL_FIELDS_COMMAND:\n                return true;\n            case HJS.GOTO_FRAME_COMMAND:\n                if (obj.frame === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            case HJS.UPDATE_TEXT_FIELD_COMMAND:\n            case HJS.APPEND_TEXT_FIELD_COMMAND:\n                if ((obj.fieldNum === undefined) || \n                    (obj.text === undefined) || \n                    (obj.render === undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n            case HJS.UPDATE_IMAGE_FIELD_COMMAND:\n                if ((obj.fieldNum === undefined) || \n                    (obj.imagePath === undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n            case HJS.RENDER_FIELD_COMMAND:\n                if (obj.fieldNum === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n            case HJS.STOP_FIELD_ANIMATION_COMMAND:\n                if ((obj.fieldNum === undefined) || \n                    (obj.immediate === undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n            case HJS.RESTART_FIELD_ANIMATION_COMMAND:\n                if ((obj.fieldNum === undefined) ||\n                    (obj.fromBeginning === undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n            case HJS.ALPHA_NOT_ZERO_COMMAND:\n            case HJS.ALPHA_AT_MAX_COMMAND:\n                if (obj.alpha === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n\n            case HJS.ACTIVATE_COMMAND:\n                if (obj.alpha === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }  \n\n            case HJS.SOCKET_CONNECTED_COMMAND:\n                if ((obj.ipAddress == undefined) ||\n                    (obj.port == undefined) ||\n                    (obj.socketType == undefined) ||\n                    (obj.socketId == undefined)) {\n                        return false;\n                }\n                else {\n                    return true;\n                }  \n\n            case HJS.SOCKET_DISCONNECTED_COMMAND:\n                if (obj.socketId === undefined) {\n                    return false;\n                }\n                else {\n                    return true;\n                }                  \n\n            case HJS.SOCKET_DATA_COMMAND:\n                if ((obj.socketId === undefined) ||\n                    (obj.data == undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }                  \n\n            case HJS.SOCKET_ERROR_COMMAND:\n                if ((obj.ipAddress == undefined) ||\n                    (obj.port == undefined) ||\n                    (obj.socketType == undefined) ||\n                    (obj.socketId == undefined) ||\n                    (obj.errorCode == undefined)) {\n                    return false;\n                }\n                else {\n                    return true;\n                }                  \n                    \n            case HJS.PING_COMMAND:\n                return true;\n                \n            default:\n                this.error(\"Invalid command: \" + JSON.stringify(obj));            \n                return false;\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\n\n/**\n * Dispatched to the document when a command is received from the HTML renderer\n */\nHJS.COMMAND_RECEIVED_EVENT = \"HJS.CommandReceived\";\n\n//------------------------------------------------------------------------------\n// Logging Severity Constants\n//------------------------------------------------------------------------------\nHJS.EMERGENCY = 0; \nHJS.ALERT     = 1; \nHJS.CRITICAL  = 2;\nHJS.ERROR     = 3;\nHJS.WARNING   = 4;\nHJS.NOTICE    = 5;\nHJS.INFO      = 6;\nHJS.DEBUG     = 7;\n\n//------------------------------------------------------------------------------\n// Socket Constants\n//------------------------------------------------------------------------------\nHJS.SOCKET_TYPE_INVALID = -1;\nHJS.SOCKET_TYPE_TCP = 0;\nHJS.SOCKET_TYPE_UDP = 1;\nHJS.SOCKET_TYPE_MAX = 2;\n\n//------------------------------------------------------------------------------\n// Command Constants\n//------------------------------------------------------------------------------\n\n // From HTML Renderer\nHJS.INIT_COMMAND = 0;\nHJS.START_TEMPLATE_ANIMATION_COMMAND = 1\nHJS.STOP_TEMPLATE_ANIMATION_COMMAND  = 2;\nHJS.RESTART_TEMPLATE_ANIMATION_COMMAND = 3;\nHJS.GOTO_FRAME_COMMAND = 4;\nHJS.UPDATE_TEXT_FIELD_COMMAND = 5;\nHJS.APPEND_TEXT_FIELD_COMMAND = 6;\nHJS.UPDATE_IMAGE_FIELD_COMMAND = 7;\nHJS.RENDER_FIELD_COMMAND = 8;\nHJS.RENDER_ALL_FIELDS_COMMAND = 9;\nHJS.STOP_FIELD_ANIMATION_COMMAND = 10;\nHJS.RESTART_FIELD_ANIMATION_COMMAND = 11;\nHJS.ALPHA_NOT_ZERO_COMMAND = 12;\nHJS.ALPHA_AT_MAX_COMMAND = 13;\nHJS.ACTIVATE_COMMAND = 14;\nHJS.SOCKET_CONNECTED_COMMAND = 30;\nHJS.SOCKET_DISCONNECTED_COMMAND = 31;\nHJS.SOCKET_DATA_COMMAND = 32;\nHJS.SOCKET_ERROR_COMMAND = 33;\nHJS.PING_COMMAND = 100;\n\n// To HTML Renderer\nHJS.SIGNAL_LOAD_COMPLETE_COMMAND = 0;\nHJS.SIGNAL_PRELOAD_COMPLETE_COMMAND = 1;\nHJS.SIGNAL_TEMPLATE_STATE_COMMAND = 2;\nHJS.SET_TEMPLATE_PATH_COMMAND = 3;\n// Not used - HJS.SET_TEMPLATE_PLAYING_COMMAND = 4;  - use the SIGNAL_TEMPLATE_STATE_COMMAND instead.\nHJS.SET_TEMPLATE_DESCRIPTION_COMMAND = 5;\nHJS.SET_IS_LIVE_COMMAND = 20;\nHJS.ENABLE_TICK_THRESHOLD_MSGS_COMMAND = 21;\nHJS.ENABLE_PURGE_TICKS_COMMAND = 22;\nHJS.SET_CONTENT_RECT_COMMAND = 23;\nHJS.SET_DVE_PARAMS_COMMAND = 24;\nHJS.SET_LIVE_AVO_IS_LIVE_COMMAND = 25;\nHJS.SET_LIVE_AVO_FLAGS_COMMAND = 26;\nHJS.SET_IS_GRAPHICS_LIVE_COMMAND = 27;\nHJS.SOCKET_CONNECT_COMMAND = 30;\nHJS.SOCKET_DISCONNECT_COMMAND = 31;\nHJS.SOCKET_WRITE_COMMAND = 32;\nHJS.SET_LOG_SEVERITY = 98;\nHJS.LOG_MESSAGE_COMMAND = 99;\nHJS.PONG_COMMAND = 100;\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/hjs/hjs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "HJS",
    "memberof": "src/hjs/hjs.js",
    "static": true,
    "longname": "src/hjs/hjs.js~HJS",
    "access": "public",
    "export": false,
    "importPath": "./src/hjs/hjs.js",
    "importStyle": null,
    "description": "This class provides the interface to/from the HTML renderer.  It uses a \nwebsocket connection to send and receive data from the HTML renderer.\n\nThis class provides the following capabilities:\n- on platform vs. desktop detection\n- log message functionality (to console and system log)\n- individual interfaces for sending information to the HTML renderer\n- dispatches COMMAND_RECEIVED_EVENT when valid data is received from \n  the HTML renderer",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 257,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#constructor",
    "access": "public",
    "description": "Constructor \n- initializes all member variables.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.severity;",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "_config",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_config",
    "access": "private",
    "description": "The configuration used to construct HJS.  Reference {@link hjsConfig}",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "_severity",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_severity",
    "access": "private",
    "description": "The severity of the Log output.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "_queuedLogMsgs",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_queuedLogMsgs",
    "access": "private",
    "description": "A queue to log messages to before the websocket is ready.  Once\nthe websocket is opened, the severity will be sent followed by\nthe contents of the queue.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "_isOnPlatform",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_isOnPlatform",
    "access": "private",
    "description": "Flag indicating if the code is running on the platform or desktop.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "_isEmulatingPlatform",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_isEmulatingPlatform",
    "access": "private",
    "description": "Flag indicating if the browser is running on the desktop and the\nHTML renderer is running on the platform.  Used for debug purposes.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "_ipAddress",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_ipAddress",
    "access": "private",
    "description": "IP address of the websocket server.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "_port",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_port",
    "access": "private",
    "description": "Port of the websocket server.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "_templateName",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_templateName",
    "access": "private",
    "description": "The name of the loaded template.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "_showDveSrcPreview",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_showDveSrcPreview",
    "access": "private",
    "description": "Flag indicating if the DVE SrcPreview should be visible.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_websocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_websocket",
    "access": "private",
    "description": "The websocket to the HTML renderer.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "init",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#init",
    "access": "public",
    "description": "Initializes the websocket.  This must be called after the Harmonic\nTemplate is constructed or it may miss the INIT_COMMAND from \nthe HTML renderer.",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "_initFromURL",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_initFromURL",
    "access": "private",
    "description": "When running on the platform, the URL contains the ip address\nand the port of the websocket to connect to.  Use this information\nto determine if we are running on the platform vs. desktop and\nto make the websocket connection.",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "_initWebSocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_initWebSocket",
    "access": "private",
    "description": "Initialize the websocket and add all event handlers local to this method.",
    "lineNumber": 184,
    "listens": [
      {
        "types": [
          "'open'"
        ],
        "description": "when the websocket connection is opened"
      },
      {
        "types": [
          "'error'"
        ],
        "description": "error on the websocket"
      },
      {
        "types": [
          "'close'"
        ],
        "description": "when the websocket connection closes"
      },
      {
        "types": [
          "'message'"
        ],
        "description": "when a message is received from the websocket"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "_onWebSocketMessage",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_onWebSocketMessage",
    "access": "private",
    "description": "Handles converting the websocket message to an object and dispatching\nthe event to the document.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isOnPlatform",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#isOnPlatform",
    "access": "public",
    "description": "Returns true if running on the platform.",
    "lineNumber": 259,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isOnDesktop",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#isOnDesktop",
    "access": "public",
    "description": "Returns true if running on the desktop.",
    "lineNumber": 266,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "debug",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#debug",
    "access": "public",
    "description": "Logs a debug message.",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "info",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#info",
    "access": "public",
    "description": "Logs an info message.",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "notice",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#notice",
    "access": "public",
    "description": "Logs a notice message.",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "warning",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#warning",
    "access": "public",
    "description": "Logs a warning message.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "error",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#error",
    "access": "public",
    "description": "Logs an error message.",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "isDebug",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#isDebug",
    "access": "public",
    "description": "Returns true if the severity is set to debug.",
    "lineNumber": 307,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "setLogSeverity",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setLogSeverity",
    "access": "public",
    "description": "Sets the log severity locally and on the HTML renderer.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "severity",
        "description": "the level to set the severity"
      }
    ],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "getLogSeverity",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#getLogSeverity",
    "access": "public",
    "description": "Returns the log severity.",
    "lineNumber": 330,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the severity"
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "setIsLive",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setIsLive",
    "access": "public",
    "description": "Sets the IsLive flag on the shared surface.",
    "lineNumber": 343,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "is live"
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "enableTickThresholdMsgs",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#enableTickThresholdMsgs",
    "access": "public",
    "description": "Sets the enable tick threshold messages flag on the shared surface.",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "enable tick threshold messages"
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "enablePurgeTicks",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#enablePurgeTicks",
    "access": "public",
    "description": "Sets the enable purge ticks flags on the share surface.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "enable purge ticks"
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "setContentRect",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setContentRect",
    "access": "public",
    "description": "Sets the content rect on the shared surface.",
    "lineNumber": 385,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "signalLoadComplete",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#signalLoadComplete",
    "access": "public",
    "description": "Sends the Load Complete signal to the HTML renderer so that it can send\nthe signal out template control d-bus.",
    "lineNumber": 406,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "signalPreloadComplete",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#signalPreloadComplete",
    "access": "public",
    "description": "Sends the Preload Complete signal to the HTML renderer so that it can send\nthe signal out template control d-bus.",
    "lineNumber": 420,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "signalTemplatePlaying",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#signalTemplatePlaying",
    "access": "public",
    "description": "Sends the Signal Template Playing signal to the HTML renderer so that it can send\nthe signal out template control d-bus.",
    "lineNumber": 434,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "playing",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "urlToProxyUrl",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#urlToProxyUrl",
    "access": "public",
    "description": "Converts an URL to an URL that uses the graphics proxy located at\nGFXPROXY in the web server.  This function is useful to convert URLs\nto use the proxy server before performning a XMLHttpRequest.",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the url to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "url converted to a proxy url (if necessary)"
    }
  },
  {
    "__docId__": 309,
    "kind": "get",
    "name": "webServerIpAddress",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#webServerIpAddress",
    "access": "public",
    "description": "Returns the IP address of the web server using the window.location object.",
    "lineNumber": 481,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the IP address"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "webServerPort",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#webServerPort",
    "access": "public",
    "description": "Returns the port of the web server using the window.location object.  If \nthe port is empty, then 80 is returned.",
    "lineNumber": 490,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the port"
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "get",
    "name": "webServerOrigin",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#webServerOrigin",
    "access": "public",
    "description": "Returns the origin of the web server using the window.location object. ",
    "lineNumber": 502,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the origin"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "get",
    "name": "proxyLocation",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#proxyLocation",
    "access": "public",
    "description": "Returns the location of the graphic's proxy location.",
    "lineNumber": 510,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the proxy location"
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "get",
    "name": "ipAddress",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#ipAddress",
    "access": "public",
    "description": "Returns the IP address of the web socket interface.",
    "lineNumber": 518,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the IP address"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "get",
    "name": "port",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#port",
    "access": "public",
    "description": "Returns the port of the web socket interface.",
    "lineNumber": 526,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the port"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "get",
    "name": "templateName",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#templateName",
    "access": "public",
    "description": "Returns the template name.",
    "lineNumber": 534,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the name of the loaded template"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "setTemplatePath",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setTemplatePath",
    "access": "public",
    "description": "Sets the Template Path property on template control d-bus.",
    "lineNumber": 543,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "setTemplateDescription",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setTemplateDescription",
    "access": "public",
    "description": "Sets the Template Description property on template control d-bus.",
    "lineNumber": 556,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "get",
    "name": "showDveSrcPreview",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#showDveSrcPreview",
    "access": "public",
    "description": "Returns the value of the showDveSrcPreview.",
    "lineNumber": 571,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "the value of the showDveSrcPreview URL parameter"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "setDVEParams",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setDVEParams",
    "access": "public",
    "description": "Sets the DVE parameters on the shared surface.",
    "lineNumber": 580,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "setLiveAVOIsLive",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setLiveAVOIsLive",
    "access": "public",
    "description": "Sets the Live AVO IsLive flag on the shared surface.",
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "Live AVO unit number"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isLive",
        "description": "true = is live, false = not live"
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "enableLiveAVO",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#enableLiveAVO",
    "access": "public",
    "description": "Sets the Live AVO enable flag on the shared surface.\nThe enable is in the shared surface flags, but it \nis currently the only flag so having a dedicated\nfunction here makes sense.",
    "lineNumber": 612,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "Live AVO unit number"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": "true = enable Live AVO, false = disable Live AVO"
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "setIsGraphicsLive",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#setIsGraphicsLive",
    "access": "public",
    "description": "Sets the IsGraphicsLive value on the shared surface.\nWhen this flag is set to false, the graphics generated\nby the running template will not be composited.  This\nis useful for templates that contain functionality but\ncontains no graphics (DVE-only template, Live-AVO-only\ntemplate, etc).",
    "lineNumber": 630,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "pong",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#pong",
    "access": "public",
    "description": "Sent when ping is received from the HTML renderer.  This interface\nis used for debug and performance purposes only.",
    "lineNumber": 642,
    "params": [],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "connectSocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#connectSocket",
    "access": "public",
    "description": "Sends the SOCKET_CONNECT command to the HTML renderer.",
    "lineNumber": 659,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ipAddress",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutInSec",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "disconnectSocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#disconnectSocket",
    "access": "public",
    "description": "Sends the SOCKET_DISCONNECT command to the HTML renderer.",
    "lineNumber": 674,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "writeSocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#writeSocket",
    "access": "public",
    "description": "Sends the SOCKET_WRITE command to the HTML renderer.",
    "lineNumber": 687,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "socketId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "_logMsg",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_logMsg",
    "access": "private",
    "description": "Writes the message to the output if the severity is less than or equal\nto the current severity.",
    "lineNumber": 706,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "severity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "_flushLogMsgQueue",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_flushLogMsgQueue",
    "access": "private",
    "description": "Flushes the log message queue.",
    "lineNumber": 740,
    "params": [],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "_severityStr",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_severityStr",
    "access": "private",
    "description": "Returns the prefix of the message to output.",
    "lineNumber": 754,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "severity",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "_sendObjToWebSocket",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_sendObjToWebSocket",
    "access": "private",
    "description": "Stringifies an object and sends it to the websocket.",
    "lineNumber": 779,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_dispatchEvent",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_dispatchEvent",
    "access": "private",
    "description": "Dispatches the COMMAND_RECEIVED_EVENT on the document.",
    "lineNumber": 795,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "detail",
        "description": ""
      }
    ],
    "emits": [
      {
        "types": [
          "HJS.COMMAND_RECEIVED_EVENT"
        ],
        "description": "when a valid message is received from the HTML renderer."
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "_isObjectValid",
    "memberof": "src/hjs/hjs.js~HJS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/hjs/hjs.js~HJS#_isObjectValid",
    "access": "private",
    "description": "Returns true if the object is valid and ready for dispatch.",
    "lineNumber": 810,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "src/widgets/harmonic-countdown.js",
    "content": "/**\n * File:  harmonic-countdown.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The HarmonicCountdown widget provides a countdown text field that can\n * be controlled with the widget controls.\n *\n * This class implements the Harmonic Countdown Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicCountdown widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n *   This text object represents the dynamic text field.\n *\n * This class defines functions for:\n *\n * - updateTextField - converts the text to a number and updates the countdown\n * - restartFieldAnimation - restarts the countdown\n * - stopFieldAnimation - stops the countdown\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicCountdown object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n * The 'countdownFrom' can be specified in the register function or it\n * can be set using the 'countdownFrom' property on the object returned from\n * the call to register.\n *\n * When the countdown reaches zero, the widget will dispatch the\n * HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT event on the document.\n *\n * The manualControl property allows the countdown to manually controlled\n * independently from the start/stop field animation controls.  This may\n * be useful for countdown timers that need to start in the middle of an\n * animation.\n *\n * @example\n * 1. When the createjs object is registered with the class in the first frame of the movie clip:\n * let countdown = HarmonicCountdown.register(this, 20, false);  // set countdown to 20 seconds with no manual control\n *\n * 2. Or set the 'countdownFrom' property from the returned object:\n * let countdown = HarmonicCountdown.register(this);\n * countdown.countdownFrom = 20;\n *\n * document.addEventListener(HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT, (event) => {\n *     hjs.info(\"The countdown has completed\");\n * });\n */\nclass HarmonicCountdown extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     * - adds a listener to the 'tick' event so that the count can be updated\n     *\n     * @listens {'tick'} the countdown is updated every tick\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     * @param {Object} includeInTemplateDescription - if true, the Harmonic Template will include in the template description\n     * @param {Number} countdownFrom - number in seconds to countdown from\n     * @param {Boolean} manualControl - manual control of the countdown\n     */\n    constructor(widgetType, fieldNum, name, createjsObj, countdownFrom, manualControl) {\n        super(widgetType, fieldNum, name, createjsObj, true);\n\n        hjs.debug(\"HarmonicCountdown.constructor\");\n\n        /**\n         * Flag indicating if the countdown is started.\n         * @type {Boolean}\n         */\n        this._isStarted = false;\n\n        /**\n         * Flag indicating if the countdown is manually controlled.  If manually\n         * controlled, then the widget will not respond to the start and stop animation\n         * events.\n         * @type {Boolean}\n         */\n        this._manualControl = manualControl;\n\n        /**\n         * The countdownFrom property.\n         * @type {Number}\n         */\n\t\tthis._countdownFrom = countdownFrom;\n\n        /**\n         * Current value of the countdown (in seconds).\n         * @type {Number}\n         */\n        this._countdown = countdownFrom;\n\n        /**\n         * Milliseconds per tick event.\n         * @type {Number}\n         */\n        this._msPerTick = 0;\n\n        // Determine the milliseconds per tick based on the frame rate\n        const fps = createjs.Ticker.framerate;\n        if ((fps >= 59.8) && (fps <= 60.2)) {\n            this._msPerTick = 1001/60000;\n        }\n        else {\n            this._msPerTick = 1/fps;\n        }\n\n        // Listen for the 'tick' event on the object\n        createjsObj.addEventListener(\"tick\", (event) => {\n            this._onTick();\n        });\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicCountdown will be created in this function.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with the countdown\n     * @param {Number} countdownFrom - number of seconds to countdown from\n     * @param {Boolean} manualControl - true = manually control the countdown\n     *\n     * @return {Object} the newly created HarmonicCountdown instance, or undefined if there is an error\n     */\n    static register(createjsObj, countdownFrom = 0, manualControl = false) {\n        let result = HarmonicWidget.validate(\"HarmonicCountdown\", createjsObj, true);\n        if (result) {\n            return new HarmonicCountdown(HarmonicTemplate.WIDGET_TYPE_COUNTDOWN, result.fieldNum, result.name, createjsObj, countdownFrom, manualControl);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public Methods and Properties\n    //--------------------------------------------------------------------------\n    /**\n     * Starts the countdown from the countdownFrom value.\n     */\n    start() {\n        this._isStarted = true;\n        this._countdown = this._countdownFrom;\n    }\n\n    /**\n     * Resumes the countdown.\n     */\n    resume() {\n        this._isStarted = true;\n    }\n\n    /**\n     * Stops the countdown.\n     */\n    stop() {\n        this._isStarted = false;\n    }\n\n    /**\n     * Sets the countdownFrom value.\n     * @param {Number} value - the number of seconds to countdown from\n     */\n    set countdownFrom(value) {\n        this._countdownFrom = value;\n    }\n\n    /**\n     * Gets the countdownFrom value.\n     * @return {Number}\n     */\n    get countdownFrom() {\n        return this._countdownFrom;\n    }\n\n    /**\n     * Gets the current value of the countdown.\n     * @return {Number}\n     */\n    get countdown() {\n        return this._countdown;\n    }\n\n    /**\n     * Set the manualControl value.\n     * @param {Boolean} value - true = enable, false = disable\n     */\n    set manualControl(value) {\n        this._manualControl = value;\n    }\n\n    /**\n     * Gets the manualControl value.\n     * @return {Boolean}\n     */\n    get manualControl() {\n        return this._manualControl;\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     *\n     * @param {String} text - a string representation of the number to set the countdown to\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._countdownFrom = parseInt(text);\n        this._countdown = this._countdownFrom;\n    }\n\n    /**\n     * Handles the restartFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} fromBeginning - flag indicating if the widget should restart animation from the beginning\n     */\n    restartFieldAnimation(fromBeginning) {\n        if (this._manualControl) {\n            return;\n        }\n\n        if (fromBeginning) {\n            this._countdown = this._countdownFrom;\n        }\n\n        this._isStarted = true;\n    }\n\n    /**\n     * Handles the stopFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} immediate - flag indicating if the widget should stop immediately or at the end of the animation\n     */\n    stopFieldAnimation(immediate) {\n        if (this._manualControl) {\n            return;\n        }\n\n        if (immediate) {\n            this._isStarted = false;\n        }\n    }\n\n    /**\n     * 'tick' handler that updates the countdown\n     *\n     * @emits {HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT} dispatched when the countdown to zero completes\n     */\n    _onTick() {\n        if (this._isStarted) {\n            if (this._countdown < 0) {\n                this._isStarted = false;\n\n                // Dispatch the complete event when the countdown finishes.\n                let event = new CustomEvent(HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT,\n                    {\n                        detail : this\n                    }\n                );\n\n                document.dispatchEvent(event);\n            }\n            else {\n                this._countdown -= this._msPerTick;\n            }\n\n            this._updateCountdown(this._countdown);\n        }\n    }\n\n    /**\n     * Updates the createjs object's text with the value from countdown.\n     *\n     * @param {Number} countdown - the count value to display\n     */\n    _updateCountdown(countdown) {\n        if (countdown >= 0) {\n            const hours = Math.floor(countdown / 3600);\n            const minutes = Math.floor((countdown % 3600) / 60);\n            const seconds = Math.floor(countdown % 60);\n            let text = \"\";\n\n            if (hours > 0) {\n                text += hours.toString() + \":\";\n            }\n\n            if (minutes == 0) {\n                if (hours > 0) {\n                    text += \"00\";\n                }\n\n                text += \":\";\n            }\n            else if (minutes < 10) {\n                if (hours > 0) {\n                    text += \"0\" + minutes.toString() + \":\";\n                }\n                else {\n                    text += minutes + \":\";\n                }\n            }\n            else {\n                text += minutes + \":\";\n            }\n\n            if (seconds < 10) {\n                text += \"0\" + seconds;\n            }\n            else {\n                text += seconds;\n            }\n\n            this._createjsObj.harmonicField.text = text;\n        }\n        else {\n            this._createjsObj.harmonicField.text = \"\";\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\nHarmonicCountdown.COUNTDOWN_COMPLETE_EVENT = \"CountdownCompleteEvent\";\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-countdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "HarmonicCountdown",
    "memberof": "src/widgets/harmonic-countdown.js",
    "static": true,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-countdown.js",
    "importStyle": null,
    "description": "The HarmonicCountdown widget provides a countdown text field that can\nbe controlled with the widget controls.\n\nThis class implements the Harmonic Countdown Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicCountdown widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n  This text object represents the dynamic text field.\n\nThis class defines functions for:\n\n- updateTextField - converts the text to a number and updates the countdown\n- restartFieldAnimation - restarts the countdown\n- stopFieldAnimation - stops the countdown\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicCountdown object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.\n\nThe 'countdownFrom' can be specified in the register function or it\ncan be set using the 'countdownFrom' property on the object returned from\nthe call to register.\n\nWhen the countdown reaches zero, the widget will dispatch the\nHarmonicCountdown.COUNTDOWN_COMPLETE_EVENT event on the document.\n\nThe manualControl property allows the countdown to manually controlled\nindependently from the start/stop field animation controls.  This may\nbe useful for countdown timers that need to start in the middle of an\nanimation.",
    "examples": [
      "1. When the createjs object is registered with the class in the first frame of the movie clip:\nlet countdown = HarmonicCountdown.register(this, 20, false);  // set countdown to 20 seconds with no manual control\n\n2. Or set the 'countdownFrom' property from the returned object:\nlet countdown = HarmonicCountdown.register(this);\ncountdown.countdownFrom = 20;\n\ndocument.addEventListener(HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT, (event) => {\n    hjs.info(\"The countdown has completed\");\n});"
    ],
    "lineNumber": 58,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 335,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables\n- adds a listener to the 'tick' event so that the count can be updated",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "includeInTemplateDescription",
        "description": "if true, the Harmonic Template will include in the template description"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "countdownFrom",
        "description": "number in seconds to countdown from"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "manualControl",
        "description": "manual control of the countdown"
      }
    ],
    "listens": [
      {
        "types": [
          "'tick'"
        ],
        "description": "the countdown is updated every tick"
      }
    ]
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "_isStarted",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_isStarted",
    "access": "private",
    "description": "Flag indicating if the countdown is started.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "_manualControl",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_manualControl",
    "access": "private",
    "description": "Flag indicating if the countdown is manually controlled.  If manually\ncontrolled, then the widget will not respond to the start and stop animation\nevents.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "_countdownFrom",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_countdownFrom",
    "access": "private",
    "description": "The countdownFrom property.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "_countdown",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_countdown",
    "access": "private",
    "description": "Current value of the countdown (in seconds).",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "_msPerTick",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_msPerTick",
    "access": "private",
    "description": "Milliseconds per tick event.",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicCountdown will be created in this function.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with the countdown"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "countdownFrom",
        "description": "number of seconds to countdown from"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "manualControl",
        "description": "true = manually control the countdown"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicCountdown instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "start",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#start",
    "access": "public",
    "description": "Starts the countdown from the countdownFrom value.",
    "lineNumber": 153,
    "params": [],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "resume",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#resume",
    "access": "public",
    "description": "Resumes the countdown.",
    "lineNumber": 161,
    "params": [],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "stop",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#stop",
    "access": "public",
    "description": "Stops the countdown.",
    "lineNumber": 168,
    "params": [],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "set",
    "name": "countdownFrom",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#countdownFrom",
    "access": "public",
    "description": "Sets the countdownFrom value.",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the number of seconds to countdown from"
      }
    ]
  },
  {
    "__docId__": 353,
    "kind": "get",
    "name": "countdownFrom",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#countdownFrom",
    "access": "public",
    "description": "Gets the countdownFrom value.",
    "lineNumber": 184,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "get",
    "name": "countdown",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#countdown",
    "access": "public",
    "description": "Gets the current value of the countdown.",
    "lineNumber": 192,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "set",
    "name": "manualControl",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#manualControl",
    "access": "public",
    "description": "Set the manualControl value.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = enable, false = disable"
      }
    ]
  },
  {
    "__docId__": 357,
    "kind": "get",
    "name": "manualControl",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#manualControl",
    "access": "public",
    "description": "Gets the manualControl value.",
    "lineNumber": 208,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "a string representation of the number to set the countdown to"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#restartFieldAnimation",
    "access": "public",
    "description": "Handles the restartFieldAnimation request from the Harmonic Template.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "flag indicating if the widget should restart animation from the beginning"
      }
    ],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#stopFieldAnimation",
    "access": "public",
    "description": "Handles the stopFieldAnimation request from the Harmonic Template.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "flag indicating if the widget should stop immediately or at the end of the animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "_onTick",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_onTick",
    "access": "private",
    "description": "'tick' handler that updates the countdown",
    "lineNumber": 264,
    "emits": [
      {
        "types": [
          "HarmonicCountdown.COUNTDOWN_COMPLETE_EVENT"
        ],
        "description": "dispatched when the countdown to zero completes"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "_updateCountdown",
    "memberof": "src/widgets/harmonic-countdown.js~HarmonicCountdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-countdown.js~HarmonicCountdown#_updateCountdown",
    "access": "private",
    "description": "Updates the createjs object's text with the value from countdown.",
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "countdown",
        "description": "the count value to display"
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/widgets/harmonic-dve.js",
    "content": "/**\n * File: harmonic-dve.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n /**\n * The HarmonicDVE widget provides control of the system's DVE.\n *\n * The HarmonicDVE widget requires 5 createjs.MovieClips.  Each movie clip\n * represents a different portion of the DVE control.  The DVE widgets in\n * the Harmonic Template Widget Library have already been defined for your\n * convenience.  This class just needs access to them.\n *\n * The 5 widgets that are needed are:\n * - SrcPreview - used to preview the DVE in the desktop environment\n * - SrcRegion - provides crop functionality\n * - DstRegion - provides down-scale and position functionality\n * - AudioDuckLevel - provides duck control on the audio voice-over unit\n * - AudioMixLevel - provides mix control on the audio voice-over unit\n *\n * In order to properly use this class, it is highly-recommended to simply\n * start with one of the blank dve templates.  These template were created\n * to allow users to get up-and-running quickly.\n *\n * There are many properties associated with the DVE.  These properties are:\n * - enable - enables/disable the DVE\n * - enableHPT - enables/disables the hole punch technology\n * - srcSelect - the DVE source\n * - blendMode - blend with graphics vs. blend with video\n * - stackPosition - top vs. bottom\n * - relativePosition - DVE0 on top vs. DVE1 on top (dual DVE only)\n */\nclass HarmonicDVE {\n\n    /**\n     * Constructor\n     *\n     * @param {Number} unit - DVE unit number (0-1)\n     */\n    constructor(unit) {\n        hjs.debug(\"HarmonicDVE.constructor: unit: \" + unit);\n\n        /**\n         * DVE unit number\n         * @type {Number}\n         */\n        this._unit = unit;\n\n        /**\n         * Flag indicating if the DVE is valid.\n         * @type {Boolean}\n         */\n        this._isValidDve = false;\n\n        //----------------------------------------------------------------------\n        // DVE properties\n        //----------------------------------------------------------------------\n\n        /**\n         * Flag indicating if the DVE is live.\n         * @type {Boolean}\n         */\n        this._isLive = false;\n\n        /**\n         * Flag indicating if the DVE is enabled.\n         * @type {Boolean}\n         */\n        this._enable = true;\n\n        /**\n         * Flag indicating if the DVE Hole Punch Technology is enabled.\n         * @type {Boolean}\n         */\n        this._enableHPT = true;\n\n        /**\n         * DVE's source selection.\n         * @type {Number}\n         */\n        this._srcSelect = HarmonicDVE.SRC_UNSPECIFIED;\n\n        /**\n         * DVE's blend mode.\n         * @type {Number}\n         */\n        this._blendMode = HarmonicDVE.BLEND_WITH_VIDEO;\n\n        /**\n         * DVE's stack position.\n         * @type {Number}\n         */\n        this._stackPosition = HarmonicDVE.TOP_MOST_STACK_POSITION;\n\n        /**\n         * DVE's relative position (for enhanced channel).\n         * @type {Number}\n         */\n        this._relativePosition = HarmonicDVE.RELATIVE_POSITION_0;\n\n        //----------------------------------------------------------------------\n        // Variables to hold the createjs objects.\n        //----------------------------------------------------------------------\n\n        /**\n         * Src Preview object\n         * @type {Object}\n         */\n        this._srcPreview = undefined;\n\n        /**\n         * Src Region object\n         * @type {Object}\n         */\n        this._srcRegion = undefined;\n\n        /**\n         * Dst Region object\n         * @type {Object}\n         */\n        this._dstRegion = undefined;\n\n        /**\n         * Audio Duck object\n         * @type {Object}\n         */\n        this._audioDuckLevel = undefined;\n\n        /**\n         * Audio Mix object\n         * @type {Object}\n         */\n\n        this._audioMixLevel = undefined;\n\n        //----------------------------------------------------------------------\n        // Initialize the elements that reside in the srcPreview MovieClip\n        //----------------------------------------------------------------------\n        /**\n         * The object that represents the Src Preview.\n         * @type {createjs.MovieClip}\n         */\n        this._srcPreviewMovieClip = new createjs.MovieClip();\n\n        /**\n         * The Src Preview bitmap object.\n         * @type {Object}\n         */\n        this._srcPreviewBitmap = undefined;\n\n        /**\n         * The Src Preview Red X object.\n         * @type {Object}\n         */\n        this._srcPreviewX = undefined;\n\n        /**\n         * DVE parameters for the shared surface.\n         * @type {Object}\n         */\n        this._params = {\n            command: HJS.SET_DVE_PARAMS_COMMAND,\n            unit: unit,\n            isLive: 0,\n            srcSelect: HarmonicDVE.SRC_UNSPECIFIED,\n            relativePosition: 0,\n            flags: 0,\n            isDirty: 0,\n            alpha: 0.0,\n            srcRectX: 0,\n            srcRectY: 0,\n            srcRectW: 0,\n            srcRectH: 0,\n            dstRectX: 0,\n            dstRectY: 0,\n            dstRectW: 0,\n            dstRectH: 0,\n            audioDuckLevel: 0.0,\n            audioMixLevel: 1.0\n        };\n    }\n\n    /**\n     * Register the objects that represent the DVE objects.\n     * These objects must be MovieClips for the rest of the code to work properly.\n     *\n     * @param {Object} dstRegion - createjs object that represents the dst region\n     * @param {Object} srcRegion - createjs object that represents the src region\n     * @param {Object} srcPreview - createjs object that represents the src preview\n     * @param {Object} audioDuckLevel - createjs object that represents the audio duck level\n     * @param {Object} audioMixLevel - createjs object that represents the audio mix level\n     *\n     * @return {Boolean} - true if registration was successful, false otherwise.\n     */\n    register(dstRegion, srcRegion, srcPreview, audioDuckLevel, audioMixLevel) {\n        if ((this._dstRegion === undefined) &&\n            (this._srcRegion === undefined) &&\n            (this._srcPreview === undefined) &&\n            (this._audioDuckLevel === undefined) &&\n            (this._audioMixLevel === undefined)) {\n\n            hjs.debug(\"HarmonicDVE.register: unit: \" + this._unit);\n\n            if (!(dstRegion instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicDVE.register: DstRegion is not a container\");\n                return false;\n            }\n\n            if (!(srcRegion instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicDVE.register: SrcRegion is not a container\");\n                return false;\n            }\n\n            if (!(srcPreview instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicDVE.register: SrcPreview is not a container\");\n                return false;\n            }\n\n            if (!(audioDuckLevel instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicDVE.register: AudioDuckLevel is not a container\");\n                return false;\n            }\n\n            if (!(audioMixLevel instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicDVE.register: AudioMixLevel is not a container\");\n                return false;\n            }\n\n            this._dstRegion = dstRegion;\n            this._srcRegion = srcRegion;\n            this._srcPreview = srcPreview;\n            this._audioDuckLevel = audioDuckLevel;\n            this._audioMixLevel = audioMixLevel;\n\n            this._init();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * After successful registration, this method will initialize everything\n     * necessary for the DVE to function.\n     *\n     * @listens {HarmonicTemplate.VISIBLE_EVENT} when the template is visible\n     * @listens {'tickend'} when the tick ends its processing\n     */\n    _init() {\n        this._isValidDve = true;\n\n        // Make all objects invisible.\n        this._dstRegion.visible = false;\n        this._srcRegion.visible = false;\n        this._srcPreview.visible = false;\n\n        if (hjs.showDveSrcPreview) {\n            this._desktopCreateSrcPreviewMovieClip();\n        }\n\n        // Listen for the VISIBLE_EVENT.  This will set the visible flag to\n        // true.\n        document.addEventListener(HarmonicTemplate.VISIBLE_EVENT, (event) => {\n            if (this._isValidDve) {\n                this._isLive = true;\n            }\n        });\n\n        // Only listen for 'tickend' when all components have been registered.\n        stage.addEventListener('tickend', (event) => {\n            this._onTickEnd();\n        });\n    }\n\n    /**\n     * This method is called when the stage dispatches the 'tickend' event.\n     * At this time, the DVE logic needs to be run.  There are slightly\n     * different implementations between the platform and the desktop.\n     */\n    _onTickEnd() {\n        if (hjs.showDveSrcPreview) {\n            this._onTickEndShowDveSrcPreview();\n        }\n        else {\n            if (hjs.isOnPlatform()) {\n                this._tickEndOnPlatform();\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Platform Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * This method provides the platform DVE functionality.  All DVE data is\n     * packed into an object and sent to the HTML renderer via websockets.\n     */\n    _tickEndOnPlatform() {\n\n        let srcRegionBounds = this._srcRegion.getTransformedBounds();\n        let dstRegionBounds = this._dstRegion.getTransformedBounds();\n        let flags = 0x00;\n\n        if (!srcRegionBounds) {\n            hjs.error(\"HarmonicDVE._tickCompleteOnPlatform: srcRegion bounds is null\");\n            return;\n        }\n\n        if (!dstRegionBounds) {\n            hjs.error(\"HarmonicDVE._tickCompleteOnPlatform: dstRegion bounds is null\");\n            return;\n        }\n\n        // Initialize a local params - need command and unit.  Copy them from the\n        // member variable.\n        let params = {\n            command: this._params.command,\n            unit: this._params.unit\n        };\n\n        params.isLive = (this.isLive) ? 1 : 0;\n        params.srcSelect = this.srcSelect;\n        params.relativePosition = this.relativePosition;\n        params.isDirty = 1;\n\n        // Set the proper flags.\n        if (this.enable) {\n            flags |= HarmonicDVE.FLAG_ENABLE;\n        }\n\n        if (this.enableHPT) {\n            flags |= HarmonicDVE.FLAG_ENABLE_HOLEPUNCH;\n        }\n\n        if (this.blendMode == HarmonicDVE.BLEND_WITH_GRAPHICS) {\n            flags |= HarmonicDVE.FLAG_BLEND_MODE_WITH_GRAPHICS;\n        }\n\n        if (this.stackPosition == HarmonicDVE.TOP_MOST_STACK_POSITION) {\n            flags |= HarmonicDVE.FLAG_STACK_POS_TOP_MOST;\n        }\n\n        params.flags = flags;\n\n        // SrcRegion properties\n        params.srcRectX = Math.round(srcRegionBounds.x);\n        params.srcRectY = Math.round(srcRegionBounds.y);\n        params.srcRectW = Math.round(srcRegionBounds.width);\n        params.srcRectH = Math.round(srcRegionBounds.height);\n\n        if (params.srcRectW <= 1) {\n            params.srcRectW = 1;\n        }\n\n        if (params.srcRectH <= 1) {\n            params.srcRectH = 1;\n        }\n\n        // DstRegion properties\n        params.alpha = this._dstRegion.alpha;\n        params.dstRectX = Math.round(dstRegionBounds.x);\n        params.dstRectY = Math.round(dstRegionBounds.y);\n        params.dstRectW = Math.round(dstRegionBounds.width);\n        params.dstRectH = Math.round(dstRegionBounds.height);\n\n        if (params.dstRectW <= 1) {\n            params.dstRectW = 1;\n        }\n\n        if (params.dstRectH <= 1) {\n            params.dstRectH = 1;\n        }\n\n        // Audio levels are determined by the alpha on the createjs objects.\n        params.audioDuckLevel = this._audioDuckLevel.alpha;\n        params.audioMixLevel = this._audioMixLevel.alpha;\n\n        // Only send the DVE params if differences are found.\n        let differenceFound = false;\n        for (const key in this._params) {\n            if (this._params[key] != params[key]) {\n                this._params[key] = params[key];\n                differenceFound = true;\n            }\n        }\n\n        if (differenceFound) {\n            // hjs.debug(JSON.stringify(this._params));\n\n            hjs.setDVEParams(this._params);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Desktop Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * This method provides the functionality required to show the DVE\n     * Src Preview.\n     */\n    _onTickEndShowDveSrcPreview() {\n\n        // Get the bounds of the src and dst regions.  Round the widths and heights.\n        let srcRegionBounds = this._srcRegion.getTransformedBounds();\n        let dstRegionBounds = this._dstRegion.getTransformedBounds();\n\n        srcRegionBounds.width = Math.round(srcRegionBounds.width);\n        srcRegionBounds.height = Math.round(srcRegionBounds.height);\n        dstRegionBounds.width = Math.round(dstRegionBounds.width);\n        dstRegionBounds.height = Math.round(dstRegionBounds.height);\n\n        // Crop\n        // - The crop is done by setting the sourceRect on the bitmap.  The source\n        //   rect is defined by the srcRegionBounds.\n        this._srcPreviewBitmap.sourceRect = new createjs.Rectangle(srcRegionBounds.x, srcRegionBounds.y, srcRegionBounds.width, srcRegionBounds.height);\n\n        // Position and Scale\n        // - Position and scale the bitmap by setting a transform on the bitmpa.\n        //   Use the dst region and src region to determine the scale ratio.\n        let x = dstRegionBounds.x;\n        let y = dstRegionBounds.y;\n        let scaleX = dstRegionBounds.width / srcRegionBounds.width;\n        let scaleY = dstRegionBounds.height / srcRegionBounds.height;\n\n        // If the scale is > 1 in any direction, then display the X\n        if ((scaleX > 1) || (scaleY > 1)) {\n            hjs.error(\"HarmonicDVE: unit: \" + this._unit + \" frame: \" + exportRoot.currentFrame + \" dstRegion (\" + dstRegionBounds.width + \"x\" + dstRegionBounds.height + \") must be less than or equal to the srcRegion (\" + srcRegionBounds.width + \"x\" + srcRegionBounds.height + \")\");\n\n            let srcPreviewBounds = this._srcPreviewMovieClip.getTransformedBounds();\n            this._srcPreviewX.scaleX = dstRegionBounds.width / srcPreviewBounds.width;\n            this._srcPreviewX.scaleY = dstRegionBounds.height / srcPreviewBounds.height;\n            this._srcPreviewX.visible = true;\n        }\n        else {\n            this._srcPreviewX.visible = false;\n        }\n\n        this._srcPreviewMovieClip.setTransform(x, y, scaleX, scaleY);\n\n        // Update properties based on the DVE parameters.\n        this._srcPreviewMovieClip.alpha = this._dstRegion.alpha;\n        this._srcPreviewMovieClip.visible = this.enable;\n\n        // Add the preview to the stage based on the stack position.\n        stage.removeChild(this._srcPreviewMovieClip);\n        if (this.stackPosition == HarmonicDVE.TOP_MOST_STACK_POSITION) {\n            stage.addChild(this._srcPreviewMovieClip);\n        }\n        else {\n            stage.addChildAt(this._srcPreviewMovieClip, 0);\n        }\n    }\n\n    /**\n     * Creates all necessary elements needed to emulate the DVE in the desktop\n     * environment.  It will create a src preview bitmap (full size) and\n     * a red X that will be used to show invalid configurations.\n     */\n    _desktopCreateSrcPreviewMovieClip() {\n        let srcPreview = this._srcPreview;\n        let bounds = srcPreview.getBounds();\n        if (bounds) {\n\n            // Cache the source preview\n            srcPreview.cache(bounds.x, bounds.y, bounds.width, bounds.height, srcPreview.scaleX);\n\n            if (srcPreview.cacheCanvas) {\n                // CreateJS 1.0.0\n                // - Use the srcPreview's cacheCanvas object to create the srcPreview bitmap.\n                this._srcPreviewBitmap = new createjs.Bitmap(srcPreview.cacheCanvas);\n            }\n            else {\n                // CreateJS 0.8.2\n                // - Get an URL to the cached data and then use the URL to create the\n                //   srcPreview bitmap.\n                let url = srcPreview.getCacheDataURL();\n                this._srcPreviewBitmap = new createjs.Bitmap(url);\n            }\n\n            bounds.width = srcPreview.cacheCanvas.width;\n            bounds.height = srcPreview.cacheCanvas.height;\n            this._srcPreviewBitmap.setBounds(bounds.x, bounds.y, bounds.width, bounds.height); // bounds.width * srcPreview.scaleX, bounds.height * srcPreview.scaleY);\n\n            //\n            // Create the X\n            //\n            this._srcPreviewX = new createjs.Shape();\n            const thickness = 32;\n            const halfThickness = thickness / 2;\n\n            this._srcPreviewX.graphics.setStrokeStyle(32);\n            this._srcPreviewX.graphics.beginStroke(\"rgba(255,0,0,1.0)\").beginFill(\"rgba(255,0,0,0.5)\").drawRect(halfThickness, halfThickness, bounds.width - thickness, bounds.height - thickness);\n            this._srcPreviewX.graphics.moveTo(0,0).lineTo(bounds.width - halfThickness, bounds.height - halfThickness);\n            this._srcPreviewX.graphics.moveTo(0,bounds.height - halfThickness).lineTo(bounds.width - halfThickness, 0);\n            this._srcPreviewX.cache(bounds.x, bounds.y, srcPreview.cacheCanvas.width, srcPreview.cacheCanvas.height);\n\n            //\n            // Add new objects to the movie clip\n            //\n            this._srcPreviewMovieClip.addChild(this._srcPreviewBitmap);\n            this._srcPreviewMovieClip.addChild(this._srcPreviewX);\n        }\n        else {\n            hjs.error(\"HarmonicDVE - srcPreview.getBounds() returned null\");\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters and Setters\n    //--------------------------------------------------------------------------\n    get unit() { return this._unit; }\n    get isLive() { return this._isLive; }\n    get enable() { return this._enable; }\n    get enableHPT() { return this._enableHPT; }\n    get srcSelect() { return this._srcSelect; }\n    get blendMode() { return this._blendMode; }\n    get stackPosition() { return this._stackPosition; }\n    get relativePosition() { return this._relativePosition; }\n\n    set enable(value) { this._enable = value; }\n    set enableHPT(value) { this._enableHPT = value; }\n    set srcSelect(value) { this._srcSelect = value; }\n    set blendMode(value) { this._blendMode = value; }\n    set stackPosition(value) { this._stackPosition = value; }\n    set relativePosition(value) { this._relativePosition = value; }\n}\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n// DVE Sources\nHarmonicDVE.SRC_UNSPECIFIED   = 0;\nHarmonicDVE.SRC_PLAYER        = 1;\nHarmonicDVE.SRC_PLAYER_A      = 1;\nHarmonicDVE.SRC_EXTERNAL_IN   = 2;\nHarmonicDVE.SRC_EXTERNAL_IN_1 = 2;\nHarmonicDVE.SRC_MIXER_OUTPUT  = 3;\nHarmonicDVE.SRC_PLAYER_B      = 4;\nHarmonicDVE.SRC_EXTERNAL_IN_2 = 5;\nHarmonicDVE.SRC_EXTERNAL_IN_3 = 6;\nHarmonicDVE.SRC_EXTERNAL_IN_4 = 7;\nHarmonicDVE.SRC_EXTERNAL_IN_5 = 8;\nHarmonicDVE.SRC_EXTERNAL_IN_6 = 9;\n\n// Blend Modes\nHarmonicDVE.BLEND_WITH_VIDEO    = 0;\nHarmonicDVE.BLEND_WITH_GRAPHICS = 1;\n\n// Stack Positions\nHarmonicDVE.AUTO_STACK_POSITION        = 0;\nHarmonicDVE.BOTTOM_MOST_STACK_POSITION = 1;\nHarmonicDVE.TOP_MOST_STACK_POSITION    = 2;\n\n// Relative Positioning\nHarmonicDVE.AUTO_RELATIVE_POSITION = -1;\nHarmonicDVE.RELATIVE_POSITION_0    = 0;         // Top\nHarmonicDVE.RELATIVE_POSITION_1    = 1;\n\n// Flags - for internal use only\nHarmonicDVE.FLAG_ENABLE = 0x01;\nHarmonicDVE.FLAG_ENABLE_HOLEPUNCH = 0x02;\n\nHarmonicDVE.FLAG_BLEND_MODE_WITH_VIDEO = 0x00;\nHarmonicDVE.FLAG_BLEND_MODE_WITH_GRAPHICS = 0x04;\n\nHarmonicDVE.FLAG_STACK_POS_BOTTOM_MOST = 0x00;\nHarmonicDVE.FLAG_STACK_POS_TOP_MOST = 0x08;\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-dve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "HarmonicDVE",
    "memberof": "src/widgets/harmonic-dve.js",
    "static": true,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-dve.js",
    "importStyle": null,
    "description": "The HarmonicDVE widget provides control of the system's DVE.\n\nThe HarmonicDVE widget requires 5 createjs.MovieClips.  Each movie clip\nrepresents a different portion of the DVE control.  The DVE widgets in\nthe Harmonic Template Widget Library have already been defined for your\nconvenience.  This class just needs access to them.\n\nThe 5 widgets that are needed are:\n- SrcPreview - used to preview the DVE in the desktop environment\n- SrcRegion - provides crop functionality\n- DstRegion - provides down-scale and position functionality\n- AudioDuckLevel - provides duck control on the audio voice-over unit\n- AudioMixLevel - provides mix control on the audio voice-over unit\n\nIn order to properly use this class, it is highly-recommended to simply\nstart with one of the blank dve templates.  These template were created\nto allow users to get up-and-running quickly.\n\nThere are many properties associated with the DVE.  These properties are:\n- enable - enables/disable the DVE\n- enableHPT - enables/disables the hole punch technology\n- srcSelect - the DVE source\n- blendMode - blend with graphics vs. blend with video\n- stackPosition - top vs. bottom\n- relativePosition - DVE0 on top vs. DVE1 on top (dual DVE only)",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "DVE unit number (0-1)"
      }
    ]
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "_unit",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_unit",
    "access": "private",
    "description": "DVE unit number",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "_isValidDve",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_isValidDve",
    "access": "private",
    "description": "Flag indicating if the DVE is valid.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "_isLive",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_isLive",
    "access": "private",
    "description": "Flag indicating if the DVE is live.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "_enable",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_enable",
    "access": "private",
    "description": "Flag indicating if the DVE is enabled.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "_enableHPT",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_enableHPT",
    "access": "private",
    "description": "Flag indicating if the DVE Hole Punch Technology is enabled.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "_srcSelect",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcSelect",
    "access": "private",
    "description": "DVE's source selection.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "_blendMode",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_blendMode",
    "access": "private",
    "description": "DVE's blend mode.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "_stackPosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_stackPosition",
    "access": "private",
    "description": "DVE's stack position.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "_relativePosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_relativePosition",
    "access": "private",
    "description": "DVE's relative position (for enhanced channel).",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "_srcPreview",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcPreview",
    "access": "private",
    "description": "Src Preview object",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "_srcRegion",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcRegion",
    "access": "private",
    "description": "Src Region object",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "_dstRegion",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_dstRegion",
    "access": "private",
    "description": "Dst Region object",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "_audioDuckLevel",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_audioDuckLevel",
    "access": "private",
    "description": "Audio Duck object",
    "lineNumber": 128,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "_audioMixLevel",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_audioMixLevel",
    "access": "private",
    "description": "Audio Mix object",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "_srcPreviewMovieClip",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcPreviewMovieClip",
    "access": "private",
    "description": "The object that represents the Src Preview.",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "createjs.MovieClip"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "_srcPreviewBitmap",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcPreviewBitmap",
    "access": "private",
    "description": "The Src Preview bitmap object.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "_srcPreviewX",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_srcPreviewX",
    "access": "private",
    "description": "The Src Preview Red X object.",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "_params",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_params",
    "access": "private",
    "description": "DVE parameters for the shared surface.",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#register",
    "access": "public",
    "description": "Register the objects that represent the DVE objects.\nThese objects must be MovieClips for the rest of the code to work properly.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dstRegion",
        "description": "createjs object that represents the dst region"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "srcRegion",
        "description": "createjs object that represents the src region"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "srcPreview",
        "description": "createjs object that represents the src preview"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "audioDuckLevel",
        "description": "createjs object that represents the audio duck level"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "audioMixLevel",
        "description": "createjs object that represents the audio mix level"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if registration was successful, false otherwise."
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "_init",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_init",
    "access": "private",
    "description": "After successful registration, this method will initialize everything\nnecessary for the DVE to function.",
    "lineNumber": 251,
    "listens": [
      {
        "types": [
          "HarmonicTemplate.VISIBLE_EVENT"
        ],
        "description": "when the template is visible"
      },
      {
        "types": [
          "'tickend'"
        ],
        "description": "when the tick ends its processing"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "_onTickEnd",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_onTickEnd",
    "access": "private",
    "description": "This method is called when the stage dispatches the 'tickend' event.\nAt this time, the DVE logic needs to be run.  There are slightly\ndifferent implementations between the platform and the desktop.",
    "lineNumber": 282,
    "params": [],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "_tickEndOnPlatform",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_tickEndOnPlatform",
    "access": "private",
    "description": "This method provides the platform DVE functionality.  All DVE data is\npacked into an object and sent to the HTML renderer via websockets.",
    "lineNumber": 301,
    "params": [],
    "return": null
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "_onTickEndShowDveSrcPreview",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_onTickEndShowDveSrcPreview",
    "access": "private",
    "description": "This method provides the functionality required to show the DVE\nSrc Preview.",
    "lineNumber": 405,
    "params": [],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "_desktopCreateSrcPreviewMovieClip",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#_desktopCreateSrcPreviewMovieClip",
    "access": "private",
    "description": "Creates all necessary elements needed to emulate the DVE in the desktop\nenvironment.  It will create a src preview bitmap (full size) and\na red X that will be used to show invalid configurations.",
    "lineNumber": 463,
    "params": [],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "get",
    "name": "unit",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#unit",
    "access": "public",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "get",
    "name": "isLive",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "get",
    "name": "enable",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#enable",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "get",
    "name": "enableHPT",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#enableHPT",
    "access": "public",
    "description": null,
    "lineNumber": 518,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "get",
    "name": "srcSelect",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#srcSelect",
    "access": "public",
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "get",
    "name": "blendMode",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#blendMode",
    "access": "public",
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "get",
    "name": "stackPosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#stackPosition",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "get",
    "name": "relativePosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#relativePosition",
    "access": "public",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "set",
    "name": "enable",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#enable",
    "access": "public",
    "description": null,
    "lineNumber": 524,
    "undocument": true
  },
  {
    "__docId__": 417,
    "kind": "set",
    "name": "enableHPT",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#enableHPT",
    "access": "public",
    "description": null,
    "lineNumber": 525,
    "undocument": true
  },
  {
    "__docId__": 419,
    "kind": "set",
    "name": "srcSelect",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#srcSelect",
    "access": "public",
    "description": null,
    "lineNumber": 526,
    "undocument": true
  },
  {
    "__docId__": 421,
    "kind": "set",
    "name": "blendMode",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#blendMode",
    "access": "public",
    "description": null,
    "lineNumber": 527,
    "undocument": true
  },
  {
    "__docId__": 423,
    "kind": "set",
    "name": "stackPosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#stackPosition",
    "access": "public",
    "description": null,
    "lineNumber": 528,
    "undocument": true
  },
  {
    "__docId__": 425,
    "kind": "set",
    "name": "relativePosition",
    "memberof": "src/widgets/harmonic-dve.js~HarmonicDVE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-dve.js~HarmonicDVE#relativePosition",
    "access": "public",
    "description": null,
    "lineNumber": 529,
    "undocument": true
  },
  {
    "__docId__": 427,
    "kind": "file",
    "name": "src/widgets/harmonic-label-scroll.js",
    "content": "/**\n * File: harmonic-label-scroll.js\n *\n * Copyright (c) 2020 Harmonic, Inc.\n */\n\n/**\n * The HarmonicLabelScroll widget provides a dynamic scrolling text field that can\n * be controlled with the widget controls.  Unlike the HarmonicTextScroll widget,\n * this widget uses the Label component so that customers can utilize CSS styling.\n * The Label component is rendered using HTML rendering, not CreateJS canvas\n * rendering.  This means that the scroll can only be placed above or below the\n * canvas.\n *\n * This class implements the Harmonic HarmonicLabelScroll Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicLabelScroll widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a label component child named the same\n *   as the createjsObj (for example, field2_label).  This is naming convention\n *   is necessary to uniquely define the label in the DOM.*\n * - The createjs.MovieClip must also contain a createjs.MovieClip child named\n *   'harmonicScrollBounds'.\n *\n * This class will inject HTML elements into the dom_overlay_container that is\n * created by Adobe Animate.  The top-level element will be a div that provides\n * location and clipping for the scroll.  The next level will be a div that\n * contains the text and image separators.  This is the div that will be moved\n * every tick event.\n *\n * Styling for the top-level div, text, and images should be done outside this\n * class in a CSS file for the template.  The class names will be for the\n * injected elements will be:\n *\n * - <field name> - top-level div, style background color, writing mode, etc.\n * - <field name>_text - style the text (includes separator character)\n * - <field name>_img - style the image separators\n *\n * This class defines functions for:\n *\n * - updateTextField - updates and renders the text\n * - appendTextField - appends text to the scroll texts and renders\n * - restartFieldAnimation - starts and restarts the scroll\n * - stopFieldAnimation - stops the scroll\n *\n * To use this class, register the createjs object using the\n * static register function.  The created HarmonicLabelScroll object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n  * There are also 2 properties that can be used:\n * - textArray - an array of text to be scrolled\n * - separatorArray - an array of createjs.MovieClips that can be used\n *   as a graphical separator between the text.  If the separatorArray\n *   is not used, then a text bullet will be used to separate the text.\n * - speed - the number of pixels to move the scroll each tick.\n *\n * @example\n *\n * let scroll = HarmonicLabelScroll.register(\n *     this,\n *     HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM,\n *     HarmonicLabelScroll.LOCATION_ABOVE_CANVAS\n * );\n * scroll.updateTextField(\"scrolling text\", true);\n * scroll.speed = 3;\n * scroll.textArray = textArray;\n *\n * document.addEventListener(HarmonicLabelScroll.LABEL_SCROLL_FINISHED_EVENT, (event) => {\n *     hjs.info(\"Harmonic Label Scroll is complete\");\n * });\n */\nclass HarmonicLabelScroll extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     *\n     * @listen {HarmonicTemplate.VISIBLE_EVENT} used to determine if the template is visible\n     * @listen {'tick'} used to move the scroll\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     * @param {Number} writingMode - the writing mode of the language\n     * @param {Number} location - location of scroll relative to canvas\n     */\n    constructor(widgetType, fieldNum, name, createjsObj, writingMode, location) {\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\n\n        hjs.debug(\"HarmonicLabelScroll.constructor\");\n\n        /**\n         * The writing mode of the language.\n         * Horizontally left to right - text moves horizontally from the right to the left\n         * Horizontally right to left - text moves horizontally from left to right\n         * Vertically top to bottom - text moves vertically from bottom to top\n         * @type {Number}\n         */\n        this._writingMode = this._initWritingMode(writingMode);\n\n        /**\n         * The location of the scroll relative to the canvas.\n         * @type {Number} 0 = below, 1 = above\n         */\n        this._location = this._initLocation(location);\n\n        /**\n         * Speed of the scroll.  Should always be >= 0.  Direction is controlled\n         * with the writingMode.\n         * @type {Number}\n         */\n        this._speed = this._initSpeed(this.defaultSpeed);\n\n        /**\n         * Array of text to be displayed on the scroll.stringify\n         * @type {String[]}\n         */\n        this._textArray = new Array();\n\n        /**\n         * Array of MovieClips used as the separators between the text (optional)\n         * @type {Object[]}\n         */\n        this._separatorArray = new Array();\n\n        /**\n         * If a separatorArray is not set, this will be the separator between the text\n         * @type {String}\n         */\n        this._separator = this.defaultSeparator;\n\n        /**\n         * The bounds of the scroll.  This is defined by the createjs object itself.\n         * @type {createjs.Rectangle}\n         */\n        this._scrollBounds = this._initScrollBounds();\n\n        /**\n         * The label that is located in the createjs object.\n         * @type {Object}\n         */\n        this._label = undefined;\n\n        /**\n         * HTML div element that defines the scroll.  It also provides the\n         * mask for the text container.\n         * @type {object}\n         */\n        this._divScroll = this._initDivScroll(this._scrollBounds);\n\n        /**\n         * HTML div element that contains all of the label and image\n         * elements to be displayed.\n         * @type {object}\n         */\n        this._divContainer = this._initDivContainer(this._divScroll);\n\n        /**\n         * Rectangle that represents the containers location and size.\n         * @type {createjs.Rectangle}\n         */\n        this._containerRect = new createjs.Rectangle(0, 0, 0, 0);\n\n        /**\n         * Flag indicating if the load processing is complete.\n         * @type {Boolean}\n         */\n        this._loadComplete = false;\n\n        /**\n         * Flag to indicate if the scroll is visible.  The scroll won't start until\n         * it is visible.\n         * @type {Boolean}\n         */\n        this._isVisible = false;\n\n        /**\n         * Flag to keep track if the scroll has been started.\n         * @type {Boolean}\n         */\n        this._started = false;\n\n        /**\n         * Flag used to determine if the text needs updating when restarted.\n         * @type {Boolean}\n         */\n        this._textNeedsUpdate = false;\n\n        /**\n         * Flag that tracks the active state of the scroll.\n         * @type {Boolean}\n         */\n        this._scrollActive = false;\n\n        /**\n         * Flag to indicate if the scroll should stop at the end.\n         * @type {Boolean}\n         */\n        this._stopAtEnd = false;\n\n        // Listen for the VISIBLE_EVENT - the scroll won't start until received.\n        document.addEventListener(HarmonicTemplate.VISIBLE_EVENT, (event) => {\n            this._onVisible();\n        });\n\n        // Listen for the 'tick' event on the object.  This will move the scroll.\n        createjsObj.addEventListener(\"tick\", (event) => {\n            this._onTick();\n        });\n\n        // The embedded label should be present in the DOM by the next repaint.\n        requestAnimationFrame(() => {\n\n            let animation_container = document.getElementById(\"animation_container\");\n            let dom_overlay_container = document.getElementById(\"dom_overlay_container\");\n            let label = document.getElementById(this._createjsObj.name);\n\n            if (!animation_container) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \" unable to locate 'animation_container' in the DOM\");\n                return;\n            }\n\n            if (!dom_overlay_container) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \"unable to locate 'dom_overlay_container' in the DOM\");\n                return;\n            }\n\n            if (!label) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \" - unable to locate the label element in the DOM\");\n                return;\n            }\n\n            this._label = label;\n\n            // Remove the label added by Adobe\n            dom_overlay_container.removeChild(label);\n\n            // Position the scroll in the DOM\n            if (this._location == HarmonicLabelScroll.LOCATION_BELOW_CANVAS) {\n\n                // Create the div below the canvas if it doesn't already exist.\n                let node = document.getElementById(\"dom_overlay_container_below\");\n                if (!node) {\n                    node = dom_overlay_container.cloneNode(false);\n                    node.id = node.id + \"_below\";\n\n                    node = animation_container.insertBefore(node, animation_container.firstChild);\n                }\n\n                node.appendChild(this._divScroll);\n            }\n            else {\n                dom_overlay_container.appendChild(this._divScroll);\n            }\n\n            this._loadComplete = true;\n        });\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicLabelScroll will be created in this function.\n     *\n     * NOTE:  The createjs object must have a property called\n     * 'harmonicScrollBounds'.  This object will be used to\n     * identify the bounds of the text scroll.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     * @param {Number} writingMode - the writing mode of the language\n     * @param {Number} location - location of scroll relative to canvas\n     *\n     * @return {Object} the newly created HarmonicLabelScroll instance, or undefined if there is an error\n     */\n    static register(createjsObj, writingMode, location) {\n        let result = HarmonicWidget.validate(\"HarmonicLabelScroll\", createjsObj, true);\n        if (result) {\n\n            if (!createjsObj.hasOwnProperty(\"harmonicScrollBounds\")) {\n                hjs.error(\"HarmonicLabelScroll.register: the createjs object must contain a MovieClip named harmonicScrollBounds\");\n                return undefined;\n            }\n\n            return new HarmonicLabelScroll(HarmonicTemplate.WIDGET_TYPE_TEXT, result.fieldNum, result.name, createjsObj, writingMode, location);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Queried by the Harmonic Template to verify that the widget is loaded\n     * before sending the load complete signal.  The requestAnimationFrame\n     * callback in the constructor will set the loadComplete flag to true.\n     *\n     * @returns {Boolean}\n     */\n    isLoaded() {\n        return this._loadComplete;\n    }\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     * Delete all elements in the text array and add the new text.\n     *\n     * @param {String} text - the text to display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._textArray.splice(0, this._textArray.length, text);\n        this._textUpdated(render);\n    }\n\n    /**\n     * Handles the appendTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to append to the display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    appendTextField(text, render) {\n        // Append the text to the text array\n        this._textArray.push(text);\n        this._textUpdated(render);\n    }\n\n    /**\n     * Handles the restartFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} fromBeginning - flag indicating if the widget should restart animation from the beginning\n     */\n    restartFieldAnimation(fromBeginning) {\n        this._startScroll();\n\n        if (this._started) {\n            this._scrollActive = true;\n\n            if (fromBeginning) {\n                this._restartScroll();\n            }\n        }\n    }\n\n    /**\n     * Handles the stopFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} immediate - flag indicating if the widget should stop immediately or at the end of the animation\n     */\n    stopFieldAnimation(immediate) {\n        if (immediate) {\n            this._scrollActive = false;\n        }\n        else {\n            this._stopAtEnd = true;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Initializes the writing mode.\n     *\n     * @param {Number} writingMode\n     *\n     * @return {Number} the verified writing mode\n     */\n    _initWritingMode(writingMode) {\n        if ((writingMode >= 0) && (writingMode < HarmonicLabelScroll.MODE_MAX)) {\n            return writingMode;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - writingMode is out of range: \" + writingMode.toString() + \" defaulting to \" + this.defaultWritingMode);\n            return this.defaultWritingMode;\n        }\n    }\n\n    /**\n     * Initializes the location of the scroll.\n     *\n     * @param {Number} location\n     *\n     * @return {Number} the verified location.\n     */\n    _initLocation(location) {\n        if ((location >= 0) && (location < HarmonicLabelScroll.LOCATION_MAX)) {\n            return location;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - location is out of range: \" + location.toString() + \" defaulting to \" + this.defaultLocation);\n            return this.defaultLocation;\n        }\n    }\n\n    /**\n     * Initializes the speed of the scroll.\n     *\n     * @param {Number} speed\n     *\n     * @return {Number} the verified speed;\n     */\n    _initSpeed(speed) {\n        if (speed >= 0) {\n            return speed;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - speed is out of range: \" + speed.toString() + \" defaulting to \" + this.defaultSpeed);\n            return this.defaultSpeed;\n        }\n    }\n\n    /**\n     * Initializes the scroll bounds.  The scroll bounds is the location and\n     * size of the createjs Object.\n     *\n     * @return {createjs.Rectangle} rectangle that represents the absolute bounds of the scroll\n     */\n    _initScrollBounds() {\n        let bounds = this._createjsObj.getTransformedBounds();\n\n        if (bounds === null) {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - unable to getTransformedBounds of createjsObject\");\n            return new createjs.Rectangle(0, 0, 0, 0);\n        }\n\n        // Round to avoid sub-pixel rendering\n        bounds.x = Math.round(bounds.x);\n        bounds.y = Math.round(bounds.y);\n        bounds.width = Math.round(bounds.width);\n        bounds.height = Math.round(bounds.height);\n\n        // Hide the scroll bounds\n        this._createjsObj.harmonicScrollBounds.visible = false;\n\n        return bounds;\n    }\n\n    /**\n     * Initializes the HTML div element that represents the scroll.\n     *\n     * @param {createjs.Rectangle} scrollBounds\n     *\n     * @return {Object} HTML div element\n     */\n    _initDivScroll(scrollBounds) {\n        let div = document.createElement(\"div\");\n\n        div.id = this._createjsObj.name;\n        div.className = this._createjsObj.name;\n\n        // Position the div and set the clip rect\n        div.style.position = \"absolute\";\n        div.style.top = scrollBounds.y + \"px\";\n        div.style.left = scrollBounds.x + \"px\";\n        div.style.width = scrollBounds.width + \"px\";\n        div.style.height = scrollBounds.height + \"px\";\n        div.style.visible = \"hidden\";\n        div.style.clip = \"rect(0px,\" + scrollBounds.width.toString() + \"px,\" + scrollBounds.height.toString() + \"px,0px)\";\n\n        return div;\n    }\n\n    /**\n     * Initializes the HTML div element that represents the text container.\n     *\n     * @param {Object} divScroll HTML div element\n     *\n     * @return {Object} HTML div element\n     */\n    _initDivContainer(divScroll) {\n        let div = document.createElement(\"div\");\n\n        div.id = this._createjsObj.name + \"_container\";\n        div.style.position = \"absolute\";\n\n        divScroll.appendChild(div);\n\n        return div;\n    }\n\n    /**\n     * Positions the text container at the starting position.\n     */\n    _positionDivContainerAtStart() {\n\n        switch (this._writingMode) {\n            case HarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT:\n                this._containerRect.x = this._scrollBounds.width;\n                this._containerRect.y = 0;\n                break;\n            case HarmonicLabelScroll.MODE_HORZ_RIGHT_TO_LEFT:\n                this._containerRect.x = 0;\n                this._containerRect.y = 0;\n                break;\n            case HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM:\n                this._containerRect.x = 0;\n                this._containerRect.y = this._scrollBounds.height;\n                break;\n            default:\n                break;\n        }\n\n        // Apply the location to the div container.\n        this._divContainer.style.left = this._containerRect.x.toString() + \"px\";\n        this._divContainer.style.top = this._containerRect.y.toString() + \"px\";\n    }\n\n    /**\n     * Places the container at the start position.\n     */\n    _restartScroll() {\n        this._positionDivContainerAtStart();\n    }\n\n    /**\n     * Handler for the VISIBLE_EVENT.\n     */\n    _onVisible() {\n        this._isVisible = true;     // update the state\n        this._startScroll();        // attempt to start the scroll\n    }\n\n    /**\n     * Starts the scroll.\n     */\n    _startScroll() {\n        // If not loaded, don't start.\n        if (!this.isLoaded()) {\n            return;\n        }\n\n        // If the text array is empty, don't start.\n        if (this._textArray.length == 0) {\n            return;\n        }\n\n        // If the template is not visible yet, don't start.\n        if (!this._isVisible) {\n            return;\n        }\n\n        // Only start once\n        if (!this._started) {\n            this._started = true;\n\n            // Render the text scroll and position\n            this._renderTextScroll();\n            this._restartScroll();\n\n            // Mark the scroll active and make the container visible\n            this._scrollActive = true;\n            this._setScrollVisible(true);\n        }\n    }\n\n    _setScrollVisible(visible) {\n        if (visible) {\n            this._divScroll.style.visible = \"visible\";\n        }\n        else {\n            this._divScroll.style.visible = \"hidden\";\n        }\n    }\n\n    /**\n     * Anytime the text is updated, this function should be called.  It\n     * will start the scroll if it hasn't been started.  It will\n     * also determine if and when to update the text scroll.\n     *\n     * @param {Boolean} render - flag indicating if the text should be rendered\n     */\n    _textUpdated(render) {\n\n        this._startScroll();    // start the scroll\n\n        if (this._started) {\n\n            // If the scroll is not active and the render flag\n            // is true, then render the text scroll.  Otherwise,\n            // set the _textNeedsUpdate flag.\n            if ((!this._scrollActive) && render) {\n                this._renderTextScroll();\n            }\n            else {\n                this._textNeedsUpdate = true;\n            }\n        }\n    }\n\n    /**\n     * Creates 'img' HTML elements based on the imageNames.\n     *\n     * @param {Array} imageNames\n     *\n     * @return {Array} array of 'img' HTML elements that represent the separators\n     */\n    _initSeparatorImages(imageNames) {\n        let imgArray = new Array();\n\n        let len = imageNames.length;\n        for (let i = 0; i < len; i++) {\n            let img = document.getElementById(imageNames[i]);\n\n            if (img) {\n                let node = img.cloneNode(false);\n                let boundingRect = img.getBoundingClientRect();\n\n                node.className = img.className + \" \" + this._createjsObj.name + \"_img\";\n                node.border = img.border;\n\n                // Fix the width and height based on the bounding client rect.  This\n                // is required so the offsetWidth and offsetHeight provide valid values\n                // when the scroll is being assembled.\n                node.style = \"\";\n                node.style.width = boundingRect.width.toString() + \"px\";\n                node.style.height = boundingRect.height.toString() + \"px\";\n\n                imgArray.push(node);\n            }\n            else {\n                hjs.warning(\"widget: \" + this._createjsObj.name + \" unable to get image element: \" + imageNames[i]);\n            }\n        }\n\n        return imgArray;\n    }\n\n    /**\n     * This function renders the text scroll.\n     */\n    _renderTextScroll() {\n\n        this._textNeedsUpdate = false;\n\n        this._setScrollVisible(false);\n\n        this._divContainer.innerHTML = \"\";     // remove all children\n\n        const numTextElements = this._textArray.length;\n\n        let separatorImages = this._initSeparatorImages(this.separatorArray);\n        const numSeparators = separatorImages.length;\n        let separatorIndex = 0;\n\n        // Reset the containerRect values\n        this._containerRect.x = 0;\n        this._containerRect.y = 0;\n        this._containerRect.width = 0;\n        this._containerRect.height = 0;\n\n        let separatorCount = 0;\n\n        // Create all elements required for the scroll\n        for (let i = 0; i < numTextElements; i++) {\n\n            // Create the label\n            let label = document.createElement(\"label\");\n            label.id = this._createjsObj.name + \"_text_\" + i.toString();\n            label.className = this._label.className + \" \" + this._createjsObj.name + \"_text\";\n            label.style.whiteSpace = \"nowrap\";\n            label.innerHTML = this._textArray[i];\n\n            // Add the label to the container div element\n            this._divContainer.appendChild(label);\n\n            // If the separatorArray is empty, then use the default text\n            // separator.\n            if (i < numTextElements - 1) {\n                if (numSeparators == 0) {\n\n                    let separator = document.createElement(\"label\");\n                    separator.id = this._createjsObj.name + \"_sep_\" + separatorCount.toString();\n                    separator.className = label.className;\n                    separatorCount++;\n                    separator.innerHTML = this._separator;\n\n                    this._divContainer.appendChild(separator);\n                }\n                else {\n                    let separator = separatorImages[separatorIndex].cloneNode(false);\n                    separator.id = this._createjsObj.name + \"_img_\" + separatorCount.toString();\n                    separatorCount++;\n\n                    this._divContainer.appendChild(separator);\n                    separatorIndex = (separatorIndex + 1) % numSeparators;\n                }\n            }\n        }\n\n        // Position all elements\n        requestAnimationFrame(() => {\n\n            let numChildren = this._divContainer.childNodes.length;\n\n            let x = 0;\n            let y = 0;\n\n            let width = 0;\n            let height = 0;\n\n            for (let i = 0; i < numChildren; i++) {\n                let node = this._divContainer.childNodes[i];\n\n                node.style.position = \"absolute\";\n\n                switch (this._writingMode) {\n                    case HarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT:\n                        node.style.top = y.toString() + \"px\";\n                        node.style.left = x.toString() + \"px\";\n\n                        x += node.offsetWidth;\n\n                        width += node.offsetWidth;\n                        break;\n\n                    case HarmonicLabelScroll.MODE_HORZ_RIGHT_TO_LEFT:\n                        x -= node.offsetWidth;\n\n                        node.style.top = y.toString() + \"px\";\n                        node.style.left = x.toString() + \"px\";\n\n                        width += node.offsetWidth;\n                        break;\n\n                    case HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM:\n                        node.style.top = y.toString() + \"px\";\n                        node.style.left = x.toString() + \"px\";\n\n                        y += node.offsetHeight;\n\n                        height += node.offsetHeight;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n\n            this._containerRect.width = width;\n            this._containerRect.height = height;\n\n            this._positionDivContainerAtStart();\n        });\n    }\n\n    /**\n     * This is the 'tick' handler.  It moves the container and\n     * handles when the scroll finishes.\n     *\n     * @emits {HarmonicLabelScroll.TEXT_SCROLL_FINISHED_EVENT} dispatched when the scroll finishes\n     */\n    _onTick() {\n\n        if (!this.isLoaded()) {\n            return;\n        }\n\n        if (!this._scrollActive) {\n            return;\n        }\n\n        // Adjust the container rect using the speed\n        switch (this._writingMode) {\n            case HarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT:\n                this._containerRect.x -= this._speed;\n                break;\n            case HarmonicLabelScroll.MODE_HORZ_RIGHT_TO_LEFT:\n                this._containerRect.x += this._speed;\n                break;\n            case HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM:\n                this._containerRect.y -= this._speed;\n                break;\n            default:\n                break;\n        }\n\n        let endReached = false;\n\n        // Detect if the end of the scroll has been reached.\n        switch (this._writingMode) {\n            case HarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT:\n                if ((this._containerRect.x + this._containerRect.width) < 0) {\n                    endReached = true;\n                }\n                break;\n            case HarmonicLabelScroll.MODE_HORZ_RIGHT_TO_LEFT:\n                if ((this._containerRect.x - this._containerRect.width) >= this._scrollBounds.width) {\n                    endReached = true;\n                }\n                break;\n            case HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM:\n                if ((this._containerRect.y + this._containerRect.height) < 0) {\n                    endReached = true;\n                }\n                break;\n            default:\n                break;\n        }\n\n        this._divContainer.style.left = this._containerRect.x.toString() + \"px\";\n        this._divContainer.style.top = this._containerRect.y.toString() + \"px\";\n\n        if (endReached) {\n\n            this._positionDivContainerAtStart();\n\n            // Dispatch the complete event when the countdown finishes.\n            let event = new CustomEvent(HarmonicLabelScroll.LABEL_SCROLL_FINISHED_EVENT,\n                {\n                    detail : this\n                }\n            );\n\n            document.dispatchEvent(event);\n\n            if (this._textNeedsUpdate) {\n                this._renderTextScroll();\n            }\n\n            if (this._stopAtEnd) {\n                this._scrollActive = false;\n            }\n            else {\n                this._restartScroll();\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns the default writing mode.\n     * @return {Number}\n     */\n    get defaultWritingMode() {\n        return HarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT;\n    }\n\n    /**\n     * Returns the default location.\n     * @return {Number}\n     */\n    get defaultLocation() {\n        return HarmonicLabelScroll.LOCATION_ABOVE_CANVAS;\n    }\n\n    /**\n     * Returns the default speed.\n     * @return {Number}\n     */\n    get defaultSpeed() {\n        return 3;\n    }\n\n    /**\n     * Returns the default separator.\n     * @return {String}\n     */\n    get defaultSeparator() {\n        return \"&nbsp;&nbsp;•&nbsp;&nbsp;\";\n    }\n\n    /**\n     * Returns the current start state of the text scroll. true = started.\n     * @return {Boolean}\n     */\n    get started() {\n        return this._started;\n    }\n\n    /**\n     * Returns the current active state of the text scroll. true = active.\n     * @return {Boolean}\n     */\n    get active() {\n        return this._scrollActive;\n    }\n\n    /**\n     * Sets the speed of the scroll.\n     * @param {Number} value - number of pixels to move the scroll\n     */\n    set speed(value) {\n        this._speed = value;\n    }\n\n    /**\n     * Gets the speed of the scroll.\n     * @return {Number}\n     */\n    get speed() {\n        return this._speed;\n    }\n\n    /**\n     * Sets the array of text to display in the text scroll.\n     * @param {String[]} value - an array of text to display\n     */\n    set textArray(value) {\n        if (Array.isArray(value)) {\n            this._textArray = value;\n            this._textUpdated(true);\n        }\n        else {\n            hjs.error(\"HarmonicLabelScroll.textArray: value is not an array\");\n        }\n    }\n\n    /**\n     * Gets the array of text that is being displayed.\n     * @return {Array}\n     */\n    get textArray() {\n        return this._textArray;\n    }\n\n    /**\n     * Sets the text-based separator.\n     * @param {String} value - the string to place between the text items.\n     */\n    set separator(value) {\n        this._separator = value;\n        this._textUpdated(true);\n    }\n\n    /**\n     * Gets the text-based separator.\n     * @return {String}\n     */\n    get separator() {\n        return this._separator;\n    }\n\n    /**\n     * Sets the array of separators to use between the text.  This should be\n     * an array of createjs.DisplayObjects.\n     * @param {createjs.DisplayObject[]} value - array of objects to display between text items\n     */\n    set separatorArray(value) {\n        if (Array.isArray(value)) {\n            this._separatorArray = value;\n            this._textUpdated(true);\n        }\n        else {\n            hjs.error(\"HarmonicLabelScroll.separatorImageArray: value is not an array\");\n        }\n    }\n\n    /**\n     * Gets the array of separators.\n     * @return {Array}\n     */\n    get separatorArray() {\n        return this._separatorArray;\n    }\n\n    /**\n     * Sets the stop at end flag.  When true, the scroll will stop at the\n     * end of the scroll; otherwise, it will restart automatically.\n     * @param {Boolean} value - true = stop at end, false = restart\n     */\n    set stopAtEnd(value) {\n        this._stopAtEnd = value;\n    }\n\n    /**\n     * Gets the stop at end flag.\n     * @return {Boolean}\n     */\n    get stopAtEnd() {\n        return this._stopAtEnd;\n    }\n}\n\n//--------------------------------------------------------------------------\n// Constants\n//--------------------------------------------------------------------------\nHarmonicLabelScroll.MODE_HORZ_LEFT_TO_RIGHT = 0;\nHarmonicLabelScroll.MODE_HORZ_RIGHT_TO_LEFT = 1;\nHarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM = 2;\nHarmonicLabelScroll.MODE_MAX = 3;\n\nHarmonicLabelScroll.LOCATION_BELOW_CANVAS = 0;\nHarmonicLabelScroll.LOCATION_ABOVE_CANVAS = 1;\nHarmonicLabelScroll.LOCATION_MAX = 2;\n\n//--------------------------------------------------------------------------\n// Events\n//--------------------------------------------------------------------------\nHarmonicLabelScroll.LABEL_SCROLL_FINISHED_EVENT = \"LabelScrollFinished\";\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-label-scroll.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 428,
    "kind": "class",
    "name": "HarmonicLabelScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js",
    "static": true,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-label-scroll.js",
    "importStyle": null,
    "description": "The HarmonicLabelScroll widget provides a dynamic scrolling text field that can\nbe controlled with the widget controls.  Unlike the HarmonicTextScroll widget,\nthis widget uses the Label component so that customers can utilize CSS styling.\nThe Label component is rendered using HTML rendering, not CreateJS canvas\nrendering.  This means that the scroll can only be placed above or below the\ncanvas.\n\nThis class implements the Harmonic HarmonicLabelScroll Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicLabelScroll widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a label component child named the same\n  as the createjsObj (for example, field2_label).  This is naming convention\n  is necessary to uniquely define the label in the DOM.*\n- The createjs.MovieClip must also contain a createjs.MovieClip child named\n  'harmonicScrollBounds'.\n\nThis class will inject HTML elements into the dom_overlay_container that is\ncreated by Adobe Animate.  The top-level element will be a div that provides\nlocation and clipping for the scroll.  The next level will be a div that\ncontains the text and image separators.  This is the div that will be moved\nevery tick event.\n\nStyling for the top-level div, text, and images should be done outside this\nclass in a CSS file for the template.  The class names will be for the\ninjected elements will be:\n\n- <field name> - top-level div, style background color, writing mode, etc.\n- <field name>_text - style the text (includes separator character)\n- <field name>_img - style the image separators\n\nThis class defines functions for:\n\n- updateTextField - updates and renders the text\n- appendTextField - appends text to the scroll texts and renders\n- restartFieldAnimation - starts and restarts the scroll\n- stopFieldAnimation - stops the scroll\n\nTo use this class, register the createjs object using the\nstatic register function.  The created HarmonicLabelScroll object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.\n\nThere are also 2 properties that can be used:\n- textArray - an array of text to be scrolled\n- separatorArray - an array of createjs.MovieClips that can be used\n  as a graphical separator between the text.  If the separatorArray\n  is not used, then a text bullet will be used to separate the text.\n- speed - the number of pixels to move the scroll each tick.",
    "examples": [
      "\nlet scroll = HarmonicLabelScroll.register(\n    this,\n    HarmonicLabelScroll.MODE_VERT_TOP_TO_BOTTOM,\n    HarmonicLabelScroll.LOCATION_ABOVE_CANVAS\n);\nscroll.updateTextField(\"scrolling text\", true);\nscroll.speed = 3;\nscroll.textArray = textArray;\n\ndocument.addEventListener(HarmonicLabelScroll.LABEL_SCROLL_FINISHED_EVENT, (event) => {\n    hjs.info(\"Harmonic Label Scroll is complete\");\n});"
    ],
    "lineNumber": 78,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 429,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@listen",
        "tagValue": "{HarmonicTemplate.VISIBLE_EVENT} used to determine if the template is visible"
      },
      {
        "tagName": "@listen",
        "tagValue": "{'tick'} used to move the scroll"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "writingMode",
        "description": "the writing mode of the language"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "location of scroll relative to canvas"
      }
    ]
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "_writingMode",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_writingMode",
    "access": "private",
    "description": "The writing mode of the language.\nHorizontally left to right - text moves horizontally from the right to the left\nHorizontally right to left - text moves horizontally from left to right\nVertically top to bottom - text moves vertically from bottom to top",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "_location",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_location",
    "access": "private",
    "description": "The location of the scroll relative to the canvas.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "_speed",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_speed",
    "access": "private",
    "description": "Speed of the scroll.  Should always be >= 0.  Direction is controlled\nwith the writingMode.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "_textArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_textArray",
    "access": "private",
    "description": "Array of text to be displayed on the scroll.stringify",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "_separatorArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_separatorArray",
    "access": "private",
    "description": "Array of MovieClips used as the separators between the text (optional)",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "_separator",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_separator",
    "access": "private",
    "description": "If a separatorArray is not set, this will be the separator between the text",
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "_scrollBounds",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_scrollBounds",
    "access": "private",
    "description": "The bounds of the scroll.  This is defined by the createjs object itself.",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "_label",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_label",
    "access": "private",
    "description": "The label that is located in the createjs object.",
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "_divScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_divScroll",
    "access": "private",
    "description": "HTML div element that defines the scroll.  It also provides the\nmask for the text container.",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "_divContainer",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_divContainer",
    "access": "private",
    "description": "HTML div element that contains all of the label and image\nelements to be displayed.",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "_containerRect",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_containerRect",
    "access": "private",
    "description": "Rectangle that represents the containers location and size.",
    "lineNumber": 169,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 441,
    "kind": "member",
    "name": "_loadComplete",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_loadComplete",
    "access": "private",
    "description": "Flag indicating if the load processing is complete.",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "_isVisible",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_isVisible",
    "access": "private",
    "description": "Flag to indicate if the scroll is visible.  The scroll won't start until\nit is visible.",
    "lineNumber": 182,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "_started",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_started",
    "access": "private",
    "description": "Flag to keep track if the scroll has been started.",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "_textNeedsUpdate",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_textNeedsUpdate",
    "access": "private",
    "description": "Flag used to determine if the text needs updating when restarted.",
    "lineNumber": 194,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "_scrollActive",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_scrollActive",
    "access": "private",
    "description": "Flag that tracks the active state of the scroll.",
    "lineNumber": 200,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "_stopAtEnd",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_stopAtEnd",
    "access": "private",
    "description": "Flag to indicate if the scroll should stop at the end.",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicLabelScroll will be created in this function.\n\nNOTE:  The createjs object must have a property called\n'harmonicScrollBounds'.  This object will be used to\nidentify the bounds of the text scroll.",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "writingMode",
        "description": "the writing mode of the language"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "location of scroll relative to canvas"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicLabelScroll instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "isLoaded",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#isLoaded",
    "access": "public",
    "description": "Queried by the Harmonic Template to verify that the widget is loaded\nbefore sending the load complete signal.  The requestAnimationFrame\ncallback in the constructor will set the loadComplete flag to true.",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.\nDelete all elements in the text array and add the new text.",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#appendTextField",
    "access": "public",
    "description": "Handles the appendTextField request from the Harmonic Template.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to append to the display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#restartFieldAnimation",
    "access": "public",
    "description": "Handles the restartFieldAnimation request from the Harmonic Template.",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "flag indicating if the widget should restart animation from the beginning"
      }
    ],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#stopFieldAnimation",
    "access": "public",
    "description": "Handles the stopFieldAnimation request from the Harmonic Template.",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "flag indicating if the widget should stop immediately or at the end of the animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "_initWritingMode",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initWritingMode",
    "access": "private",
    "description": "Initializes the writing mode.",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "writingMode",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the verified writing mode"
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "_initLocation",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initLocation",
    "access": "private",
    "description": "Initializes the location of the scroll.",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the verified location."
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "_initSpeed",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initSpeed",
    "access": "private",
    "description": "Initializes the speed of the scroll.",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "speed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the verified speed;"
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "_initScrollBounds",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initScrollBounds",
    "access": "private",
    "description": "Initializes the scroll bounds.  The scroll bounds is the location and\nsize of the createjs Object.",
    "lineNumber": 424,
    "return": {
      "nullable": null,
      "types": [
        "createjs.Rectangle"
      ],
      "spread": false,
      "description": "rectangle that represents the absolute bounds of the scroll"
    },
    "params": []
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "_initDivScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initDivScroll",
    "access": "private",
    "description": "Initializes the HTML div element that represents the scroll.",
    "lineNumber": 451,
    "params": [
      {
        "nullable": null,
        "types": [
          "createjs.Rectangle"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollBounds",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "HTML div element"
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "_initDivContainer",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initDivContainer",
    "access": "private",
    "description": "Initializes the HTML div element that represents the text container.",
    "lineNumber": 476,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "divScroll",
        "description": "HTML div element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "HTML div element"
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "_positionDivContainerAtStart",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_positionDivContainerAtStart",
    "access": "private",
    "description": "Positions the text container at the starting position.",
    "lineNumber": 490,
    "params": [],
    "return": null
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "_restartScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_restartScroll",
    "access": "private",
    "description": "Places the container at the start position.",
    "lineNumber": 517,
    "params": [],
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "_onVisible",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_onVisible",
    "access": "private",
    "description": "Handler for the VISIBLE_EVENT.",
    "lineNumber": 524,
    "params": [],
    "return": null
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "_startScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_startScroll",
    "access": "private",
    "description": "Starts the scroll.",
    "lineNumber": 532,
    "params": [],
    "return": null
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "_setScrollVisible",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_setScrollVisible",
    "access": "private",
    "description": null,
    "lineNumber": 562,
    "undocument": true,
    "params": [
      {
        "name": "visible",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "_textUpdated",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_textUpdated",
    "access": "private",
    "description": "Anytime the text is updated, this function should be called.  It\nwill start the scroll if it hasn't been started.  It will\nalso determine if and when to update the text scroll.",
    "lineNumber": 578,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the text should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "_initSeparatorImages",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_initSeparatorImages",
    "access": "private",
    "description": "Creates 'img' HTML elements based on the imageNames.",
    "lineNumber": 603,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "imageNames",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of 'img' HTML elements that represent the separators"
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "_renderTextScroll",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_renderTextScroll",
    "access": "private",
    "description": "This function renders the text scroll.",
    "lineNumber": 637,
    "params": [],
    "return": null
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "_onTick",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#_onTick",
    "access": "private",
    "description": "This is the 'tick' handler.  It moves the container and\nhandles when the scroll finishes.",
    "lineNumber": 758,
    "emits": [
      {
        "types": [
          "HarmonicLabelScroll.TEXT_SCROLL_FINISHED_EVENT"
        ],
        "description": "dispatched when the scroll finishes"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "get",
    "name": "defaultWritingMode",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#defaultWritingMode",
    "access": "public",
    "description": "Returns the default writing mode.",
    "lineNumber": 843,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "get",
    "name": "defaultLocation",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#defaultLocation",
    "access": "public",
    "description": "Returns the default location.",
    "lineNumber": 851,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "get",
    "name": "defaultSpeed",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#defaultSpeed",
    "access": "public",
    "description": "Returns the default speed.",
    "lineNumber": 859,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "get",
    "name": "defaultSeparator",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#defaultSeparator",
    "access": "public",
    "description": "Returns the default separator.",
    "lineNumber": 867,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "get",
    "name": "started",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#started",
    "access": "public",
    "description": "Returns the current start state of the text scroll. true = started.",
    "lineNumber": 875,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "get",
    "name": "active",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#active",
    "access": "public",
    "description": "Returns the current active state of the text scroll. true = active.",
    "lineNumber": 883,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "set",
    "name": "speed",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#speed",
    "access": "public",
    "description": "Sets the speed of the scroll.",
    "lineNumber": 891,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "number of pixels to move the scroll"
      }
    ]
  },
  {
    "__docId__": 487,
    "kind": "get",
    "name": "speed",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#speed",
    "access": "public",
    "description": "Gets the speed of the scroll.",
    "lineNumber": 899,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "set",
    "name": "textArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#textArray",
    "access": "public",
    "description": "Sets the array of text to display in the text scroll.",
    "lineNumber": 907,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "an array of text to display"
      }
    ]
  },
  {
    "__docId__": 490,
    "kind": "get",
    "name": "textArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#textArray",
    "access": "public",
    "description": "Gets the array of text that is being displayed.",
    "lineNumber": 921,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "set",
    "name": "separator",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#separator",
    "access": "public",
    "description": "Sets the text-based separator.",
    "lineNumber": 929,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the string to place between the text items."
      }
    ]
  },
  {
    "__docId__": 493,
    "kind": "get",
    "name": "separator",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#separator",
    "access": "public",
    "description": "Gets the text-based separator.",
    "lineNumber": 938,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "set",
    "name": "separatorArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#separatorArray",
    "access": "public",
    "description": "Sets the array of separators to use between the text.  This should be\nan array of createjs.DisplayObjects.",
    "lineNumber": 947,
    "params": [
      {
        "nullable": null,
        "types": [
          "createjs.DisplayObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "array of objects to display between text items"
      }
    ]
  },
  {
    "__docId__": 496,
    "kind": "get",
    "name": "separatorArray",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#separatorArray",
    "access": "public",
    "description": "Gets the array of separators.",
    "lineNumber": 961,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "set",
    "name": "stopAtEnd",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#stopAtEnd",
    "access": "public",
    "description": "Sets the stop at end flag.  When true, the scroll will stop at the\nend of the scroll; otherwise, it will restart automatically.",
    "lineNumber": 970,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = stop at end, false = restart"
      }
    ]
  },
  {
    "__docId__": 499,
    "kind": "get",
    "name": "stopAtEnd",
    "memberof": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label-scroll.js~HarmonicLabelScroll#stopAtEnd",
    "access": "public",
    "description": "Gets the stop at end flag.",
    "lineNumber": 978,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "file",
    "name": "src/widgets/harmonic-label.js",
    "content": "/**\n * File: harmonic-label.js\n *\n * Copyright (c) 2020 Harmonic, Inc.\n */\n\n/**\n * The HarmonicLabel widget provides a dynamic text field that can\n * be controlled with the widget controls.  Unlike the HarmonicTextField widget,\n * this widget uses the Label component so that customers can utilize CSS styling.\n * The Label component is rendered using HTML rendering, not CreateJS canvas\n * rendering.  This means that the label can only be placed above or below the\n * canvas.\n *\n * This class implements the Harmonic Label Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicLabel widget requires that the registered createdjs object have the\n * following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a label component child named the same\n *   as the createjsObj (for example, field2_label).  This is naming convention\n *   is necessary to uniquely define the label in the DOM.\n *\n * Styling for the label should be done outside this class in a CSS file for the\n * template.  The class name for the label is defined by the 'class' property on\n * the label component.\n *\n * This class defines functions for:\n *\n * - updateTextField - updates and renders the dynamic text field\n * - appendTextField - appends text to the dynamic text field and renders\n * - renderField - renders the text field\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicLabel object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n * @example\n * let label = HarmonicLabel.register(this, HarmonicLabel.LOCATION_ABOVE_CANVAS);\n *\n * // Calling label.updateTextField at this point will not work since additional\n * // Adobe generated code for inserting the label into the DOM must run.\n * // Use requestAnimationFrame to execute the updateTextField on the next\n * // available screen repaint.\n * requestAnimationFrame(() => {\n *   label.updateTextField(\"Testing\", true);\n * });\n */\nclass HarmonicLabel extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     * @param {Number} location - location of label relative to canvas\n     */\n    constructor(widgetType, fieldNum, name, createjsObj, location) {\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\n\n        hjs.debug(\"HarmonicLabel.constructor\");\n\n        /**\n         * The location of the label relative to the canvas.\n         * @type {Number} 0 = below, 1 = above\n         */\n        this._location = this._initLocation(location);\n\n        /**\n         * Flag indicating if the load processing is complete.\n         * @type {Boolean}\n         */\n        this._loadComplete = false;\n\n        /**\n         * Object representing the label element in the DOM.\n         */\n        this._label = undefined;\n\n        /**\n         * The text to be rendered to the label object.\n         * @type {String}\n         */\n        this._text = \"\";\n\n        // The label should be present in the DOM by the next repaint.\n        requestAnimationFrame(() => {\n            let animation_container = document.getElementById(\"animation_container\");\n            let dom_overlay_container = document.getElementById(\"dom_overlay_container\");\n            let label = document.getElementById(this._createjsObj.name);\n\n            if (!animation_container) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \" unable to locate 'animation_container' in the DOM\");\n                return;\n            }\n\n            if (!dom_overlay_container) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \"unable to locate 'dom_overlay_container' in the DOM\");\n                return;\n            }\n\n            if (!label) {\n                hjs.error(\"widget: \" + this._createjsObj.name + \" - unable to locate the label element in the DOM\");\n                return;\n            }\n\n            this._label = label;\n            this._text = this._label.innerHTML;\n\n            // Position the label in the DOM\n            if (this._location == HarmonicLabel.LOCATION_BELOW_CANVAS) {\n\n                // Remove the label added by Adobe\n                dom_overlay_container.removeChild(this._label);\n\n                // Create the div below the canvas if it doesn't already exist.\n                let node = document.getElementById(\"dom_overlay_container_below\");\n                if (!node) {\n                    node = dom_overlay_container.cloneNode(false);\n                    node.id = node.id + \"_below\";\n\n                    node = animation_container.insertBefore(node, animation_container.firstChild);\n                }\n\n                node.appendChild(this._label);\n            }\n\n            this._loadComplete = true;\n        });\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicLabel will be created in this function.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     * @param {Number} location - location of label relative to canvas\n     *\n     * @return {Object} the newly created HarmonicLabel instance, or undefined if there is an error\n     */\n    static register(createjsObj, location) {\n        let result = HarmonicWidget.validate(\"HarmonicLabel\", createjsObj, true);\n        if (result) {\n            return new HarmonicLabel(HarmonicTemplate.WIDGET_TYPE_TEXT, result.fieldNum, result.name, createjsObj, location);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Initializes the location of the label.\n     *\n     * @param {Number} location\n     *\n     * @return {Number} the verified location.\n     */\n    _initLocation(location) {\n        if ((location >= 0) && (location < HarmonicLabel.LOCATION_MAX)) {\n            return location;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - location is out of range: \" + location.toString() + \" defaulting to \" + this.defaultLocation);\n            return this.defaultLocation;\n        }\n    }\n\n    /**\n     * Queried by the Harmonic Template to verify that the widget is loaded\n     * before sending the load complete signal.  The requestAnimationFrame\n     * callback in the constructor will set the loadComplete flag to true.\n     *\n     * @returns {Boolean}\n     */\n    isLoaded() {\n        return this._loadComplete;\n    }\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._text = text\n\n        if (render) {\n            this._renderNow();\n        }\n    }\n\n    /**\n     * Handles the appendTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to append to the display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    appendTextField(text, render) {\n        this._text += text;\n\n        if (render) {\n            this._renderNow();\n        }\n    }\n\n    /**\n     * Handles the renderField request from the Harmonic Template.\n     */\n    renderField() {\n        this._renderNow();\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Renders the text to the label.\n     */\n    _renderNow() {\n        if (this._label) {\n            this._label.innerHTML = this._text;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - render failed: this._label is undefined\");\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n    /**\n     * Returns the default location.\n     * @return {Number}\n     */\n    get defaultLocation() {\n        return HarmonicLabel.LOCATION_ABOVE_CANVAS;\n    }\n\n    /**\n     * Returns the string that is waiting to be displayed.\n     */\n    get savedText() {\n        return this._text;\n    }\n\n    /**\n     * Returns the string that is currently being displayed.\n     */\n    get displayedText() {\n        if (this._label) {\n            return this._label.innerHTML;\n        }\n        else {\n            hjs.error(\"widget: \" + this._createjsObj.name + \" - this._label is undefined\");\n            return \"\";\n        }\n    }\n}\n\n//--------------------------------------------------------------------------\n// Constants\n//--------------------------------------------------------------------------\nHarmonicLabel.LOCATION_BELOW_CANVAS = 0;\nHarmonicLabel.LOCATION_ABOVE_CANVAS = 1;\nHarmonicLabel.LOCATION_MAX = 2;\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-label.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "class",
    "name": "HarmonicLabel",
    "memberof": "src/widgets/harmonic-label.js",
    "static": true,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-label.js",
    "importStyle": null,
    "description": "The HarmonicLabel widget provides a dynamic text field that can\nbe controlled with the widget controls.  Unlike the HarmonicTextField widget,\nthis widget uses the Label component so that customers can utilize CSS styling.\nThe Label component is rendered using HTML rendering, not CreateJS canvas\nrendering.  This means that the label can only be placed above or below the\ncanvas.\n\nThis class implements the Harmonic Label Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicLabel widget requires that the registered createdjs object have the\nfollowing structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a label component child named the same\n  as the createjsObj (for example, field2_label).  This is naming convention\n  is necessary to uniquely define the label in the DOM.\n\nStyling for the label should be done outside this class in a CSS file for the\ntemplate.  The class name for the label is defined by the 'class' property on\nthe label component.\n\nThis class defines functions for:\n\n- updateTextField - updates and renders the dynamic text field\n- appendTextField - appends text to the dynamic text field and renders\n- renderField - renders the text field\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicLabel object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.",
    "examples": [
      "let label = HarmonicLabel.register(this, HarmonicLabel.LOCATION_ABOVE_CANVAS);\n\n// Calling label.updateTextField at this point will not work since additional\n// Adobe generated code for inserting the label into the DOM must run.\n// Use requestAnimationFrame to execute the updateTextField on the next\n// available screen repaint.\nrequestAnimationFrame(() => {\n  label.updateTextField(\"Testing\", true);\n});"
    ],
    "lineNumber": 54,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 502,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "location of label relative to canvas"
      }
    ]
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "_location",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_location",
    "access": "private",
    "description": "The location of the label relative to the canvas.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 504,
    "kind": "member",
    "name": "_loadComplete",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_loadComplete",
    "access": "private",
    "description": "Flag indicating if the load processing is complete.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "_label",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_label",
    "access": "private",
    "description": "Object representing the label element in the DOM.",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "_text",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_text",
    "access": "private",
    "description": "The text to be rendered to the label object.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicLabel will be created in this function.",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": "location of label relative to canvas"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicLabel instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "_initLocation",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_initLocation",
    "access": "private",
    "description": "Initializes the location of the label.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the verified location."
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "isLoaded",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#isLoaded",
    "access": "public",
    "description": "Queried by the Harmonic Template to verify that the widget is loaded\nbefore sending the load complete signal.  The requestAnimationFrame\ncallback in the constructor will set the loadComplete flag to true.",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#appendTextField",
    "access": "public",
    "description": "Handles the appendTextField request from the Harmonic Template.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to append to the display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "renderField",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#renderField",
    "access": "public",
    "description": "Handles the renderField request from the Harmonic Template.",
    "lineNumber": 218,
    "params": [],
    "return": null
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "_renderNow",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#_renderNow",
    "access": "private",
    "description": "Renders the text to the label.",
    "lineNumber": 229,
    "params": [],
    "return": null
  },
  {
    "__docId__": 519,
    "kind": "get",
    "name": "defaultLocation",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#defaultLocation",
    "access": "public",
    "description": "Returns the default location.",
    "lineNumber": 245,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "get",
    "name": "savedText",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#savedText",
    "access": "public",
    "description": "Returns the string that is waiting to be displayed.",
    "lineNumber": 252,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "get",
    "name": "displayedText",
    "memberof": "src/widgets/harmonic-label.js~HarmonicLabel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-label.js~HarmonicLabel#displayedText",
    "access": "public",
    "description": "Returns the string that is currently being displayed.",
    "lineNumber": 259,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "file",
    "name": "src/widgets/harmonic-live-avo.js",
    "content": "/**\n * File: harmonic-live-avo.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n /**\n * The HarmonicLiveAVO widget provides control of the system's live\n * audio voice over unit (AVO).\n *\n * The HarmonicLiveAVO widget requires a single createjs.MovieClip to be\n * registered.  This widget is defined in the Harmonic Template Widget\n * Library.  It just needs to be included in the template for it to work.\n */\nclass HarmonicLiveAVO {\n\n    /**\n     * Constructor\n     *\n     * @param {Number} unit - LiveAVO unit number (0-1)\n     */\n    constructor(unit, enable = true) {\n        hjs.debug(\"HarmonicLiveAVO.constructor: unit: \" + unit);\n\n        /**\n         * Live AVO unit number\n         * @type {Number}\n         */\n        this._unit = unit;\n\n        /**\n         * IsLive flag.  This will get set to true when the template\n         * becomes visible.\n         * @type {Boolean}\n         */\n        this._isLive = false;\n\n        /**\n         * Enable flag.  Controlled by the client and defaults to true.\n         * @type {Boolean}\n         */\n        this._enable = enable;\n\n        /**\n         * The Live AVO object that is registered with this class.\n         * @type {Object}\n         */\n        this._liveAVO = undefined;\n    }\n\n    /**\n     * Register the object that represent the Live AVO object.\n     * The registered object must be a MovieClip.\n     *\n     * @param {Object} liveAVO - createjs object that represents the liveAVO\n     * @return {Boolean} - true if registration was successful, false otherwise.\n     */\n    register(liveAVO) {\n        if (this._liveAVO === undefined) {\n\n            hjs.debug(\"HarmonicLiveAVO.register: unit: \" + this._unit);\n\n            if (!(liveAVO instanceof createjs.MovieClip)) {\n                hjs.error(\"HarmonicLiveAVO.register: LiveAVO is not a container\");\n                return false;\n            }\n\n            this._liveAVO = liveAVO;\n\n            this._init();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * After successful registration, this method will initialize everything\n     * necessary for the Live AVO to function.\n     *\n     * @listens {HarmonicTemplate.VISIBLE_EVENT} when the template is visible\n     */\n    _init() {\n        // Make the liveAVO object invisible on the platform\n        if (hjs.isOnPlatform()) {\n            this._liveAVO.visible = false;\n        }\n\n        // Listen for the VISIBLE_EVENT.  This will set the visible flag to\n        // true.\n        document.addEventListener(HarmonicTemplate.VISIBLE_EVENT, (event) => {\n            this._isLive = true;\n\n            hjs.debug(\"HarmonicLiveAVO.setLiveAVOIsLive: \" + this._isLive);\n            hjs.setLiveAVOIsLive(this._unit, this._isLive);\n        });\n\n        this._setEnable(this._enable);\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Sets the enable property locally and sends a websocket message to the\n     * HTML renderer so that it can be updated on the shared surface.\n     * @param {Boolean} enable\n     */\n    _setEnable(enable) {\n        this._enable = enable;\n        hjs.enableLiveAVO(this._unit, this._enable);\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    /**\n     * Gets the unit number\n     * @return {Number} the unit number associated with this Live AVO.\n     */\n    get unit() {\n        return this._unit;\n    }\n\n    /**\n     * Get the isLive flag.  This returns the local copy.\n     * @return {Boolean} the current state of the cached isLive flag.\n     */\n    get isLive() {\n        return this._isLive;\n    }\n\n    /**\n     * Gets the current enable state of the live AVO.\n     * @return {Boolean} true = enabled, false = disabled\n     */\n    get enable() {\n        return this._enable;\n    }\n\n    /**\n     * Sets the enable state of the live AVO.\n     * @param {Boolean} value - true = enable, false = disable\n     */\n    set enable(value) {\n        this._setEnable(value);\n    }\n}\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-live-avo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 523,
    "kind": "class",
    "name": "HarmonicLiveAVO",
    "memberof": "src/widgets/harmonic-live-avo.js",
    "static": true,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-live-avo.js",
    "importStyle": null,
    "description": "The HarmonicLiveAVO widget provides control of the system's live\naudio voice over unit (AVO).\n\nThe HarmonicLiveAVO widget requires a single createjs.MovieClip to be\nregistered.  This widget is defined in the Harmonic Template Widget\nLibrary.  It just needs to be included in the template for it to work.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 524,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "LiveAVO unit number (0-1)"
      }
    ]
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "_unit",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_unit",
    "access": "private",
    "description": "Live AVO unit number",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "_isLive",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_isLive",
    "access": "private",
    "description": "IsLive flag.  This will get set to true when the template\nbecomes visible.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "_enable",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_enable",
    "access": "private",
    "description": "Enable flag.  Controlled by the client and defaults to true.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "_liveAVO",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_liveAVO",
    "access": "private",
    "description": "The Live AVO object that is registered with this class.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#register",
    "access": "public",
    "description": "Register the object that represent the Live AVO object.\nThe registered object must be a MovieClip.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "liveAVO",
        "description": "createjs object that represents the liveAVO"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if registration was successful, false otherwise."
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "_init",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_init",
    "access": "private",
    "description": "After successful registration, this method will initialize everything\nnecessary for the Live AVO to function.",
    "lineNumber": 84,
    "listens": [
      {
        "types": [
          "HarmonicTemplate.VISIBLE_EVENT"
        ],
        "description": "when the template is visible"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "_setEnable",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#_setEnable",
    "access": "private",
    "description": "Sets the enable property locally and sends a websocket message to the\nHTML renderer so that it can be updated on the shared surface.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 535,
    "kind": "get",
    "name": "unit",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#unit",
    "access": "public",
    "description": "Gets the unit number",
    "lineNumber": 124,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the unit number associated with this Live AVO."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "get",
    "name": "isLive",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#isLive",
    "access": "public",
    "description": "Get the isLive flag.  This returns the local copy.",
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "the current state of the cached isLive flag."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "get",
    "name": "enable",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#enable",
    "access": "public",
    "description": "Gets the current enable state of the live AVO.",
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true = enabled, false = disabled"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "set",
    "name": "enable",
    "memberof": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-live-avo.js~HarmonicLiveAVO#enable",
    "access": "public",
    "description": "Sets the enable state of the live AVO.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = enable, false = disable"
      }
    ]
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "src/widgets/harmonic-movie-clip.js",
    "content": "/**\n * File: harmonic-movie-clip.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The HarmonicMovieClip widget provides an easy way to control a\n * createjs.MovieClip with the widget controls.\n *\n * This class implements the Harmonic HarmonicMovieClip Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicMovieClip widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n *\n * This class defines functions for:\n *\n * - restartFieldAnimation - restarts the animation\n * - stopFieldAnimation - stops the animation\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicMovieClip object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n * @example\n * let movieClip = HarmonicMovieClip.register(this);\n * movieClip.stopFieldAnimation(true);\n */\nclass HarmonicMovieClip extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     * - adds a listener to the 'tick' event so that the count can be updated\n     *\n     * @listens {'tick'} to detect if the timeline needs to stop at the last frame\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     */\n    constructor(widgetType, fieldNum, name, createjsObj) {\n        super(widgetType, fieldNum, name, createjsObj, false);  // don't include in the template description\n\n        hjs.debug(\"HarmonicMovieClip.constructor\");\n\n        /**\n         * Stop the MovieClip at the end of the timeline.\n         * @type {Boolean}\n         */\n        this._stopAtEndRequested = false;\n\n        // Listen for the 'tick' event on the object\n        createjsObj.addEventListener(\"tick\", (event) => {\n            if (this._stopAtEndRequested) {\n                if (this._createjsObj.currentFrame == (this._createjsObj.totalFrames - 1)) {\n                    this.createjsObj.stop();\n                }\n            }\n        });\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicMovieClip will be created in this function.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     *\n     * @return {Object} the newly created HarmonicMovieClip instance, or undefined if there is an error\n     */\n    static register(createjsObj) {\n        let result = HarmonicWidget.validate(\"HarmonicMovieClip\", createjsObj, false);\n        if (result) {\n            return new HarmonicMovieClip(HarmonicTemplate.WIDGET_TYPE_MOVIE_CLIP, result.fieldNum, result.name, createjsObj);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Handles the restartFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} fromBeginning - flag indicating if the widget should restart animation from the beginning\n     */\n    restartFieldAnimation(fromBeginning) {\n        this._stopAtEndRequested = false;\n\n        if (fromBeginning) {\n            this._createjsObj.gotoAndPlay(0);\n        }\n        else {\n            this._createjsObj.play();\n        }\n    }\n\n    /**\n     * Handles the stopFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} immediate - flag indicating if the widget should stop immediately or at the end of the animation\n     */\n    stopFieldAnimation(immediate) {\n        if (immediate) {\n            this._createjsObj.stop();\n        }\n        else {\n            this._stopAtEndRequested = true;\n        }\n    }\n}\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-movie-clip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "class",
    "name": "HarmonicMovieClip",
    "memberof": "src/widgets/harmonic-movie-clip.js",
    "static": true,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-movie-clip.js",
    "importStyle": null,
    "description": "The HarmonicMovieClip widget provides an easy way to control a\ncreatejs.MovieClip with the widget controls.\n\nThis class implements the Harmonic HarmonicMovieClip Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicMovieClip widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n\nThis class defines functions for:\n\n- restartFieldAnimation - restarts the animation\n- stopFieldAnimation - stops the animation\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicMovieClip object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.",
    "examples": [
      "let movieClip = HarmonicMovieClip.register(this);\nmovieClip.stopFieldAnimation(true);"
    ],
    "lineNumber": 35,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 541,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables\n- adds a listener to the 'tick' event so that the count can be updated",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      }
    ],
    "listens": [
      {
        "types": [
          "'tick'"
        ],
        "description": "to detect if the timeline needs to stop at the last frame"
      }
    ]
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "_stopAtEndRequested",
    "memberof": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "static": false,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip#_stopAtEndRequested",
    "access": "private",
    "description": "Stop the MovieClip at the end of the timeline.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicMovieClip will be created in this function.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicMovieClip instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip#restartFieldAnimation",
    "access": "public",
    "description": "Handles the restartFieldAnimation request from the Harmonic Template.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "flag indicating if the widget should restart animation from the beginning"
      }
    ],
    "return": null
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-movie-clip.js~HarmonicMovieClip#stopFieldAnimation",
    "access": "public",
    "description": "Handles the stopFieldAnimation request from the Harmonic Template.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "flag indicating if the widget should stop immediately or at the end of the animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 548,
    "kind": "file",
    "name": "src/widgets/harmonic-text-field.js",
    "content": "/**\n * File: harmonic-text-field.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The HarmonicTextField widget provides a dynamic text field that can\n * be controlled with the widget controls.\n *\n * This class implements the Harmonic TextField Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicTextField widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n *   This text object represents the dynamic text field.\n *\n * This class defines functions for:\n *\n * - updateTextField - updates and renders the dynamic text field\n * - appendTextField - appends text to the dynamic text field and renders\n * - renderField - renders the text field\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicTextField object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n * @example\n * let textfield = HarmonicTextField.register(this);\n * textfield.updateTextField(\"updated text\", true);\n */\nclass HarmonicTextField extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     */\n    constructor(widgetType, fieldNum, name, createjsObj) {\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\n\n        hjs.debug(\"HarmonicTextField.constructor\");\n\n        /**\n         * The text to be rendered to the createjs.Text object.\n         * @type {String}\n         */\n        this._text = this._createjsObj.harmonicField.text;\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicTextField will be created in this function.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     *\n     * @return {Object} the newly created HarmonicTextField instance, or undefined if there is an error\n     */\n    static register(createjsObj) {\n        let result = HarmonicWidget.validate(\"HarmonicTextField\", createjsObj, true);\n        if (result) {\n            return new HarmonicTextField(HarmonicTemplate.WIDGET_TYPE_TEXT, result.fieldNum, result.name, createjsObj);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._text = text\n\n        if (render) {\n            this._renderNow();\n        }\n    }\n\n    /**\n     * Handles the appendTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to append to the display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    appendTextField(text, render) {\n        this._text += text;\n\n        if (render) {\n            this._renderNow();\n        }\n    }\n\n    /**\n     * Handles the renderField request from the Harmonic Template.\n     */\n    renderField() {\n        this._renderNow();\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Renders the text to the createjs object and forces an update on the stage.\n     */\n    _renderNow() {\n        this._createjsObj.harmonicField.text = this._text;\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n    /**\n     * Returns the string that is waiting to be displayed\n     */\n    get savedText() {\n        return this._text;\n    }\n\n    /**\n     * Returns the string that is currently being displayed\n     */\n    get displayedText() {\n        return this._createjsObj.harmonicField.text;\n    }\n}\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-text-field.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 549,
    "kind": "class",
    "name": "HarmonicTextField",
    "memberof": "src/widgets/harmonic-text-field.js",
    "static": true,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-text-field.js",
    "importStyle": null,
    "description": "The HarmonicTextField widget provides a dynamic text field that can\nbe controlled with the widget controls.\n\nThis class implements the Harmonic TextField Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicTextField widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n  This text object represents the dynamic text field.\n\nThis class defines functions for:\n\n- updateTextField - updates and renders the dynamic text field\n- appendTextField - appends text to the dynamic text field and renders\n- renderField - renders the text field\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicTextField object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.",
    "examples": [
      "let textfield = HarmonicTextField.register(this);\ntextfield.updateTextField(\"updated text\", true);"
    ],
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 550,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      }
    ]
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "_text",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#_text",
    "access": "private",
    "description": "The text to be rendered to the createjs.Text object.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicTextField will be created in this function.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicTextField instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#appendTextField",
    "access": "public",
    "description": "Handles the appendTextField request from the Harmonic Template.",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to append to the display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "renderField",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#renderField",
    "access": "public",
    "description": "Handles the renderField request from the Harmonic Template.",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "_renderNow",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#_renderNow",
    "access": "private",
    "description": "Renders the text to the createjs object and forces an update on the stage.",
    "lineNumber": 121,
    "params": [],
    "return": null
  },
  {
    "__docId__": 559,
    "kind": "get",
    "name": "savedText",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#savedText",
    "access": "public",
    "description": "Returns the string that is waiting to be displayed",
    "lineNumber": 131,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "get",
    "name": "displayedText",
    "memberof": "src/widgets/harmonic-text-field.js~HarmonicTextField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-field.js~HarmonicTextField#displayedText",
    "access": "public",
    "description": "Returns the string that is currently being displayed",
    "lineNumber": 138,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "file",
    "name": "src/widgets/harmonic-text-scroll.js",
    "content": "/**\n * File: harmonic-text-scroll.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n\n/**\n * The HarmonicTextScroll widget provides a dynamic scrolling text field that can\n * be controlled with the widget controls.\n *\n * This class implements the Harmonic HarmonicTextScroll Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The HarmonicTextField widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n *   This text object represents the dynamic text field.\n * - The createjs.MovieClip must also contain a createjs.Bitmap child named\n *   'harmonicScrollBounds'.  This bitmap represents the bounding region\n *   of the scroll.  It will start to the right of the bounding region\n *   and scroll to the left.  When the last of the text reaches the left\n *   of the bounding region, the HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT\n *   event will be dispatched on the document.\n *\n * NOTE:  It is the responsibility of the client to mask the bounding region\n *        using the standard Adobe Animate CC mask layer.\n *\n * This class defines functions for:\n *\n * - updateTextField - updates and renders the text\n * - appendTextField - appends text to the scroll texts and renders\n * - restartFieldAnimation - starts and restarts the scroll\n * - stopFieldAnimation - stops the scroll\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicTextScroll object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n  * There are also 2 properties that can be used:\n * - textArray - an array of text to be scrolled\n * - separatorArray - an array of createjs.MovieClips that can be used\n *   as a graphical separator between the text.  If the separatorArray\n *   is not used, then a text bullet will be used to separate the text*\n *\n * @example\n * let scroll = HarmonicTextScroll.register(this);\n * scroll.updateTextField(\"scrolling text\", true);\n * scroll.speed = 3;\n *\n * document.addEventListener(HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT, (event) => {\n *     hjs.info(\"the scroll is complete\");\n *     scroll.restartFieldAnimation(true);\n * });\n */\nclass HarmonicTextScroll extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     *\n     * @listen {HarmonicTemplate.VISIBLE_EVENT} used to determine if the template is visible\n     * @listen {'tick'} used to move the scroll\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     */\n    constructor(widgetType, fieldNum, name, createjsObj) {\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\n\n        hjs.debug(\"HarmonicTextScroll.constructor\");\n\n        /**\n         * Speed of the scroll.\n         * @type {Number}\n         */\n        this._speed = 3;\n\n        /**\n         * Array of text to be displayed on the scroll.stringify\n         * @type {String[]}\n         */\n        this._textArray = new Array();\n\n        /**\n         * Array of MovieClips used as the separators between the text (optional)\n         * @type {Object[]}\n         */\n        this._separatorArray = new Array();\n\n        /**\n         * If a separatorArray is not set, this will be the separator between the text\n         * @type {String}\n         */\n        this._separator = \"  •  \";\n\n        /**\n         * The createjs.Text object in the createjs object.  This will be used\n         * to clone the Text when building the container.\n         * @type {createjs.Text}\n         */\n        this._textField = this._createjsObj.harmonicField;\n        this._textField.lineWidth = null;       // single line mode\n        this._textField.visible = false;        // hide\n\n        /**\n         * The bounds of the scroll.  This is defined by the harmonicScrollBounds\n         * object located in the createjs object.\n         * @type {createjs.Rectangle}\n         */\n        this._scrollBounds = this._createjsObj.harmonicScrollBounds.getTransformedBounds();\n        this._createjsObj.harmonicScrollBounds.visible = false;\n\n        /**\n         * A createjs.Container to hold all of the createjs.Text objects and separators.\n         * @type {createjs.Container}\n         */\n        this._container = new createjs.Container();\n        this._container.x = this._scrollBounds.width;   // Initialize the container x location to be at the edge of the scroll bounds\n\n        /**\n         * A createjs.Rectangle that defines the bounds of the container.\n         * @type {createjs.Rectangle}\n         */\n        this._containerBounds = new createjs.Rectangle(0, 0, 0, 0);\n        this._createjsObj.addChild(this._container);\n\n        /**\n         * Flag to indicate if the scroll is visible.  The scroll won't start until\n         * it is visible.\n         * @type {Boolean}\n         */\n        this._isVisible = false;\n\n        /**\n         * Flag to keep track if the scroll has been started.\n         * @type {Boolean}\n         */\n        this._started = false;\n\n        /**\n         * Flag used to determine if the text needs updating when restarted.\n         * @type {Boolean}\n         */\n        this._textNeedsUpdate = false;\n\n        /**\n         * Flag that tracks the active state of the scroll.\n         * @type {Boolean}\n         */\n        this._scrollActive = false;\n\n        /**\n         * Flag to indicate if the scroll should stop at the end.\n         * @type {Boolean}\n         */\n        this._stopAtEnd = false;\n\n        // Listen for the VISIBLE_EVENT - the scroll won't start until received.\n        document.addEventListener(HarmonicTemplate.VISIBLE_EVENT, (event) => {\n            this._onVisible();\n        });\n\n        // Listen for the 'tick' event on the object.  This will move the scroll.\n        createjsObj.addEventListener(\"tick\", (event) => {\n            this._onTick();\n        });\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicTextScroll will be created in this function.\n     *\n     * NOTE:  The createjs object must have a property called\n     * 'harmonicScrollBounds'.  This object will be used to\n     * identify the bounds of the text scroll.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     *\n     * @return {Object} the newly created HarmonicTextScroll instance, or undefined if there is an error\n     */\n    static register(createjsObj) {\n        let result = HarmonicWidget.validate(\"HarmonicTextScroll\", createjsObj, true);\n        if (result) {\n\n            if (!createjsObj.hasOwnProperty(\"harmonicScrollBounds\")) {\n                hjs.error(\"HarmonicTextScroll.register: the createjs object must contain a MovieClip named harmonicScrollBounds\");\n                return undefined;\n            }\n\n            return new HarmonicTextScroll(HarmonicTemplate.WIDGET_TYPE_TEXT, result.fieldNum, result.name, createjsObj);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     * Delete all elements in the text array and add the new text.\n     *\n     * @param {String} text - the text to display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._textArray.splice(0, this._textArray.length, text);\n        this._textUpdated(render);\n    }\n\n    /**\n     * Handles the appendTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to append to the display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    appendTextField(text, render) {\n        // Append the text to the text array\n        this._textArray.push(text);\n        this._textUpdated(render);\n    }\n\n    /**\n     * Handles the restartFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} fromBeginning - flag indicating if the widget should restart animation from the beginning\n     */\n    restartFieldAnimation(fromBeginning) {\n        this._startScroll();\n\n        if (this._started) {\n            this._scrollActive = true;\n\n            if (fromBeginning) {\n                this._restartScroll();\n            }\n        }\n    }\n\n    /**\n     * Handles the stopFieldAnimation request from the Harmonic Template.\n     *\n     * @param {Boolean} immediate - flag indicating if the widget should stop immediately or at the end of the animation\n     */\n    stopFieldAnimation(immediate) {\n        if (immediate) {\n            this._scrollActive = false;\n        }\n        else {\n            this._stopAtEnd = true;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Places the container at the start position.\n     */\n    _restartScroll() {\n        if (this._speed >= 0) {\n            this._container.x = this._scrollBounds.x + this._scrollBounds.width;\n        }\n        else {\n            this._container.x = this._scrollBounds.x - this._containerBounds.width;\n        }\n    }\n\n    /**\n     * Handler for the VISIBLE_EVENT.\n     */\n    _onVisible() {\n        this._isVisible = true;     // update the state\n        this._startScroll();        // attempt to start the scroll\n    }\n\n    /**\n     * Starts the scroll.\n     */\n    _startScroll() {\n        // If the text array is empty, don't start.\n        if (this._textArray.length == 0) {\n            return;\n        }\n\n        // If the template is not visible yet, don't start.\n        if (!this._isVisible) {\n            return;\n        }\n\n        // Only start once\n        if (!this._started) {\n            this._started = true;\n\n            // Render the text scroll and position\n            this._renderTextScroll();\n            this._restartScroll();\n\n            // Mark the scroll active and make the container visible\n            this._scrollActive = true;\n            this._container.visible = true;\n        }\n    }\n\n    /**\n     * Anytime the text is updated, this function should be called.  It\n     * will start the scroll if it hasn't been started.  It will\n     * also determine if and when to update the text scroll.\n     *\n     * @param {Boolean} render - flag indicating if the text should be rendered\n     */\n    _textUpdated(render) {\n\n        this._startScroll();    // start the scroll\n\n        if (this._started) {\n\n            // If the scroll is not active and the render flag\n            // is true, then render the text scroll.  Otherwise,\n            // set the _textNeedsUpdate flag.\n            if ((!this._scrollActive) && render) {\n                this._renderTextScroll();\n            }\n            else {\n                this._textNeedsUpdate = true;\n            }\n        }\n    }\n\n    /**\n     * This function renders the text scroll.\n     */\n    _renderTextScroll() {\n        let bounds;\n\n        this._textNeedsUpdate = false;\n\n        this._container.visible = false;\n        this._container.removeAllChildren();\n\n        const numTextElements = this._textArray.length;\n        const numSeparators = this._separatorArray.length;\n        let separatorIndex = 0;\n\n        this._containerBounds.width = 0;\n        this._containerBounds.height = 0;\n\n        // Create a sub-container and add it to the container.\n        let subcontainer = new createjs.Container();\n        this._container.addChild(subcontainer);\n        subcontainer.x = 0;\n\n        let container_x = 0;\n        let subcontainer_x = 0;\n\n        for (let i = 0; i < numTextElements; i++) {\n\n            // Clone the text field, set the text, and make it visible.\n            let textField = this._textField.clone();\n            textField.text = this._textArray[i];\n            textField.visible = true;\n\n            // If the separatorArray is empty, then use the default text\n            // separator.\n            if ((i < numTextElements - 1) && (numSeparators == 0)) {\n                textField.text += this._separator;\n            }\n\n            // Get the bounds of the text field\n            bounds = textField.getBounds();\n\n            // Add the text field to the sub-container\n            subcontainer.addChild(textField);\n\n            // Place the textField in the sub-container at the correct\n            // horizontal position and increment x;\n            textField.x = subcontainer_x;\n            subcontainer_x += bounds.width;\n\n            // Update the container bounds\n            this._containerBounds.width += bounds.width;\n            this._containerBounds.height = bounds.height;\n\n            // Update the width of the sub-container\n            subcontainer.width = subcontainer_x;\n\n            // If separators have been specified, then add them here\n            if ((i < numTextElements - 1) && (numSeparators > 0)) {\n                // Clone the separator\n                let separator = this._separatorArray[separatorIndex].clone();\n                separatorIndex = (separatorIndex + 1) % numSeparators;\n\n                // Get the bounds\n                bounds = separator.getTransformedBounds();\n\n                // Add it to the sub-container\n                subcontainer.addChild(separator);\n\n                // Place the separator in the sub-container at the correct\n                // horizontal position and increment x;\n                separator.x = subcontainer_x;\n                separator.y = 0;\n\n                subcontainer_x += bounds.width;\n                subcontainer.width = subcontainer_x;\n\n                // Update the container bounds\n                this._containerBounds.width += bounds.width;\n            }\n\n            // If the sub-container grows beyond 32000, then cache it, and\n            // create a new subcontainer.\n            if (subcontainer.width > 32000) {\n\n                // Increment the container.x with the sub-container width\n                container_x += subcontainer.width;\n\n                // Cache the current sub-container\n                bounds = subcontainer.getBounds();\n                subcontainer.cache(bounds.x, bounds.y, bounds.width, bounds.height);\n\n                // Create a new sub-container, add it to the container, and\n                // place at the correct horizontal position\n                subcontainer = new createjs.Container();\n                this._container.addChild(subcontainer);\n                subcontainer.x = container_x;\n\n                // Reset the sub-container x value\n                subcontainer_x = 0;\n            }\n        }\n\n        // If the subcontainer is not empty, then cache it.\n        bounds = subcontainer.getBounds();\n        if (bounds) {\n            subcontainer.cache(bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n\n        this._container.visible = true;\n    }\n\n    /**\n     * This is the 'tick' handler.  It moves the container and\n     * handles when the scroll finishes.\n     *\n     * @emits {HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT} dispatched when the scroll finishes\n     */\n    _onTick() {\n        if (!this._scrollActive) {\n            return;\n        }\n\n        this._container.x -= this._speed;\n\n        let endReached = false;\n\n        if (this._speed >= 0) {\n            if (this._container.x <= this._scrollBounds.x - this._containerBounds.width) {\n                endReached = true;\n                this._container.x = this._scrollBounds.x + this._scrollBounds.width;\n            }\n        }\n        else {\n            if (this._container.x >= this._scrollBounds.x + this._scrollBounds.width) {\n                endReached = true;\n                this._container.x = this._scrollBounds.x - this._containerBounds.width;\n            }\n        }\n\n        if (endReached) {\n\n            // Dispatch the complete event when the countdown finishes.\n            let event = new CustomEvent(HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT,\n                {\n                    detail : this\n                }\n            );\n\n            document.dispatchEvent(event);\n\n            if (this._textNeedsUpdate) {\n                this._renderTextScroll();\n            }\n\n            if (this._stopAtEnd) {\n                this._scrollActive = false;\n            }\n            else {\n                this._restartScroll();\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns the current start state of the text scroll. true = started.\n     * @return {Boolean}\n     */\n    get started() {\n        return this._started;\n    }\n\n    /**\n     * Returns the current active state of the text scroll. true = active.\n     * @return {Boolean}\n     */\n    get active() {\n        return this._scrollActive;\n    }\n\n    /**\n     * Sets the speed of the scroll.\n     * @param {Number} value - number of pixels to move the scroll\n     */\n    set speed(value) {\n        this._speed = value;\n    }\n\n    /**\n     * Gets the speed of the scroll.\n     * @return {Number}\n     */\n    get speed() {\n        return this._speed;\n    }\n\n    /**\n     * Sets the array of text to display in the text scroll.\n     * @param {String[]} value - an array of text to display\n     */\n    set textArray(value) {\n        if (Array.isArray(value)) {\n            this._textArray = value;\n            this._textUpdated(true);\n        }\n        else {\n            hjs.error(\"HarmonicTextScroll.textArray: value is not an array\");\n        }\n    }\n\n    /**\n     * Gets the array of text that is being displayed.\n     * @return {Array}\n     */\n    get textArray() {\n        return this._textArray;\n    }\n\n    /**\n     * Sets the text-based separator.\n     * @param {String} value - the string to place between the text items.\n     */\n    set separator(value) {\n        this._separator = value;\n        this._textUpdated(true);\n    }\n\n    /**\n     * Gets the text-based separator.\n     * @return {String}\n     */\n    get separator() {\n        return this._separator;\n    }\n\n    /**\n     * Sets the array of separators to use between the text.  This should be\n     * an array of createjs.DisplayObjects.\n     * @param {createjs.DisplayObject[]} value - array of objects to display between text items\n     */\n    set separatorArray(value) {\n        if (Array.isArray(value)) {\n            this._separatorArray = value;\n            this._textUpdated(true);\n        }\n        else {\n            hjs.error(\"HarmonicTextScroll.separatorImageArray: value is not an array\");\n        }\n    }\n\n    /**\n     * Gets the array of separators.\n     * @return {Array}\n     */\n    get separatorArray() {\n        return this._separatorArray;\n    }\n\n    /**\n     * Sets the stop at end flag.  When true, the scroll will stop at the\n     * end of the scroll; otherwise, it will restart automatically.\n     * @param {Boolean} value - true = stop at end, false = restart\n     */\n    set stopAtEnd(value) {\n        this._stopAtEnd = value;\n    }\n\n    /**\n     * Gets the stop at end flag.\n     * @return {Boolean}\n     */\n    get stopAtEnd() {\n        return this._stopAtEnd;\n    }\n}\n\n//--------------------------------------------------------------------------\n// Events\n//--------------------------------------------------------------------------\nHarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT = \"TextScrollFinished\";\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-text-scroll.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 562,
    "kind": "class",
    "name": "HarmonicTextScroll",
    "memberof": "src/widgets/harmonic-text-scroll.js",
    "static": true,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-text-scroll.js",
    "importStyle": null,
    "description": "The HarmonicTextScroll widget provides a dynamic scrolling text field that can\nbe controlled with the widget controls.\n\nThis class implements the Harmonic HarmonicTextScroll Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicTextField widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n  This text object represents the dynamic text field.\n- The createjs.MovieClip must also contain a createjs.Bitmap child named\n  'harmonicScrollBounds'.  This bitmap represents the bounding region\n  of the scroll.  It will start to the right of the bounding region\n  and scroll to the left.  When the last of the text reaches the left\n  of the bounding region, the HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT\n  event will be dispatched on the document.\n\nNOTE:  It is the responsibility of the client to mask the bounding region\n       using the standard Adobe Animate CC mask layer.\n\nThis class defines functions for:\n\n- updateTextField - updates and renders the text\n- appendTextField - appends text to the scroll texts and renders\n- restartFieldAnimation - starts and restarts the scroll\n- stopFieldAnimation - stops the scroll\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicTextScroll object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.\n\nThere are also 2 properties that can be used:\n- textArray - an array of text to be scrolled\n- separatorArray - an array of createjs.MovieClips that can be used\n  as a graphical separator between the text.  If the separatorArray\n  is not used, then a text bullet will be used to separate the text*",
    "examples": [
      "let scroll = HarmonicTextScroll.register(this);\nscroll.updateTextField(\"scrolling text\", true);\nscroll.speed = 3;\n\ndocument.addEventListener(HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT, (event) => {\n    hjs.info(\"the scroll is complete\");\n    scroll.restartFieldAnimation(true);\n});"
    ],
    "lineNumber": 61,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 563,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@listen",
        "tagValue": "{HarmonicTemplate.VISIBLE_EVENT} used to determine if the template is visible"
      },
      {
        "tagName": "@listen",
        "tagValue": "{'tick'} used to move the scroll"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      }
    ]
  },
  {
    "__docId__": 564,
    "kind": "member",
    "name": "_speed",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_speed",
    "access": "private",
    "description": "Speed of the scroll.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 565,
    "kind": "member",
    "name": "_textArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_textArray",
    "access": "private",
    "description": "Array of text to be displayed on the scroll.stringify",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "_separatorArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_separatorArray",
    "access": "private",
    "description": "Array of MovieClips used as the separators between the text (optional)",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "_separator",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_separator",
    "access": "private",
    "description": "If a separatorArray is not set, this will be the separator between the text",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "_textField",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_textField",
    "access": "private",
    "description": "The createjs.Text object in the createjs object.  This will be used\nto clone the Text when building the container.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Text"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "_scrollBounds",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_scrollBounds",
    "access": "private",
    "description": "The bounds of the scroll.  This is defined by the harmonicScrollBounds\nobject located in the createjs object.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "_container",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_container",
    "access": "private",
    "description": "A createjs.Container to hold all of the createjs.Text objects and separators.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Container"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "_containerBounds",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_containerBounds",
    "access": "private",
    "description": "A createjs.Rectangle that defines the bounds of the container.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "createjs.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "_isVisible",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_isVisible",
    "access": "private",
    "description": "Flag to indicate if the scroll is visible.  The scroll won't start until\nit is visible.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "_started",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_started",
    "access": "private",
    "description": "Flag to keep track if the scroll has been started.",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "_textNeedsUpdate",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_textNeedsUpdate",
    "access": "private",
    "description": "Flag used to determine if the text needs updating when restarted.",
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "_scrollActive",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_scrollActive",
    "access": "private",
    "description": "Flag that tracks the active state of the scroll.",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "_stopAtEnd",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_stopAtEnd",
    "access": "private",
    "description": "Flag to indicate if the scroll should stop at the end.",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicTextScroll will be created in this function.\n\nNOTE:  The createjs object must have a property called\n'harmonicScrollBounds'.  This object will be used to\nidentify the bounds of the text scroll.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicTextScroll instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.\nDelete all elements in the text array and add the new text.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#appendTextField",
    "access": "public",
    "description": "Handles the appendTextField request from the Harmonic Template.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to append to the display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#restartFieldAnimation",
    "access": "public",
    "description": "Handles the restartFieldAnimation request from the Harmonic Template.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "flag indicating if the widget should restart animation from the beginning"
      }
    ],
    "return": null
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#stopFieldAnimation",
    "access": "public",
    "description": "Handles the stopFieldAnimation request from the Harmonic Template.",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "flag indicating if the widget should stop immediately or at the end of the animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "_restartScroll",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_restartScroll",
    "access": "private",
    "description": "Places the container at the start position.",
    "lineNumber": 267,
    "params": [],
    "return": null
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "_onVisible",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_onVisible",
    "access": "private",
    "description": "Handler for the VISIBLE_EVENT.",
    "lineNumber": 279,
    "params": [],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "_startScroll",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_startScroll",
    "access": "private",
    "description": "Starts the scroll.",
    "lineNumber": 287,
    "params": [],
    "return": null
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "_textUpdated",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_textUpdated",
    "access": "private",
    "description": "Anytime the text is updated, this function should be called.  It\nwill start the scroll if it hasn't been started.  It will\nalso determine if and when to update the text scroll.",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the text should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "_renderTextScroll",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_renderTextScroll",
    "access": "private",
    "description": "This function renders the text scroll.",
    "lineNumber": 340,
    "params": [],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "_onTick",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#_onTick",
    "access": "private",
    "description": "This is the 'tick' handler.  It moves the container and\nhandles when the scroll finishes.",
    "lineNumber": 455,
    "emits": [
      {
        "types": [
          "HarmonicTextScroll.TEXT_SCROLL_FINISHED_EVENT"
        ],
        "description": "dispatched when the scroll finishes"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 597,
    "kind": "get",
    "name": "started",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#started",
    "access": "public",
    "description": "Returns the current start state of the text scroll. true = started.",
    "lineNumber": 509,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "get",
    "name": "active",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#active",
    "access": "public",
    "description": "Returns the current active state of the text scroll. true = active.",
    "lineNumber": 517,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "set",
    "name": "speed",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#speed",
    "access": "public",
    "description": "Sets the speed of the scroll.",
    "lineNumber": 525,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "number of pixels to move the scroll"
      }
    ]
  },
  {
    "__docId__": 601,
    "kind": "get",
    "name": "speed",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#speed",
    "access": "public",
    "description": "Gets the speed of the scroll.",
    "lineNumber": 533,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "set",
    "name": "textArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#textArray",
    "access": "public",
    "description": "Sets the array of text to display in the text scroll.",
    "lineNumber": 541,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "an array of text to display"
      }
    ]
  },
  {
    "__docId__": 604,
    "kind": "get",
    "name": "textArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#textArray",
    "access": "public",
    "description": "Gets the array of text that is being displayed.",
    "lineNumber": 555,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "set",
    "name": "separator",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#separator",
    "access": "public",
    "description": "Sets the text-based separator.",
    "lineNumber": 563,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the string to place between the text items."
      }
    ]
  },
  {
    "__docId__": 607,
    "kind": "get",
    "name": "separator",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#separator",
    "access": "public",
    "description": "Gets the text-based separator.",
    "lineNumber": 572,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "set",
    "name": "separatorArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#separatorArray",
    "access": "public",
    "description": "Sets the array of separators to use between the text.  This should be\nan array of createjs.DisplayObjects.",
    "lineNumber": 581,
    "params": [
      {
        "nullable": null,
        "types": [
          "createjs.DisplayObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "array of objects to display between text items"
      }
    ]
  },
  {
    "__docId__": 610,
    "kind": "get",
    "name": "separatorArray",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#separatorArray",
    "access": "public",
    "description": "Gets the array of separators.",
    "lineNumber": 595,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "set",
    "name": "stopAtEnd",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#stopAtEnd",
    "access": "public",
    "description": "Sets the stop at end flag.  When true, the scroll will stop at the\nend of the scroll; otherwise, it will restart automatically.",
    "lineNumber": 604,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = stop at end, false = restart"
      }
    ]
  },
  {
    "__docId__": 613,
    "kind": "get",
    "name": "stopAtEnd",
    "memberof": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-text-scroll.js~HarmonicTextScroll#stopAtEnd",
    "access": "public",
    "description": "Gets the stop at end flag.",
    "lineNumber": 612,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "file",
    "name": "src/widgets/harmonic-video.js",
    "content": "/**\r\n * File: harmonic-video.js\r\n *\r\n * Copyright (c) 2019 Harmonic, Inc.\r\n */\r\n\r\n/**\r\n * The HarmonicVideo widget provides a video component that is synchronized with\r\n * the Harmonic Template timeline.  Since loading an external video source\r\n * takes time, this widget will hold off load complete until the video can play\r\n * through without additional fetching.  This component will start the video at\r\n * the correct time, but playback is controlled by Chrome so frame accuracy is\r\n * not alway achievable.\r\n *\r\n * CAUTION:\r\n * - Running fullscreen video files inside a HTML template is not recommended.\r\n * - Video files should be as small as possible so that they do not impact the\r\n *   template playback.\r\n * - Run fullscreen video files separately on their own layer.  Not in a HTML template.\r\n * - Running fullscreen video files inside a HTML template may impact playback of the\r\n *   template and will most likely result in repeat or missed frames.\r\n *\r\n * This class implements the Harmonic Video Widget.  It derives from\r\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\r\n * needs of this widget.\r\n *\r\n * The HarmonicVideo widget requires that the registered createdjs object have\r\n * the following structure:\r\n *\r\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\r\n *   {@link HarmonicWidget}).\r\n * - The createjs.MovieClip must contain a video component with the class parameter\r\n *   set to a unique name.  This name is used to locate the video element in the DOM\r\n *   once it is created by the Adobe code.\r\n *\r\n * In order for video element to be located in the DOM, the value specified in\r\n * the Component Parameter class text box in Adobe Animate must be passed to the\r\n * register function.  This is required since there is no way to identify the\r\n * video element that the Adobe component code creates.\r\n *\r\n * This class defines functions for:\r\n *\r\n * - updateTextField - allows changes to 'src' and 'currentTime'\r\n *   - Syntax:\r\n *     - src:<name of src>\r\n *     - currentTime:<float>\r\n *       - if the render parameter = true, play after set, else pause after set\r\n * - restartFieldAnimation - restarts/resumes video playback\r\n * - stopFieldAnimation - pauses video playback (immediate parameter ignored)\r\n *\r\n * To use this class, register the createjs object using the\r\n * static register function.  The video Component Parameter class name must\r\n * be specified as the second parameter (\"myVideo\" below). The created\r\n * HarmonicVideo object is returned from the register function.  If there is an\r\n * error, then 'undefined' is returned and an error will be logged.\r\n *\r\n * @example\r\n * // 'myVideo' is the name specified in the video Component Parameter class text box\r\n * // true = remove the poster attribute from the video element (default = true)\r\n * let harmonicVideo = HarmonicVideo.register(this, \"myVideo\", true);\r\n *\r\n * // The Harmonic Video widget will dispatch the VIDEO_ELEMENT_STATE_EVENT when the\r\n * // video element property is determined.  Ues isVideoElementValid() to\r\n * // determine if it is valid.\r\n * document.addEventListener(HarmonicVideo.VIDEO_ELEMENT_STATUS_EVENT, onVideoElementStatus.bind(this));\r\n *\r\n * function onVideoElementStatus(event) {\r\n *     hjs.info(\"onVideoElementStatus: valid: \" + event.detail.isVideoElementValid() + \" class: \" + event.detail.class);\r\n * }\r\n */\r\nclass HarmonicVideo extends HarmonicWidget {\r\n\r\n    /**\r\n     * Constructor\r\n     * - initializes all member variables\r\n     *\r\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\r\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\r\n     * @param {String} name - the name of the widget\r\n     * @param {Object} createjsObj - the createjs object associated with this widget\r\n     * @param {String} className - as specified in the Adobe Animate video component\r\n     * @param {Boolean} removePoster - if true, removes the poster attribute on the video element\r\n     */\r\n    constructor(widgetType, fieldNum, name, createjsObj, className, removePoster ) {\r\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\r\n\r\n        hjs.debug(\"HarmonicVideo.constructor\");\r\n\r\n        /**\r\n         * Name of the class parameter in the Adobe Animate video component parameters\r\n         * @type {String}\r\n         */\r\n        this._class = className;\r\n\r\n        /**\r\n         * Flag indicating whether to remove the poster attribute on the video element.\r\n         * If the poster is not removed and the image is blank, then the first frame\r\n         * of video may be blank.\r\n         * @type {Boolean}\r\n         */\r\n        this._removePoster = removePoster;\r\n\r\n        /**\r\n         * The video element - found in the DOM identified by the class name.\r\n         * @type {Object}\r\n         */\r\n        this._video = null;\r\n\r\n        /**\r\n         * Flag indicating if the load processing is complete.\r\n         * @type {Boolean}\r\n         */\r\n        this._loadComplete = false;\r\n\r\n        /**\r\n         * Counter used to determine if the load is taking too long.\r\n         * @type {Number}\r\n         */\r\n        this._loadCounter = 0;\r\n\r\n        /**\r\n         * Tracks the state of the load processing.\r\n         * @type {Number}\r\n         */\r\n        this._loadState = HarmonicVideo.STATE_WAITING_FOR_HAVE_ENOUGH_DATA;\r\n\r\n        /**\r\n         * Flag used to perform special processing on the first restartFieldAnimation.\r\n         * @type {Boolean}\r\n         */\r\n        this._firstRestartFieldAnimation = true;\r\n\r\n        requestAnimationFrame(() => {\r\n\r\n            this._video = document.getElementById(this._class);\r\n            if (this._video) {\r\n                if (this._removePoster) {\r\n                    this._video.removeAttribute(\"poster\");\r\n                }\r\n            }\r\n            else {\r\n                hjs.error(\"Unable to locate the video element in the DOM: class: \" + this._class);\r\n            }\r\n\r\n            this._dispatchEvent();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a createjs object with the widget.  The className parameter must\r\n     * match the Adobe Animate Component Parameter class value.  A new HarmonicVideo object\r\n     * will be created in this function.\r\n     *\r\n     * @param {Object} createjsObj - the createjs object to associate with this widget\r\n     * @param {String} className - the Adobe Component Parameter class value\r\n     * @param {Boolean} removePoster - if true, removes the poster attribute on the video element\r\n     *\r\n     * @return {Object} the newly created HarmonicVideo instance, or undefined if there is an error\r\n     */\r\n    static register(createjsObj, className, removePoster = true) {\r\n        let result = HarmonicWidget.validate(\"HarmonicVideo\", createjsObj, false);\r\n        if (result) {\r\n            return new HarmonicVideo(HarmonicTemplate.WIDGET_TYPE_VIDEO, result.fieldNum, result.name, createjsObj, className, removePoster);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the video element is valid, else false\r\n     * @returns {Boolean}\r\n     */\r\n    isVideoElementValid() {\r\n        if (this._video) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Queried by the Harmonic Template to verify that the widget is loaded\r\n     * before sending the load complete signal.\r\n     *\r\n     * Waits for the video element to report a readyState of HAVE_ENOUGH_DATA.\r\n     * Once this is determined, an asynchronous play is invoked and the promise\r\n     * is examined next.  If successful, video is paused and the loading process\r\n     * is complete.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    isLoaded() {\r\n\r\n        if (!this._video) {\r\n            return false;\r\n        }\r\n\r\n        // Once the load processing is complete, exit without running the below logic.\r\n        if (this._loadComplete) {\r\n            return true;\r\n        }\r\n\r\n        this._loadCounter++;\r\n\r\n        switch (this._loadState) {\r\n\r\n            case HarmonicVideo.STATE_WAITING_FOR_HAVE_ENOUGH_DATA:\r\n\r\n                // Wait for the readyState to be HAVE_ENOUGH_DATA before continuing.\r\n                if (this._video.readyState == this._video.HAVE_ENOUGH_DATA) {\r\n                    this._loadState = HarmonicVideo.STATE_WAITING_FOR_PLAY_PROMISE;\r\n\r\n                    hjs.info(\"class: \" + this._class + \" event: HAVE_ENOUGH_DATA readyState: \" + this._video.readyState + \" counter: \" + this._loadCounter);\r\n\r\n                    // The play() is an asynchronous call that returns a promise.\r\n                    // Update the state in the promise result.\r\n                    let playPromise = this._video.play();\r\n                    if (playPromise !== undefined) {\r\n                        playPromise.then(function(result) {\r\n                            this._video.pause();        // Pause video\r\n                            this._loadState = HarmonicVideo.STATE_LOAD_COMPLETE;\r\n                        }.bind(this),\r\n                        function(err) {\r\n                            hjs.error(\"Play was prevented: error: \" + err);\r\n                            this._loadState = HarmonicVideo.STATE_LOAD_COMPLETE;\r\n                        }.bind(this));\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case HarmonicVideo.STATE_WAITING_FOR_PLAY_PROMISE:\r\n                // Waiting for the promise to return\r\n                break;\r\n\r\n            case HarmonicVideo.STATE_LOAD_COMPLETE:\r\n                hjs.info(\"class: \" + this._class + \" event: LOAD_COMPLETE readyState: \" + this._video.readyState + \" counter: \" + this._loadCounter);\r\n                this._loadState = true;\r\n                return true;\r\n\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the updateTextField request from the Harmonic Template.\r\n     *\r\n     * @param {String} text - the text to display\r\n     * @param {Boolean} render - flag indicating if the field should be rendered\r\n     */\r\n    updateTextField(text, render) {\r\n        if (!this._video) {\r\n            hjs.error(\"HarmonicVideo.updateTextField failed: this._video is undefined\");\r\n            return;\r\n        }\r\n\r\n        if (text.startsWith(\"src:\")) {\r\n            this._video.setAttribute(\"src\", text.slice(4));\r\n        }\r\n        else if (text.startsWith(\"currentTime:\")) {\r\n            let value = Number(text.slice(12));\r\n            if (!Number.isNaN(value)) {\r\n                this._video.currentTime = value;\r\n            }\r\n            else {\r\n                hjs.error(\"HarmonicVideo.updateTextField failed: invalid number: \" + value);\r\n            }\r\n        }\r\n        else {\r\n            hjs.error(\"HarmonicVideo.updateTextField failed: invalid command: \" + text);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the restartFieldAnimation request from the Harmonic Template.\r\n     *\r\n     * @param {Boolean} fromBeginning - flag indicating if the widget should restart animation from the beginning\r\n     */\r\n    restartFieldAnimation(fromBeginning) {\r\n        hjs.debug(\"restartFieldAnimation fromBeginning: \" + fromBeginning);\r\n\r\n        if (!this._video) {\r\n            return;\r\n        }\r\n\r\n        if (fromBeginning) {\r\n            if (this._firstRestartFieldAnimation) {\r\n                this._firstRestartFieldAnimation = false;\r\n                let autoplay = this._video.getAttribute(\"autoplay\");\r\n\r\n                // Only start playing if autoplay is specified\r\n                if (autoplay != null) {\r\n                    this._video.currentTime = 0.0;\r\n                    this._video.play();\r\n                }\r\n            }\r\n            else {\r\n                this._video.pause();\r\n                this._video.currentTime = 0.0;\r\n                this._video.play();\r\n            }\r\n        }\r\n        else {\r\n            this._video.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the stopFieldAnimation request from the Harmonic Template.\r\n     *\r\n     * @param {Boolean} immediate - flag indicating if the widget should stop immediately or at the end of the animation\r\n     */\r\n    stopFieldAnimation(immediate) {\r\n        hjs.debug(\"stopFieldAnimation immediate: \" + immediate);\r\n\r\n        if (!this._video) {\r\n            return;\r\n        }\r\n\r\n        this._video.pause();\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    // Private Methods\r\n    //--------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Dispatches the VIDEO_ELEMENT_STATE_EVENT.\r\n     */\r\n    _dispatchEvent() {\r\n        // Dispatch the video element status event.\r\n        let event = new CustomEvent(HarmonicVideo.VIDEO_ELEMENT_STATUS_EVENT,\r\n            {\r\n                detail : this\r\n            }\r\n        );\r\n\r\n        document.dispatchEvent(event);\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    // Properties\r\n    //--------------------------------------------------------------------------\r\n    /**\r\n     * Gets the video element.\r\n     */\r\n    get video() {\r\n        return this._video;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name specified at construction.\r\n     */\r\n    get class() {\r\n        return this._class;\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// Events\r\n//------------------------------------------------------------------------------\r\nHarmonicVideo.VIDEO_ELEMENT_STATUS_EVENT = \"VideoElementStatusEvent\";\r\n\r\n//------------------------------------------------------------------------------\r\n// Constants\r\n//------------------------------------------------------------------------------\r\n\r\n//\r\n// State\r\n//\r\nHarmonicVideo.STATE_WAITING_FOR_HAVE_ENOUGH_DATA = 0;\r\nHarmonicVideo.STATE_WAITING_FOR_PLAY_PROMISE = 1;\r\nHarmonicVideo.STATE_LOAD_COMPLETE = 2;\r\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-video.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "class",
    "name": "HarmonicVideo",
    "memberof": "src/widgets/harmonic-video.js",
    "static": true,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-video.js",
    "importStyle": null,
    "description": "The HarmonicVideo widget provides a video component that is synchronized with\nthe Harmonic Template timeline.  Since loading an external video source\ntakes time, this widget will hold off load complete until the video can play\nthrough without additional fetching.  This component will start the video at\nthe correct time, but playback is controlled by Chrome so frame accuracy is\nnot alway achievable.\n\nCAUTION:\n- Running fullscreen video files inside a HTML template is not recommended.\n- Video files should be as small as possible so that they do not impact the\n  template playback.\n- Run fullscreen video files separately on their own layer.  Not in a HTML template.\n- Running fullscreen video files inside a HTML template may impact playback of the\n  template and will most likely result in repeat or missed frames.\n\nThis class implements the Harmonic Video Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe HarmonicVideo widget requires that the registered createdjs object have\nthe following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a video component with the class parameter\n  set to a unique name.  This name is used to locate the video element in the DOM\n  once it is created by the Adobe code.\n\nIn order for video element to be located in the DOM, the value specified in\nthe Component Parameter class text box in Adobe Animate must be passed to the\nregister function.  This is required since there is no way to identify the\nvideo element that the Adobe component code creates.\n\nThis class defines functions for:\n\n- updateTextField - allows changes to 'src' and 'currentTime'\n  - Syntax:\n    - src:<name of src>\n    - currentTime:<float>\n      - if the render parameter = true, play after set, else pause after set\n- restartFieldAnimation - restarts/resumes video playback\n- stopFieldAnimation - pauses video playback (immediate parameter ignored)\n\nTo use this class, register the createjs object using the\nstatic register function.  The video Component Parameter class name must\nbe specified as the second parameter (\"myVideo\" below). The created\nHarmonicVideo object is returned from the register function.  If there is an\nerror, then 'undefined' is returned and an error will be logged.",
    "examples": [
      "// 'myVideo' is the name specified in the video Component Parameter class text box\n// true = remove the poster attribute from the video element (default = true)\nlet harmonicVideo = HarmonicVideo.register(this, \"myVideo\", true);\n\n// The Harmonic Video widget will dispatch the VIDEO_ELEMENT_STATE_EVENT when the\n// video element property is determined.  Ues isVideoElementValid() to\n// determine if it is valid.\ndocument.addEventListener(HarmonicVideo.VIDEO_ELEMENT_STATUS_EVENT, onVideoElementStatus.bind(this));\n\nfunction onVideoElementStatus(event) {\n    hjs.info(\"onVideoElementStatus: valid: \" + event.detail.isVideoElementValid() + \" class: \" + event.detail.class);\n}"
    ],
    "lineNumber": 71,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 616,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "as specified in the Adobe Animate video component"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "removePoster",
        "description": "if true, removes the poster attribute on the video element"
      }
    ]
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "_class",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_class",
    "access": "private",
    "description": "Name of the class parameter in the Adobe Animate video component parameters",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "_removePoster",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_removePoster",
    "access": "private",
    "description": "Flag indicating whether to remove the poster attribute on the video element.\nIf the poster is not removed and the image is blank, then the first frame\nof video may be blank.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "_video",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_video",
    "access": "private",
    "description": "The video element - found in the DOM identified by the class name.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "_loadComplete",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_loadComplete",
    "access": "private",
    "description": "Flag indicating if the load processing is complete.",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "_loadCounter",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_loadCounter",
    "access": "private",
    "description": "Counter used to determine if the load is taking too long.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "_loadState",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_loadState",
    "access": "private",
    "description": "Tracks the state of the load processing.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "_firstRestartFieldAnimation",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_firstRestartFieldAnimation",
    "access": "private",
    "description": "Flag used to perform special processing on the first restartFieldAnimation.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  The className parameter must\nmatch the Adobe Animate Component Parameter class value.  A new HarmonicVideo object\nwill be created in this function.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "the Adobe Component Parameter class value"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "removePoster",
        "description": "if true, removes the poster attribute on the video element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicVideo instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "isVideoElementValid",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#isVideoElementValid",
    "access": "public",
    "description": "Returns true if the video element is valid, else false",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "isLoaded",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#isLoaded",
    "access": "public",
    "description": "Queried by the Harmonic Template to verify that the widget is loaded\nbefore sending the load complete signal.\n\nWaits for the video element to report a readyState of HAVE_ENOUGH_DATA.\nOnce this is determined, an asynchronous play is invoked and the promise\nis examined next.  If successful, video is paused and the loading process\nis complete.",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#restartFieldAnimation",
    "access": "public",
    "description": "Handles the restartFieldAnimation request from the Harmonic Template.",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "flag indicating if the widget should restart animation from the beginning"
      }
    ],
    "return": null
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#stopFieldAnimation",
    "access": "public",
    "description": "Handles the stopFieldAnimation request from the Harmonic Template.",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "flag indicating if the widget should stop immediately or at the end of the animation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "_dispatchEvent",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#_dispatchEvent",
    "access": "private",
    "description": "Dispatches the VIDEO_ELEMENT_STATE_EVENT.",
    "lineNumber": 332,
    "params": [],
    "return": null
  },
  {
    "__docId__": 637,
    "kind": "get",
    "name": "video",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#video",
    "access": "public",
    "description": "Gets the video element.",
    "lineNumber": 349,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "get",
    "name": "class",
    "memberof": "src/widgets/harmonic-video.js~HarmonicVideo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-video.js~HarmonicVideo#class",
    "access": "public",
    "description": "Gets the class name specified at construction.",
    "lineNumber": 356,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "file",
    "name": "src/widgets/harmonic-widget.js",
    "content": "/**\n * File:  harmonic-widget.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * This class is the base class for all Harmonic Widgets.  All widgets should\n * be derived from this class.\n *\n * During construction, this class will:\n * 1.  Add a listener to the document for the WIDGET_EVENT_<fieldNum> event.\n *     The listener function is called '_onWidgetEvent'.  This function\n *     will handle all communication from the Harmonic Template.  It is\n *     the responsibility of the derived class to implement the functions\n *     that they need.  Reference the list below.\n * 2.  Dispatch the WIDGET_CREATED event.  This event will be received by\n *     the Harmonic Template.  The Harmonic Template will maintain a list\n *     of all created widgets.\n *\n * Functions that should be overridden by derived classes if needed:\n * - updateTextField\n * - appendTextField\n * - updateImageField\n * - renderField\n * - restartFieldAnimation\n * - stopFieldAnimation\n *\n * In Adobe Animate, a widget is a createjs.MovieClip.  The naming convention\n * for widgets is 'field<fieldNum>_<name>'.  Where <fieldNum> is a number from\n * 0-254 and uniquely identifies the widget.  <name> is a string that will\n * be included in the Template Description.\n *\n * Since a createjs.MovieClip is a container, it can contain children.  Widgets\n * should validate that they contain their required children before allowing\n * the register function to succeed.  Reference each widget to better understand\n * their required children.\n */\nclass HarmonicWidget {\n\n    /**\n     * Constructor:\n     * - initializes all member variables\n     * - adds a listener on the document for the WIDGET_EVENT\n     * - dispatches the WIDGET_CREATED_EVENT\n     *\n     * @emits   {HarmonicTemplate.WIDGET_CREATED_EVENT} once this object is constructed, this event is dispatched.\n     * @listens {HarmonicTemplate.WIDGET_EVENT_<fieldNum>} listens for commands from the Harmonic Template\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     * @param {Object} includeInTemplateDescription - if true, the Harmonic Template will include in the template description\n     */\n    constructor(widgetType, fieldNum, name, createjsObj, includeInTemplateDescription) {\n\n        /**\n         * The type of widget.\n         * @type {String}\n         */\n        this._widgetType = widgetType;\n\n        /**\n         * The field number for this widget.\n         * @type {Number}\n         */\n        this._fieldNum = fieldNum;\n\n        /**\n         * The name of this widget.\n         * @type {String}\n         */\n        this._name = name;\n\n        /**\n         * The createjs object associated with this widget.\n         * @type {Object}\n         */\n        this._createjsObj = createjsObj;\n\n        /**\n         * Whether or not this widget should be included in the template description.\n         * @type {Boolean}\n         */\n        this._includeInTemplateDescription = includeInTemplateDescription;\n\n        /**\n         * The name of the event this widget listens for.\n         * @type {String}\n         */\n        this._widgetEventName = HarmonicTemplate.WIDGET_EVENT + \"_\" + fieldNum;\n\n        // Listen for the WIDGET_EVENT + \"_\" + <fieldNum>\n        document.addEventListener(this._widgetEventName, (event) => {\n            this._onWidgetEvent(event);\n        });\n\n        // Dispatch the WIDGET_CREATED_EVENT\n        document.dispatchEvent(new CustomEvent(HarmonicTemplate.WIDGET_CREATED_EVENT, { detail : this } ));\n    }\n\n    /**\n     * Handler for the WIDGET_EVENT that is dispatched by Harmonic Template as\n     * functions are received.\n     *\n     * @param {CustomEvent} event - the event dispatched by the Harmonic Template\n     * @param {String} event.functionName - the function associated with the event\n     */\n    _onWidgetEvent(event) {\n        hjs.debug(this._widgetEventName + \" received: \" + JSON.stringify(event.detail));\n        switch (event.detail.functionName) {\n            case HarmonicTemplate.UPDATE_TEXT_FIELD:\n                this.updateTextField(event.detail.text, event.detail.render);\n                break;\n            case HarmonicTemplate.APPEND_TEXT_FIELD:\n                this.appendTextField(event.detail.text, event.detail.render);\n                break;\n            case HarmonicTemplate.UPDATE_IMAGE_FIELD:\n                this.updateImageField(event.detail.imagePath);\n                break;\n            case HarmonicTemplate.RENDER_FIELD:\n                this.renderField();\n                break;\n            case HarmonicTemplate.RESTART_FIELD_ANIMATION:\n                this.restartFieldAnimation(event.detail.fromBeginning);\n                break;\n            case HarmonicTemplate.STOP_FIELD_ANIMATION:\n                this.stopFieldAnimation(event.detail.immediate);\n                break;\n            default:\n                hjs.error(this._widgetEventName + \" received invalid functionName: \" + event.detail.functionName);\n                break;\n        }\n    }\n\n    /**\n     * Queried by the Harmonic Template to verify that the widget is loaded\n     * before sending the load complete signal.\n     *\n     * @abstract\n     *\n     * @returns {Boolean}\n     */\n    isLoaded() {\n        return true;\n    }\n\n    /**\n     * Updates the internal text field.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     *\n     * @param {String} text - text to render\n     * @param {render} render - if true, render now, otherwise wait for the renderField\n     */\n    updateTextField(text, render) {\n    }\n\n    /**\n     * Appends to the internal text field.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     *\n     * @param {String} text - text to add to the rendered text\n     * @param {render} render - if true, render now, otherwise wait for the renderField\n     */\n    appendTextField(text, render) {\n    }\n\n    /**\n     * Updates the internal image.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     *\n     * @param {String} imagePath - the path to the image\n     */\n    updateImageField(imagePath) {\n    }\n\n    /**\n     * Renders the field.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     */\n    renderField() {\n    }\n\n    /**\n     * Start/Restart the field animation.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     *\n     * @param {Boolean} fromBeginning - true = restart from beginning, otherwise restart from the current frame\n     */\n    restartFieldAnimation(fromBeginning) {\n    }\n\n    /**\n     * Stops the field animation.\n     *\n     * This function should be overridden by the derived class if it\n     * needs this functionality.\n     *\n     * @abstract\n     *\n     * @param {Boolean} immediate - true = stop immediately, otherwise, stop at the end of the animation\n     */\n    stopFieldAnimation(immediate) {\n    }\n\n    //--------------------------------------------------------------------------\n    // Static Methods\n    //--------------------------------------------------------------------------\n\n    /**\n     * Helper function for parsing the name of the createjs object.  The name\n     * should be structured like:  'field<fieldNum>_<name>'.\n     *\n     * @param {Object} createjsObj - the createjs object\n     *\n     * @return {Object} object with the following properties\n     * @property {Number} fieldNum - the field number parsed from the createjs object name\n     * @property {String} name - the name parsed from the createjs object name\n     */\n    static parseName(createjsObj) {\n\n        // Syntax 'field<num>_<name>'\n\n        // The name must start with 'field'\n        if (createjsObj.name.search(\"field\") != 0) {\n            return undefined;\n        }\n\n        // Split at the underscore\n        let arr = createjsObj.name.split('_');\n        let fieldNum = parseInt(arr[0].replace(\"field\", \"\"));\n\n        var pos = createjsObj.name.indexOf('_');\n        let name = createjsObj.name.slice(pos + 1);\n\n        // Return the field number and name\n        return {\n            fieldNum: fieldNum,\n            name: name\n        };\n    }\n\n    /**\n     * Attempts to discover the name of the createjs object by\n     * iterating through the parent's key/value pairs.  Once the\n     * value of the key matches the createobj, then the name is\n     * the key.\n     *\n     * This function was added to support the Adobe Animate v20\n     * generated JavaScript.  Adobe removed the 'name' property\n     * on MovieClips, so now the name must be discovered.\n     *\n     * @param {Object} createjsObj\n     *\n     * @return {String}\n     */\n    static discoverName(createjsObj) {\n        if (createjsObj) {\n            if (createjsObj.parent) {\n                for (var key of Object.keys(createjsObj.parent)) {\n                    if (createjsObj.parent[key] === createjsObj) {\n                        return key;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Validates that the createjs object is structured properly.\n     * Widgets should be composed of a createjs MovieClip and named\n     * correctly.  Also, if the MovieClip contains a TextField, it\n     * too must be named correctly.\n     *\n     * Proper naming:\n     * - MovieClip name:  'field<fieldNum>_<name>'\n     * - TextField name:  harmonicField\n     *\n     * @param {String} derivedClass - the name of the derived class.  This will be used for logging.\n     * @param {Object} createjsObj - the createjs object\n     * @param {Boolean} containsTextField - indicates if the MovieClip contains a TextField to be validated\n     *\n     * @return {Object} returns an object if validation passes; otherwise, undefined is returned\n     * @property {Number} fieldNum - the field number parsed from the createjs object name\n     * @property {String} name - the name parsed from the createjs object name\n     */\n    static validate(derivedClass, createjsObj, containsTextField) {\n        let result = undefined;\n\n        if (!createjsObj instanceof createjs.MovieClip) {           // Must be a movie clip\n            hjs.error(derivedClass + \".register: createjsObj is not a container\");\n            return undefined;\n        }\n\n        if ((!createjsObj.hasOwnProperty(\"name\")) || (createjsObj.name == null)) { // The movie clip must have a name\n            let name = HarmonicWidget.discoverName(createjsObj);\n            if (name) {\n                createjsObj.name = name;\n            }\n            else {\n                hjs.error(derivedClass + \".register: registered movie clip is not named\");\n                return undefined;\n            }\n        }\n\n        if (createjsObj.name.search(\"field\") != 0) {           // The name of the object must start with 'field'\n            hjs.error(derivedClass + \".register: registered text field is not named correctly: name: \" + createjsObj.name);\n            return undefined;\n        }\n\n        if (containsTextField) {\n            if ((derivedClass === \"HarmonicLabel\") || (derivedClass === \"HarmonicLabelScroll\")) {\n                if (!createjsObj.hasOwnProperty(createjsObj.name)) {     // Must have a property named the same as the parent to uniquely identify the label\n                    hjs.error(derivedClass + \".register: the createjs object must contain a label named \" + createjsObj.name);\n                    return undefined;\n                }\n            }\n            else {\n                if (!createjsObj.hasOwnProperty(\"harmonicField\")) {     // Must have a property called harmonicField that identifies the textField\n                    hjs.error(derivedClass + \".register: the createjs object must contain a textfield named harmonicField\");\n                    return undefined;\n                }\n\n                if (!createjsObj.harmonicField instanceof createjs.Text) {         // The property must be a createjs.Text object\n                    hjs.error(derivedClass + \".register: the harmonicField must be a createjs.Text object\");\n                    return undefined;\n                }\n            }\n        }\n\n        // Parse the name\n        result = HarmonicWidget.parseName(createjsObj);\n        if (result === undefined) {\n            hjs.error(derivedClass + \".registered createjs object is not named correctly: name: \" + createjsObj.name);\n            return undefined;\n        }\n\n        // Only allow the widget to be registered once\n        if (harmonicTemplate.isWidgetdRegistered(result.fieldNum)) {\n            hjs.error(derivedClass + \".register: the fieldNum: \" + result.fieldNum + \" + has already been registered\");\n            return undefined;\n        }\n\n        return result;\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n    /**\n     * Returns the type of widget.\n     * @type {String}\n     */\n    get widgetType() { return this._widgetType; }\n\n    /**\n     * Returns the field number associated with this widget (derived from the name of the createjs object).\n     * @type {Number}\n     */\n    get fieldNum() { return this._fieldNum; }\n\n    /**\n     * Returns the name of the widget (derived from the name of the createjs object).\n     * @type {String}\n     */\n    get name() { return this._name; }\n\n    /**\n     * Returns the createjs object associated with this widget.\n     * @type {Object}\n     */\n    get createjsObj() { return this._createjsObj; }\n\n    /**\n     * Returns true if this widget should be included in the template description.\n     * @type {Boolean}\n     */\n    get includeInTemplateDescription() { return this._includeInTemplateDescription; }\n\n}\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-widget.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 640,
    "kind": "class",
    "name": "HarmonicWidget",
    "memberof": "src/widgets/harmonic-widget.js",
    "static": true,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-widget.js",
    "importStyle": null,
    "description": "This class is the base class for all Harmonic Widgets.  All widgets should\nbe derived from this class.\n\nDuring construction, this class will:\n1.  Add a listener to the document for the WIDGET_EVENT_<fieldNum> event.\n    The listener function is called '_onWidgetEvent'.  This function\n    will handle all communication from the Harmonic Template.  It is\n    the responsibility of the derived class to implement the functions\n    that they need.  Reference the list below.\n2.  Dispatch the WIDGET_CREATED event.  This event will be received by\n    the Harmonic Template.  The Harmonic Template will maintain a list\n    of all created widgets.\n\nFunctions that should be overridden by derived classes if needed:\n- updateTextField\n- appendTextField\n- updateImageField\n- renderField\n- restartFieldAnimation\n- stopFieldAnimation\n\nIn Adobe Animate, a widget is a createjs.MovieClip.  The naming convention\nfor widgets is 'field<fieldNum>_<name>'.  Where <fieldNum> is a number from\n0-254 and uniquely identifies the widget.  <name> is a string that will\nbe included in the Template Description.\n\nSince a createjs.MovieClip is a container, it can contain children.  Widgets\nshould validate that they contain their required children before allowing\nthe register function to succeed.  Reference each widget to better understand\ntheir required children.",
    "lineNumber": 39,
    "interface": false
  },
  {
    "__docId__": 641,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#constructor",
    "access": "public",
    "description": "Constructor:\n- initializes all member variables\n- adds a listener on the document for the WIDGET_EVENT\n- dispatches the WIDGET_CREATED_EVENT",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "includeInTemplateDescription",
        "description": "if true, the Harmonic Template will include in the template description"
      }
    ],
    "emits": [
      {
        "types": [
          "HarmonicTemplate.WIDGET_CREATED_EVENT"
        ],
        "description": "once this object is constructed, this event is dispatched."
      }
    ],
    "listens": [
      {
        "types": [
          "HarmonicTemplate.WIDGET_EVENT_<fieldNum>"
        ],
        "description": "listens for commands from the Harmonic Template"
      }
    ]
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "_widgetType",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_widgetType",
    "access": "private",
    "description": "The type of widget.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "_fieldNum",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_fieldNum",
    "access": "private",
    "description": "The field number for this widget.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 644,
    "kind": "member",
    "name": "_name",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_name",
    "access": "private",
    "description": "The name of this widget.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 645,
    "kind": "member",
    "name": "_createjsObj",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_createjsObj",
    "access": "private",
    "description": "The createjs object associated with this widget.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 646,
    "kind": "member",
    "name": "_includeInTemplateDescription",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_includeInTemplateDescription",
    "access": "private",
    "description": "Whether or not this widget should be included in the template description.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 647,
    "kind": "member",
    "name": "_widgetEventName",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_widgetEventName",
    "access": "private",
    "description": "The name of the event this widget listens for.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "_onWidgetEvent",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#_onWidgetEvent",
    "access": "private",
    "description": "Handler for the WIDGET_EVENT that is dispatched by Harmonic Template as\nfunctions are received.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "CustomEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "the event dispatched by the Harmonic Template"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event.functionName",
        "description": "the function associated with the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "isLoaded",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#isLoaded",
    "access": "public",
    "description": "Queried by the Harmonic Template to verify that the widget is loaded\nbefore sending the load complete signal.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#updateTextField",
    "access": "public",
    "description": "Updates the internal text field.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "text to render"
      },
      {
        "nullable": null,
        "types": [
          "render"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "if true, render now, otherwise wait for the renderField"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "appendTextField",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#appendTextField",
    "access": "public",
    "description": "Appends to the internal text field.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "text to add to the rendered text"
      },
      {
        "nullable": null,
        "types": [
          "render"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "if true, render now, otherwise wait for the renderField"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "updateImageField",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#updateImageField",
    "access": "public",
    "description": "Updates the internal image.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePath",
        "description": "the path to the image"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "renderField",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#renderField",
    "access": "public",
    "description": "Renders the field.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 198,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "restartFieldAnimation",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#restartFieldAnimation",
    "access": "public",
    "description": "Start/Restart the field animation.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromBeginning",
        "description": "true = restart from beginning, otherwise restart from the current frame"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 655,
    "kind": "method",
    "name": "stopFieldAnimation",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#stopFieldAnimation",
    "access": "public",
    "description": "Stops the field animation.\n\nThis function should be overridden by the derived class if it\nneeds this functionality.",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "immediate",
        "description": "true = stop immediately, otherwise, stop at the end of the animation"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "parseName",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget.parseName",
    "access": "public",
    "description": "Helper function for parsing the name of the createjs object.  The name\nshould be structured like:  'field<fieldNum>_<name>'.",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "the field number parsed from the createjs object name"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name parsed from the createjs object name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object with the following properties"
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "discoverName",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget.discoverName",
    "access": "public",
    "description": "Attempts to discover the name of the createjs object by\niterating through the parent's key/value pairs.  Once the\nvalue of the key matches the createobj, then the name is\nthe key.\n\nThis function was added to support the Adobe Animate v20\ngenerated JavaScript.  Adobe removed the 'name' property\non MovieClips, so now the name must be discovered.",
    "lineNumber": 278,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "validate",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget.validate",
    "access": "public",
    "description": "Validates that the createjs object is structured properly.\nWidgets should be composed of a createjs MovieClip and named\ncorrectly.  Also, if the MovieClip contains a TextField, it\ntoo must be named correctly.\n\nProper naming:\n- MovieClip name:  'field<fieldNum>_<name>'\n- TextField name:  harmonicField",
    "lineNumber": 310,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "derivedClass",
        "description": "the name of the derived class.  This will be used for logging."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "containsTextField",
        "description": "indicates if the MovieClip contains a TextField to be validated"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "the field number parsed from the createjs object name"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name parsed from the createjs object name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns an object if validation passes; otherwise, undefined is returned"
    }
  },
  {
    "__docId__": 659,
    "kind": "get",
    "name": "widgetType",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#widgetType",
    "access": "public",
    "description": "Returns the type of widget.",
    "lineNumber": 377,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 660,
    "kind": "get",
    "name": "fieldNum",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#fieldNum",
    "access": "public",
    "description": "Returns the field number associated with this widget (derived from the name of the createjs object).",
    "lineNumber": 383,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 661,
    "kind": "get",
    "name": "name",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#name",
    "access": "public",
    "description": "Returns the name of the widget (derived from the name of the createjs object).",
    "lineNumber": 389,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 662,
    "kind": "get",
    "name": "createjsObj",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#createjsObj",
    "access": "public",
    "description": "Returns the createjs object associated with this widget.",
    "lineNumber": 395,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 663,
    "kind": "get",
    "name": "includeInTemplateDescription",
    "memberof": "src/widgets/harmonic-widget.js~HarmonicWidget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-widget.js~HarmonicWidget#includeInTemplateDescription",
    "access": "public",
    "description": "Returns true if this widget should be included in the template description.",
    "lineNumber": 401,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 664,
    "kind": "file",
    "name": "src/widgets/harmonic-xmlhttprequest.js",
    "content": "/**\n * File: harmonic-xmlhttprequest.js\n *\n * Copyright (c) 2018 Harmonic, Inc.\n */\n\n/**\n * The HarmonicXMLHttpRequest widget provides a mechanism to read data from\n * a webserver.  It contains a dynamic text field that can be used to load\n * the URL.\n *\n * This class implements the Harmonic XMLHttpRequest Widget.  It derives from\n * the {@link HarmonicWidget} class and implements necessary functions to meet the\n * needs of this widget.\n *\n * The XMLHttpRequest widget requires that the registered createdjs\n * object have the following structure:\n *\n * - The createjsObj must be a createjs.MovieClip named correctly (reference\n *   {@link HarmonicWidget}).\n * - The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n *   This text object represents the dynamic text field.\n *\n * This class defines a function for:\n *\n * - updateTextField - the text defines the URL to load from\n *\n * To use this class, simply register the createjs object using the\n * static register function.  The created HarmonicXMLHttpRequest object is\n * returned from the register function.  If there is a error, then\n * 'undefined' is returned and an error will be logged.\n *\n * The 'url' can be specified in the register function or it\n * can be set using the 'url' property on the object returned from\n * the call to register.\n *\n * After a load is request, the widget will dispatch the\n * HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT event on the document or\n * the HarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT event if the\n * asynchronous request has timed out\n *\n * @example\n * 1. When the createjs object is registered with the class in the first frame of the movie clip:\n * let xhr = HarmonicXMLHttpRequest.register(this, \"test.xml\");\n *\n * 2. Or set the 'url' property from the returned object:\n * let xhr = HarmonicXMLHttpRequest.register(this);\n * xhr.url = \"test.xml\";\n *\n * document.addEventListener(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT, (event) => {\n *     hjs.info(\"Your data is loaded: \" + event.detail);\n * });\n *\n * document.addEventListener(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT, (event) => {\n *     hjs.error(\"Your load timed out\");\n * });\n *\n * xhr.load();\n */\nclass HarmonicXMLHttpRequest extends HarmonicWidget {\n\n    /**\n     * Constructor\n     * - initializes all member variables\n     *\n     * @param {String} widgetType - reference HarmonicTemplate.WIDGET_TYPE_<type>\n     * @param {Number} fieldNum - field number used to uniquely identify the widget\n     * @param {String} name - the name of the widget\n     * @param {Object} createjsObj - the createjs object associated with this widget\n     */\n    constructor(widgetType, fieldNum, name, createjsObj) {\n        super(widgetType, fieldNum, name, createjsObj, true);  // include in the template description\n\n        hjs.debug(\"HarmonicXMLHttpRequest.constructor\");\n\n        /**\n         * The URL to send the request to.\n         * @type {String}\n         */\n        this._url = \"\";\n\n        /**\n         * Flag to indicate if the request should be asynchronous or synchronous.\n         * @type {Boolean}\n         */\n        this._async = true;\n\n        /**\n         * The timeout property of the XMLHttpRequest.stringify\n         * @type {Number}\n         */\n        this._timeout = 0;\n\n        /**\n         * Flag that indicates if the load should occur when the URL changes.\n         * @type {Boolean}\n         */\n        this._loadWhenUrlChanges = true;\n\n        /**\n         * The XMLHttpRequest object.\n         * @type {Object}\n         */\n        this._xhttp = undefined;\n    }\n\n    /**\n     * Registers a createjs object with the widget.  A new\n     * HarmonicXMLHttpRequest will be created in this function.\n     *\n     * @param {Object} createjsObj - the createjs object to associate with this widget\n     * @param {String} url - the url to send the request to\n     *\n     * @return {Object} the newly created HarmonicXMLHttpRequest instance, or undefined if there is an error\n     */\n    static register(createjsObj, url) {\n        let result = HarmonicWidget.validate(\"HarmonicXMLHttpRequest\", createjsObj, true);\n        if (result) {\n            return new HarmonicXMLHttpRequest(HarmonicTemplate.WIDGET_TYPE_TEXT, result.fieldNum, result.name, createjsObj, url);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Handles the updateTextField request from the Harmonic Template.\n     *\n     * @param {String} text - the text to display\n     * @param {Boolean} render - flag indicating if the field should be rendered\n     */\n    updateTextField(text, render) {\n        this._url = text;\n        if (this._loadWhenUrlChanges) {\n            this.load();\n        }\n    }\n\n    /**\n     * Loads the contents from the url.  The XML_HTTP_REQUEST_COMPLETE_EVENT will\n     * be dispatched when completed.\n     *\n     * @emits {HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT} is dispatched when the request completes\n     */\n    load() {\n        if (this._url) {\n            this._xhttp = new XMLHttpRequest();\n            this._xhttp.open(\"GET\", this._url, this._async);\n\n            if (this._async) {\n                this._xhttp.timeout = this._timeout;\n            }\n\n            this._xhttp.onreadystatechange = function() {\n                // hjs.debug(\"readyState: \" + this._xhttp.readyState + \" status: \" + this._xhttp.status + \" statusText: \" + this._xhttp.statusText);\n                if (this._xhttp.readyState == XMLHttpRequest.DONE) {\n                    let obj = {};\n                    if (this._xhttp.status == 200) {\n                        obj.status = true;\n                        obj.httpStatusCode = this._xhttp.status;\n                        obj.text = this._xhttp.responseText;\n\n                        // hjs.debug(\"HarmonicXMLHttpRequest.load success: url \" + this._url + \" text: \" + obj.text);\n                    }\n                    else {\n                        obj.status = false;\n                        obj.httpStatusCode = this._xhttp.status;\n                        obj.text = this._xhttp.statusText;\n\n                        hjs.error(\"HarmonicXMLHttpRequest.load failed: url \" + this._url + \" statusText: \" + obj.text);\n                    }\n\n                    let event = new CustomEvent(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT,\n                        {\n                            detail : obj\n                        }\n                    );\n\n                    document.dispatchEvent(event);\n                }\n            }.bind(this);\n\n            this._xhttp.ontimeout = function() {\n                let event = new CustomEvent(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT);\n                document.dispatchEvent(event);\n            }\n\n            this._xhttp.send();\n        }\n        else {\n            hjs.error(\"HarmonicXMLHttpRequest.load: invalid url: \" + this._url);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Properties\n    //--------------------------------------------------------------------------\n\n    /**\n     * Sets the URL.\n     * @param {String} value - the URL to send the request to.\n     */\n    set url(value) {\n        this._url = value;\n    }\n\n    /**\n     * Gets the URL.\n     */\n    get url() {\n        return this._url;\n    }\n\n    /**\n     * Sets the asynchronous flag on the request.\n     * @param {Boolean} value - true = asynchronous, false = synchronous (deprecated)\n     */\n    set async(value) {\n        this._async = value;\n    }\n\n    /**\n     * Gets the asynchronous flag.\n     */\n    get async() {\n        return this._async;\n    }\n\n    /**\n     * Sets the timeout (milliseconds) on the request.\n     * @param {Number} value - 0 = no timeout, > 0 = milliseconds\n     */\n    set timeout(value) {\n        this._timeout = value;\n    }\n\n    /**\n     * Gets the timeout (milliseconds)\n     */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /**\n     * Sets the flag that indicates to load when the URL changes.\n     * @param {Boolean} value - true = load when URL changes, false otherwise\n     */\n    set loadWhenUrlChanges(value) {\n        this._loadWhenUrlChanges = value;\n    }\n\n    /**\n     * Gets the value of that indicates whether or not to load when the URL changes.\n     */\n    get loadWhenUrlChanges() {\n        return this._loadWhenUrlChanges;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Events\n//------------------------------------------------------------------------------\nHarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT = \"XMLHttpRequestCompleteEvent\";\nHarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT = \"XMLHttpRequestTimeoutEvent\";\n",
    "static": true,
    "longname": "C:/dan/html/harmonic-template/src/widgets/harmonic-xmlhttprequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 665,
    "kind": "class",
    "name": "HarmonicXMLHttpRequest",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js",
    "static": true,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "access": "public",
    "export": false,
    "importPath": "./src/widgets/harmonic-xmlhttprequest.js",
    "importStyle": null,
    "description": "The HarmonicXMLHttpRequest widget provides a mechanism to read data from\na webserver.  It contains a dynamic text field that can be used to load\nthe URL.\n\nThis class implements the Harmonic XMLHttpRequest Widget.  It derives from\nthe {@link HarmonicWidget} class and implements necessary functions to meet the\nneeds of this widget.\n\nThe XMLHttpRequest widget requires that the registered createdjs\nobject have the following structure:\n\n- The createjsObj must be a createjs.MovieClip named correctly (reference\n  {@link HarmonicWidget}).\n- The createjs.MovieClip must contain a createjs.Text child named 'harmonicField'.\n  This text object represents the dynamic text field.\n\nThis class defines a function for:\n\n- updateTextField - the text defines the URL to load from\n\nTo use this class, simply register the createjs object using the\nstatic register function.  The created HarmonicXMLHttpRequest object is\nreturned from the register function.  If there is a error, then\n'undefined' is returned and an error will be logged.\n\nThe 'url' can be specified in the register function or it\ncan be set using the 'url' property on the object returned from\nthe call to register.\n\nAfter a load is request, the widget will dispatch the\nHarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT event on the document or\nthe HarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT event if the\nasynchronous request has timed out",
    "examples": [
      "1. When the createjs object is registered with the class in the first frame of the movie clip:\nlet xhr = HarmonicXMLHttpRequest.register(this, \"test.xml\");\n\n2. Or set the 'url' property from the returned object:\nlet xhr = HarmonicXMLHttpRequest.register(this);\nxhr.url = \"test.xml\";\n\ndocument.addEventListener(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT, (event) => {\n    hjs.info(\"Your data is loaded: \" + event.detail);\n});\n\ndocument.addEventListener(HarmonicXMLHttpRequest.XML_HTTP_REQUEST_TIMEOUT_EVENT, (event) => {\n    hjs.error(\"Your load timed out\");\n});\n\nxhr.load();"
    ],
    "lineNumber": 60,
    "interface": false,
    "extends": [
      "HarmonicWidget"
    ]
  },
  {
    "__docId__": 666,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#constructor",
    "access": "public",
    "description": "Constructor\n- initializes all member variables",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetType",
        "description": "reference HarmonicTemplate.WIDGET_TYPE_<type>"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "field number used to uniquely identify the widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object associated with this widget"
      }
    ]
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "_url",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#_url",
    "access": "private",
    "description": "The URL to send the request to.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "_async",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#_async",
    "access": "private",
    "description": "Flag to indicate if the request should be asynchronous or synchronous.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 669,
    "kind": "member",
    "name": "_timeout",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#_timeout",
    "access": "private",
    "description": "The timeout property of the XMLHttpRequest.stringify",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "_loadWhenUrlChanges",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#_loadWhenUrlChanges",
    "access": "private",
    "description": "Flag that indicates if the load should occur when the URL changes.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 671,
    "kind": "member",
    "name": "_xhttp",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#_xhttp",
    "access": "private",
    "description": "The XMLHttpRequest object.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "register",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest.register",
    "access": "public",
    "description": "Registers a createjs object with the widget.  A new\nHarmonicXMLHttpRequest will be created in this function.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "createjsObj",
        "description": "the createjs object to associate with this widget"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "the url to send the request to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the newly created HarmonicXMLHttpRequest instance, or undefined if there is an error"
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "updateTextField",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#updateTextField",
    "access": "public",
    "description": "Handles the updateTextField request from the Harmonic Template.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the text to display"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "render",
        "description": "flag indicating if the field should be rendered"
      }
    ],
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "load",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#load",
    "access": "public",
    "description": "Loads the contents from the url.  The XML_HTTP_REQUEST_COMPLETE_EVENT will\nbe dispatched when completed.",
    "lineNumber": 145,
    "emits": [
      {
        "types": [
          "HarmonicXMLHttpRequest.XML_HTTP_REQUEST_COMPLETE_EVENT"
        ],
        "description": "is dispatched when the request completes"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "set",
    "name": "url",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#url",
    "access": "public",
    "description": "Sets the URL.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the URL to send the request to."
      }
    ]
  },
  {
    "__docId__": 679,
    "kind": "get",
    "name": "url",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#url",
    "access": "public",
    "description": "Gets the URL.",
    "lineNumber": 210,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "set",
    "name": "async",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#async",
    "access": "public",
    "description": "Sets the asynchronous flag on the request.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = asynchronous, false = synchronous (deprecated)"
      }
    ]
  },
  {
    "__docId__": 682,
    "kind": "get",
    "name": "async",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#async",
    "access": "public",
    "description": "Gets the asynchronous flag.",
    "lineNumber": 225,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "set",
    "name": "timeout",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#timeout",
    "access": "public",
    "description": "Sets the timeout (milliseconds) on the request.",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "0 = no timeout, > 0 = milliseconds"
      }
    ]
  },
  {
    "__docId__": 685,
    "kind": "get",
    "name": "timeout",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#timeout",
    "access": "public",
    "description": "Gets the timeout (milliseconds)",
    "lineNumber": 240,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "set",
    "name": "loadWhenUrlChanges",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#loadWhenUrlChanges",
    "access": "public",
    "description": "Sets the flag that indicates to load when the URL changes.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true = load when URL changes, false otherwise"
      }
    ]
  },
  {
    "__docId__": 688,
    "kind": "get",
    "name": "loadWhenUrlChanges",
    "memberof": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/widgets/harmonic-xmlhttprequest.js~HarmonicXMLHttpRequest#loadWhenUrlChanges",
    "access": "public",
    "description": "Gets the value of that indicates whether or not to load when the URL changes.",
    "lineNumber": 255,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Harmonic Template and Widget JavaScript Library\r\n\r\nThis JavaScript library, provided by Harmonic, contains all of the code necessary to allow a HTML template to be used in the graphics processing and controlled by Oxtel.  The code is composed of the following main components:\r\n\r\n* HJS - provides the interface to and from the HTML renderer\r\n* Harmonic Template - controls the main timeline and manages the widgets\r\n* Harmonic Widgets - provides common functionality used by many of the template\r\n* Harmonic FontFace - provides a mechanism for loading fonts from the webserver\r\n* Harmonic Socket - provides a mechanism to allow JavaScript to interact with sockets\r\n\r\n## HJS\r\n\r\nHJS (Harmonic JavaScript) provides the interface to the C++ HTML renderer.  It uses a WebSocket to communicate to the renderer.  The HTML renderer provides access to/from d-bus for template control as well as access to the shared surface.  HJS also provides a mechanism to log messages to the Monitor log.\r\n\r\nThe HJS contains a global object called 'hjstest' that provides a valuable means to test template functionality in the desktop environment.  This object allows the user to inject commands into the template just as if it was received over the websocket from the HTML renderer.  This can be very useful when debugging run-time issues.\r\n\r\n## Harmonic Template\r\n\r\nThe Harmonic Template is the main controller for HTML templates.  The Harmonic Template directs its animation controls at the Adobe exportRoot global object.  It also controls all createjs MovieClips on the display tree.\r\n\r\nThe Harmonic Template is responsible for receiving template control commands from HJS via the HJS.COMMAND_RECEIVED_EVENT.  It also manages widgets that are created during load time.  Commands that are received from HJS and targeted at a widget are sent directly to the widget with the WIDGET_EVENT.\r\n\r\n## Harmonic Widgets\r\n\r\nHarmonic Widgets make it easy for customers to integrate standard functionality into their templates.  The Harmonic Widgets can be included into their Adobe Animate CC project by importing the library from the Harmonic Template Widget Library.  The widgets in this library register themselves with the Harmonic Widget JavaScript code which provides the core functionality.  The Harmonic Widgets register themselves with the Harmonic Template by dispatching the WIDGET_CREATED_EVENT.  Once the Harmonic Template receives the event, it keeps track of the created widgets and sends the WIDGET_EVENT to the widget when the widget needs to take action.  \r\n\r\n## Harmonic FontFace\r\n\r\nThe Harmonic FontFace is a thin wrapper around the CSS Font Loading API.  It is intended to make it easy for customers to include fonts that reside near the Harmonic Template on the webserver.\r\n\r\n## Harmonic Socket\r\n\r\nThe Harmonic Socket is a mechanism that allows JavaScript to connect to TCP or UDP sockets using the HTML renderer as a proxy.  Since browsers cannot open sockets directly due to security concerns, the HTML renderer will handle the socket connection and communication.\r\n\r\n# Design\r\n\r\n![Design](design.png)\r\n\r\n# Common Code Snippets\r\n\r\nBelow are a set of common code snippets.  These snippets can also be found throughout the documentation, but have been duplicated here for convenience.\r\n\r\n## Callbacks on Harmonic Template Events\r\n\r\n```javascript\r\ndocument.addEventListener(HarmonicTemplate.LOAD_COMPLETE_EVENT, onLoadComplete.bind(this));\r\nfunction onLoadComplete(obj) {\r\n    hjs.info(\"LOAD_COMPLETE_EVENT received\");\r\n}\r\n\r\ndocument.addEventListener(HarmonicTemplate.VISIBLE_EVENT, onVisible.bind(this));\r\nfunction onVisible(obj) {\r\n    hjs.info(\"VISIBLE_EVENT received\");\r\n}\r\n\r\ndocument.addEventListener(HarmonicTemplate.FULLY_VISIBLE_EVENT, onFullyVisible.bind(this));\r\nfunction onFullyVisible(obj) {\r\n    hjs.info(\"FULLY_VISIBLE_EVENT received\");\r\n}\r\n```\r\n\r\n## Overriding updateTextField\r\n\r\n```javascript\r\nfunction updateTextFieldOverride(obj) {\r\n    hjs.info(\"updateTextFieldOverride:\");\r\n    hjs.info(\"obj.tickid:   \" + obj.tickid);\r\n    hjs.info(\"obj.fieldNum: \" + obj.fieldNum);\r\n    hjs.info(\"obj.text:     \" + obj.text);\r\n    hjs.info(\"obj.render:   \" + obj.render);\r\n    switch (obj.fieldNum) {\r\n        case 1:\r\n            break;\r\n    }\r\n\r\n    // This is optional, but recommended.\r\n    harmonicTemplate.updateTextField(obj);\r\n}\r\n\r\n// Create the override object and register it with the harmonicTemplate\r\nlet override = {\r\n    updateTextField: updateTextFieldOverride     \r\n}\r\n\r\nharmonicTemplate.registerOverride(override);\r\n```\r\n\r\n## Loading a font\r\n\r\n```javascript\r\nlet roboto = new HarmonicFontFace(\"Roboto Black\", \"Roboto-Black.woff2\");\r\nroboto.load();\r\n```\r\n\r\n",
    "longname": "C:\\dan\\html\\harmonic-template\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "",
    "longname": "",
    "name": "",
    "static": true,
    "access": "public"
  }
]